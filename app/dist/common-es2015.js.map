{"version":3,"file":"common-es2015.js","mappings":"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","sources":["./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from \"../auth.service\";\nimport { HelperService } from \"../../shared/services/helper.service\";\nimport { ErrorService } from 'src/app/shared/services/error.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  isLoading: boolean = false;\n  loginForm: FormGroup;\n  errorMessage: string;\n  private emailPattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private helperService: HelperService,\n    private errorService: ErrorService,\n    private loginDialogRef: MatDialogRef<LoginComponent>,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.errorService.getErrorListener()\n    .subscribe((errorMessage) => {\n      this.errorMessage = errorMessage;\n    })\n    this.authService.getIsLoadingListener().subscribe((isLoading) => {\n      this.isLoading = isLoading;\n    });\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, Validators.pattern(this.emailPattern)]],\n      password: [\"\", [Validators.required]],\n    });\n  }\n\n  get email() {\n    return this.loginForm.get('email')\n  }\n\n  get password() {\n    return this.loginForm.get('password')\n  }\n\n  onLogin() {\n    this.errorMessage = null\n    this.isLoading = true\n    if (this.loginForm.invalid) {\n      this.helperService.validateAllFormFields(this.loginForm)\n      this.isLoading = false\n      return;\n    }\n    this.authService.login(this.loginForm.value, this.loginDialogRef);\n  }\n\n  forgotPassword() {\n    this.router.navigate([\"/auth/forgot-password\"])\n    this.loginDialogRef.close()\n  }\n\n}\n","<div class=\"pb-5 border-0 card bg-color1\">\n  <!-- <div mat-dialog-actions class=\"d-flex justify-content-end\">\n    <button mat-dialog-close mat-button>\n      <mat-icon>close</mat-icon>\n    </button>\n  </div> -->\n  <div class=\"card-body px-lg-5 py-lg-5\">\n    <p class=\"text-center f-w-100 text-primary display-4\">Sign In</p>\n    <p class=\"text-center text-gray m-b-50\">Welcome back.</p>\n\n\n    <div id=\"errorDiv\" *ngIf=\"errorMessage\" class=\"mb-4 text-center\">\n      <small>{{ errorMessage }}</small>\n    </div>\n\n    <!-- <form> -->\n\n    <form [formGroup]=\"loginForm\" class=\"m-t-50\" (ngSubmit)=\"onLogin()\">\n\n      <div class=\"mt-3 col-12\">\n        <div class=\"form-group\">\n          <input formControlName=\"email\" type=\"email\" class=\"form-control\" placeholder=\" Email or Phone\">\n          <!-- <div class=\"text text-danger\">Example invalid feedback text</div> -->\n          <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"text text-danger\">\n            <span *ngIf=\"email.hasError('required')\">\n              Email is a required field\n            </span>\n            <span *ngIf=\"email.hasError('pattern')\">\n              please use the right email format eg: example@example.com\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"mt-3 col-12\">\n        <div class=\"form-group\">\n          <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\n          <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"text text-danger\">\n            <span *ngIf=\"password.hasError('required')\">\n              password is a required field\n            </span>\n            <!-- <span *ngIf=\"password.hasError('pattern')\">\n              please use the right email format eg: example@example.com\n            </span> -->\n          </div>\n        </div>\n      </div>\n\n      <div class=\"text-center\">\n        <!-- <i class=\"fa fa-spinner\"></i> -->\n        <button type=\"submit\" class=\"py-4 btn btn-block btn-lg btn-primary m-t-50\">\n          <span *ngIf=\"isLoading\" class=\"btn-inner--icon\"><i class=\"fa fa-spinner fa-spin fa-fw\"></i></span>\n          Login\n        </button>\n\n        <!-- <p class=\"mt-3 small text-gray\">Want an account? <span class=\"text-primary\">Sign Up</span></p> -->\n        <button type=\"button\" mat-button (click)=\"forgotPassword()\" class=\"mt-3 small text-gray\"><span class=\"text-primary\">Forgot password?</span></button>\n      </div>\n    </form>\n  </div>\n</div>\n"],"names":[],"sourceRoot":"webpack:///"}