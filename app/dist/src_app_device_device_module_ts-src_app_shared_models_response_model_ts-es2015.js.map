{"version":3,"file":"src_app_device_device_module_ts-src_app_shared_models_response_model_ts-es2015.js","mappings":"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","sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","./src/app/device/device-create/device-create.component.ts","./src/app/device/device-create/device-create.component.html","./src/app/device/device-list/device-list.component.ts","./src/app/device/device-list/device-list.component.html","./src/app/device/device-routing.module.ts","./src/app/device/device.module.ts","./src/app/shared/models/response.model.ts"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatSlideToggleRequiredValidator_BaseFactory; return function MatSlideToggleRequiredValidator_Factory(t) { return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator); }; }();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ErrorService } from 'src/app/shared/services/error.service';\nimport { UserService } from 'src/app/user/user.service';\n\n@Component({\n  selector: 'app-device-create',\n  templateUrl: './device-create.component.html',\n  styleUrls: ['./device-create.component.scss']\n})\nexport class DeviceCreateComponent implements OnInit {\n  isLoading = false;\n\n  title = \"Create Device\";\n  deviceForm: FormGroup = new FormGroup({})\n  errorMessage: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private errorService: ErrorService,\n    private dialogRef: MatDialogRef<DeviceCreateComponent>\n  ) { }\n\n  ngOnInit(): void {\n    this.errorService.getErrorListener()\n    .subscribe((errorMessage) => {\n      this.errorMessage = errorMessage\n      this.isLoading = false;\n    })\n    this.deviceForm = this.fb.group({\n      name: ['', Validators.required],\n      device_id\t: ['', Validators.required],\n      device_code: ['', Validators.required],\n      is_active: [true, Validators.required],\n    })\n  }\n\n  onSave() {\n    this.isLoading = true;\n    this.userService.createDevice(this.deviceForm.value, this.dialogRef)\n  }\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"mx-auto col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <div class=\"d-flex justify-content-between align-items-center\" >\n            <h5>{{title | titlecase}}</h5>\n            <button mat-button [mat-dialog-close]=false>\n              <mat-icon>\n                close\n              </mat-icon>\n            </button>\n          </div>\n        </div>\n        <div class=\"card-body\">\n\n          <div id=\"errorDiv\" *ngIf=\"errorMessage\" class=\"mb-4 text-center\">\n            <small>{{ errorMessage }}</small>\n          </div>\n\n          <form [formGroup]=\"deviceForm\" (ngSubmit)=\"onSave()\" class=\"row theme-form mega-form\">\n            <div class=\"col-md\">\n              <div class=\"form-group\">\n                <label class=\"col-form-label\">Device name</label>\n                <input formControlName=\"name\" class=\"form-control\" type=\"text\" placeholder=\"Device Name\">\n              </div>\n            </div>\n\n            <div class=\"col-md\">\n              <div class=\"form-group\">\n                <label class=\"col-form-label\">Device code</label>\n                <input formControlName=\"device_code\" class=\"form-control\" type=\"text\" placeholder=\"Device code\">\n              </div>\n            </div>\n\n            <div class=\"col-md\">\n              <div class=\"form-group\">\n                <label class=\"col-form-label\">Device ID</label>\n                <input formControlName=\"device_id\" class=\"form-control\" type=\"text\" placeholder=\"Device ID\">\n              </div>\n            </div>\n\n          </form>\n        </div>\n        <div class=\"card-footer py-0\">\n          <button [disabled]=\"isLoading == true\" (click)=\"onSave()\" class=\"mr-1 btn col-6 btn-block mx-auto btn-primary\">\n            <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner mr-2\"></i>\n            Submit\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserService } from 'src/app/user/user.service';\nimport { DeviceCreateComponent } from '../device-create/device-create.component';\n\n@Component({\n  selector: 'app-device-list',\n  templateUrl: './device-list.component.html',\n  styleUrls: ['./device-list.component.scss']\n})\nexport class DeviceListComponent implements OnInit {\n  private pageSize: number;\n  private pageIndex: number;\n  length: number;\n  tableLoading: boolean = true;\n  deviceList: any[] = [];\n  displayedColumns: any[] = [\n    // \"position\",\n    \"device_name\",\n    \"device_id\",\n    \"device_code\",\n    \"location\",\n    \"is_active\",\n    // \"star\",\n  ];\n  expandedElement: any;\n\n  constructor(\n    private userService: UserService,\n    private dialog: MatDialog,\n    ) {}\n\n  ngOnInit(): void {\n    this.getDeviceList();\n    this.userService.getIsLoadingListener()\n    .subscribe(\n      (isLoading) => {\n        isLoading ? null : this.getDeviceList()\n      }\n    )\n  }\n\n  openCreateCategoryDialog(data=null) {\n    const dialogRef = this.dialog.open(DeviceCreateComponent, {\n      data: data,\n      width: \"80%\",\n      disableClose: true,\n\n    });\n\n    dialogRef.afterClosed()\n    .subscribe(result => {\n      this.getDeviceList()\n    });\n  }\n\n  getDeviceList() {\n    this.userService.getDeviceList(this.pageSize, this.pageIndex);\n    this.userService.getDeviceListUpdate().subscribe((deviceList) => {\n      this.deviceList = deviceList.results\n      // this.deviceList = deviceList.results.map((element, index) => {\n      //   return { ...element, position: index + 1 };\n      // });\n      this.tableLoading = false;\n      this.length = deviceList.count;\n    });\n  }\n\n  onActivateDevice(device) {\n    console.log(device)\n    debugger;\n    this.userService.activateDevice(device)\n  }\n\n  pageChange(value: { pageSize: number; pageIndex: number }) {\n    this.tableLoading = true;\n    this.pageSize = value.pageSize;\n    this.pageIndex = value.pageIndex;\n    this.getDeviceList();\n  }\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <div class=\"d-flex justify-content-between\">\n        <h5>Device List</h5>\n        <button (click)=\"openCreateCategoryDialog()\" class=\"btn btn-primary\">\n          Add new device\n        </button>\n      </div>\n    </div>\n    <div class=\"card-body\">\n\n      <div class=\"mat-elevation-z8\">\n\n        <div class=\"example-loading-shade\" *ngIf=\"tableLoading\">\n          <div class=\"loader-box\">\n            <div class=\"loader\">\n              <div class=\"line bg-primary\"></div>\n              <div class=\"line bg-primary\"></div>\n              <div class=\"line bg-primary\"></div>\n              <div class=\"line bg-primary\"></div>\n            </div>\n          </div>\n          <!-- <mat-spinner *ngIf=\"tableLoading\"></mat-spinner> -->\n        </div>\n        <table mat-table [dataSource]=\"deviceList\" multiTemplateDataRows>\n          <!-- Position Column -->\n          <!-- <ng-container matColumnDef=\"position\">\n            <th mat-header-cell *matHeaderCellDef> No. </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\n          </ng-container> -->\n\n          <!-- Device Name Column -->\n          <ng-container matColumnDef=\"device_name\">\n            <th mat-header-cell *matHeaderCellDef> Device Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n          </ng-container>\n\n          <!-- Device ID Column -->\n          <ng-container matColumnDef=\"device_id\">\n            <th mat-header-cell *matHeaderCellDef> Device ID </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.device_id}}</td>\n          </ng-container>\n\n          <!-- Device Code Column -->\n          <ng-container matColumnDef=\"device_code\">\n            <th mat-header-cell *matHeaderCellDef> Device Code </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.device_code}} </td>\n          </ng-container>\n\n          <!-- location Column -->\n          <ng-container matColumnDef=\"location\">\n            <th mat-header-cell *matHeaderCellDef> Location </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.location}} </td>\n          </ng-container>\n\n          <!-- is_active Column -->\n          <ng-container matColumnDef=\"is_active\">\n            <th mat-header-cell *matHeaderCellDef> Active </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <mat-slide-toggle (change)=\"onActivateDevice(element)\" [(ngModel)]=\"element.is_active\">\n              </mat-slide-toggle>\n\n            </td>\n          </ng-container>\n\n          <!-- Action Column -->\n          <!-- <ng-container matColumnDef=\"star\">\n            <th mat-header-cell *matHeaderCellDef> Withdraw </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <button [disabled]=\"element.sid_balance <= 250\" class=\"btn btn-primary\" (click)=\"onCashout(element)\">Withdraw</button>\n            </td>\n          </ng-container> -->\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n        </table>\n        <app-paginator [length]=length (pageEvent)=pageChange($event)></app-paginator>\n      </div>\n\n\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DeviceCreateComponent } from './device-create/device-create.component';\nimport { DeviceListComponent } from './device-list/device-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DeviceListComponent\n  },\n  {\n    path: 'device-create',\n    component: DeviceCreateComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DeviceRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DeviceRoutingModule } from './device-routing.module';\nimport { DeviceListComponent } from './device-list/device-list.component';\nimport { DeviceCreateComponent } from './device-create/device-create.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { MatTableModule } from '@angular/material/table';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    DeviceListComponent,\n    DeviceCreateComponent,\n  ],\n  imports: [\n    CommonModule,\n    DeviceRoutingModule,\n    SharedModule,\n    MatTableModule,\n    MatSlideToggleModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule\n  ]\n})\nexport class DeviceModule { }\n","export class PaginatedResponse {\n    count:\tnumber;\n    next:\tstring;\n    previous:\tstring;\n    results:\tany []\n}\n"],"names":[],"sourceRoot":"webpack:///"}