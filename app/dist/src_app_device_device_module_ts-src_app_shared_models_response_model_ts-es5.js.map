{"version":3,"mappings":"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","names":["enterDuration","_angular_core__WEBPACK_IMPORTED_MODULE_0__","providedIn","factory","disableToggleValue","provide","_angular_forms__WEBPACK_IMPORTED_MODULE_1__","useExisting","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","MatSlideToggle","value","monitor","subscribe","Promise","event","_MatSlideToggleMixinBase","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_4__","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__","type","selectors","viewQuery","_c0","_c1","_c2","_t","ctx","hostAttrs","hostVars","hostBindings","inputs","disabled","disableRipple","color","tabIndex","name","id","labelPosition","ariaLabel","ariaLabelledby","required","outputs","change","toggleChange","exportAs","features","ngContentSelectors","decls","vars","consts","template","_r0","_c3","directives","_angular_material_core__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_observers__WEBPACK_IMPORTED_MODULE_6__","styles","encapsulation","changeDetection","decorators","args","_thumbEl","_thumbBarEl","_inputElement","selector","host","providers","MatSlideToggleRequiredValidator","t","_MatSlideToggleRequiredValidatorModule","exports","declarations","MatSlideToggleModule","imports","_angular_core__WEBPACK_IMPORTED_MODULE_2__","DeviceCreateComponent","fb","userService","errorService","dialogRef","_angular_forms__WEBPACK_IMPORTED_MODULE_3__","getErrorListener","errorMessage","isLoading","deviceForm","group","device_id","device_code","is_active","createDevice","_angular_core__WEBPACK_IMPORTED_MODULE_3__","DeviceListComponent","dialog","getDeviceList","getIsLoadingListener","data","open","_device_create_device_create_component__WEBPACK_IMPORTED_MODULE_0__","width","disableClose","afterClosed","pageSize","pageIndex","getDeviceListUpdate","deviceList","results","tableLoading","length","count","device","console","log","activateDevice","routes","path","component","_device_list_device_list_component__WEBPACK_IMPORTED_MODULE_1__","DeviceRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_3__","DeviceModule","_angular_common__WEBPACK_IMPORTED_MODULE_5__","_device_routing_module__WEBPACK_IMPORTED_MODULE_0__","_shared_shared_module__WEBPACK_IMPORTED_MODULE_3__","_angular_material_table__WEBPACK_IMPORTED_MODULE_6__","_angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_7__","_angular_forms__WEBPACK_IMPORTED_MODULE_8__","_angular_material_button__WEBPACK_IMPORTED_MODULE_9__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_10__","_angular_material_dialog__WEBPACK_IMPORTED_MODULE_11__","_device_create_device_create_component__WEBPACK_IMPORTED_MODULE_2__","PaginatedResponse"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///src/app/device/device-create/device-create.component.html","webpack:///src/app/device/device-create/device-create.component.ts","webpack:///src/app/device/device-list/device-list.component.html","webpack:///src/app/device/device-list/device-list.component.ts","webpack:///src/app/device/device-routing.module.ts","webpack:///src/app/device/device.module.ts","webpack:///src/app/shared/models/response.model.ts"],"sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(_c2, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatSlideToggleRequiredValidator_BaseFactory; return function MatSlideToggleRequiredValidator_Factory(t) { return (ɵMatSlideToggleRequiredValidator_BaseFactory || (ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator)))(t || MatSlideToggleRequiredValidator); }; }();\nMatSlideToggleRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"mx-auto col\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <div class=\"d-flex justify-content-between align-items-center\" >\n            <h5>{{title | titlecase}}</h5>\n            <button mat-button [mat-dialog-close]=false>\n              <mat-icon>\n                close\n              </mat-icon>\n            </button>\n          </div>\n        </div>\n        <div class=\"card-body\">\n\n          <div id=\"errorDiv\" *ngIf=\"errorMessage\" class=\"mb-4 text-center\">\n            <small>{{ errorMessage }}</small>\n          </div>\n\n          <form [formGroup]=\"deviceForm\" (ngSubmit)=\"onSave()\" class=\"row theme-form mega-form\">\n            <div class=\"col-md\">\n              <div class=\"form-group\">\n                <label class=\"col-form-label\">Device name</label>\n                <input formControlName=\"name\" class=\"form-control\" type=\"text\" placeholder=\"Device Name\">\n              </div>\n            </div>\n\n            <div class=\"col-md\">\n              <div class=\"form-group\">\n                <label class=\"col-form-label\">Device code</label>\n                <input formControlName=\"device_code\" class=\"form-control\" type=\"text\" placeholder=\"Device code\">\n              </div>\n            </div>\n\n            <div class=\"col-md\">\n              <div class=\"form-group\">\n                <label class=\"col-form-label\">Device ID</label>\n                <input formControlName=\"device_id\" class=\"form-control\" type=\"text\" placeholder=\"Device ID\">\n              </div>\n            </div>\n\n          </form>\n        </div>\n        <div class=\"card-footer py-0\">\n          <button [disabled]=\"isLoading == true\" (click)=\"onSave()\" class=\"mr-1 btn col-6 btn-block mx-auto btn-primary\">\n            <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner mr-2\"></i>\n            Submit\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { ErrorService } from 'src/app/shared/services/error.service';\nimport { UserService } from 'src/app/user/user.service';\n\n@Component({\n  selector: 'app-device-create',\n  templateUrl: './device-create.component.html',\n  styleUrls: ['./device-create.component.scss']\n})\nexport class DeviceCreateComponent implements OnInit {\n  isLoading = false;\n\n  title = \"Create Device\";\n  deviceForm: FormGroup = new FormGroup({})\n  errorMessage: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private errorService: ErrorService,\n    private dialogRef: MatDialogRef<DeviceCreateComponent>\n  ) { }\n\n  ngOnInit(): void {\n    this.errorService.getErrorListener()\n    .subscribe((errorMessage) => {\n      this.errorMessage = errorMessage\n      this.isLoading = false;\n    })\n    this.deviceForm = this.fb.group({\n      name: ['', Validators.required],\n      device_id\t: ['', Validators.required],\n      device_code: ['', Validators.required],\n      is_active: [true, Validators.required],\n    })\n  }\n\n  onSave() {\n    this.isLoading = true;\n    this.userService.createDevice(this.deviceForm.value, this.dialogRef)\n  }\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <div class=\"d-flex justify-content-between\">\n        <h5>Device List</h5>\n        <button (click)=\"openCreateCategoryDialog()\" class=\"btn btn-primary\">\n          Add new device\n        </button>\n      </div>\n    </div>\n    <div class=\"card-body\">\n\n      <div class=\"mat-elevation-z8\">\n\n        <div class=\"example-loading-shade\" *ngIf=\"tableLoading\">\n          <div class=\"loader-box\">\n            <div class=\"loader\">\n              <div class=\"line bg-primary\"></div>\n              <div class=\"line bg-primary\"></div>\n              <div class=\"line bg-primary\"></div>\n              <div class=\"line bg-primary\"></div>\n            </div>\n          </div>\n          <!-- <mat-spinner *ngIf=\"tableLoading\"></mat-spinner> -->\n        </div>\n        <table mat-table [dataSource]=\"deviceList\" multiTemplateDataRows>\n          <!-- Position Column -->\n          <!-- <ng-container matColumnDef=\"position\">\n            <th mat-header-cell *matHeaderCellDef> No. </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.position}} </td>\n          </ng-container> -->\n\n          <!-- Device Name Column -->\n          <ng-container matColumnDef=\"device_name\">\n            <th mat-header-cell *matHeaderCellDef> Device Name </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n          </ng-container>\n\n          <!-- Device ID Column -->\n          <ng-container matColumnDef=\"device_id\">\n            <th mat-header-cell *matHeaderCellDef> Device ID </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.device_id}}</td>\n          </ng-container>\n\n          <!-- Device Code Column -->\n          <ng-container matColumnDef=\"device_code\">\n            <th mat-header-cell *matHeaderCellDef> Device Code </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.device_code}} </td>\n          </ng-container>\n\n          <!-- location Column -->\n          <ng-container matColumnDef=\"location\">\n            <th mat-header-cell *matHeaderCellDef> Location </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.location}} </td>\n          </ng-container>\n\n          <!-- is_active Column -->\n          <ng-container matColumnDef=\"is_active\">\n            <th mat-header-cell *matHeaderCellDef> Active </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <mat-slide-toggle (change)=\"onActivateDevice(element)\" [(ngModel)]=\"element.is_active\">\n              </mat-slide-toggle>\n\n            </td>\n          </ng-container>\n\n          <!-- Action Column -->\n          <!-- <ng-container matColumnDef=\"star\">\n            <th mat-header-cell *matHeaderCellDef> Withdraw </th>\n            <td mat-cell *matCellDef=\"let element\">\n              <button [disabled]=\"element.sid_balance <= 250\" class=\"btn btn-primary\" (click)=\"onCashout(element)\">Withdraw</button>\n            </td>\n          </ng-container> -->\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n        </table>\n        <app-paginator [length]=length (pageEvent)=pageChange($event)></app-paginator>\n      </div>\n\n\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UserService } from 'src/app/user/user.service';\nimport { DeviceCreateComponent } from '../device-create/device-create.component';\n\n@Component({\n  selector: 'app-device-list',\n  templateUrl: './device-list.component.html',\n  styleUrls: ['./device-list.component.scss']\n})\nexport class DeviceListComponent implements OnInit {\n  private pageSize: number;\n  private pageIndex: number;\n  length: number;\n  tableLoading: boolean = true;\n  deviceList: any[] = [];\n  displayedColumns: any[] = [\n    // \"position\",\n    \"device_name\",\n    \"device_id\",\n    \"device_code\",\n    \"location\",\n    \"is_active\",\n    // \"star\",\n  ];\n  expandedElement: any;\n\n  constructor(\n    private userService: UserService,\n    private dialog: MatDialog,\n    ) {}\n\n  ngOnInit(): void {\n    this.getDeviceList();\n    this.userService.getIsLoadingListener()\n    .subscribe(\n      (isLoading) => {\n        isLoading ? null : this.getDeviceList()\n      }\n    )\n  }\n\n  openCreateCategoryDialog(data=null) {\n    const dialogRef = this.dialog.open(DeviceCreateComponent, {\n      data: data,\n      width: \"80%\",\n      disableClose: true,\n\n    });\n\n    dialogRef.afterClosed()\n    .subscribe(result => {\n      this.getDeviceList()\n    });\n  }\n\n  getDeviceList() {\n    this.userService.getDeviceList(this.pageSize, this.pageIndex);\n    this.userService.getDeviceListUpdate().subscribe((deviceList) => {\n      this.deviceList = deviceList.results\n      // this.deviceList = deviceList.results.map((element, index) => {\n      //   return { ...element, position: index + 1 };\n      // });\n      this.tableLoading = false;\n      this.length = deviceList.count;\n    });\n  }\n\n  onActivateDevice(device) {\n    console.log(device)\n    debugger;\n    this.userService.activateDevice(device)\n  }\n\n  pageChange(value: { pageSize: number; pageIndex: number }) {\n    this.tableLoading = true;\n    this.pageSize = value.pageSize;\n    this.pageIndex = value.pageIndex;\n    this.getDeviceList();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DeviceCreateComponent } from './device-create/device-create.component';\nimport { DeviceListComponent } from './device-list/device-list.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DeviceListComponent\n  },\n  {\n    path: 'device-create',\n    component: DeviceCreateComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class DeviceRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DeviceRoutingModule } from './device-routing.module';\nimport { DeviceListComponent } from './device-list/device-list.component';\nimport { DeviceCreateComponent } from './device-create/device-create.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { MatTableModule } from '@angular/material/table';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    DeviceListComponent,\n    DeviceCreateComponent,\n  ],\n  imports: [\n    CommonModule,\n    DeviceRoutingModule,\n    SharedModule,\n    MatTableModule,\n    MatSlideToggleModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule\n  ]\n})\nexport class DeviceModule { }\n","export class PaginatedResponse {\n    count:\tnumber;\n    next:\tstring;\n    previous:\tstring;\n    results:\tany []\n}\n"]}