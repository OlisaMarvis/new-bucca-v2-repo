{"version":3,"mappings":"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ACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;;AACA;AACA;AACA;;AACA;;AAlCA;AAmCA;AACA;;;;;eACA;AAAyB;AAAA;eACzB;AAA0B,iCAAqB,8EAAqB5C,CAArB,CAArB;AAA0C;;;iBACpE;AACA;AACA;AACA,aAHA,CAIA;;;AACA;;AACA;AAA4C6C;AAA5C;;AACA;AACA;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACS,aANT;AAOA;;;iBACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;;AACA;AACA;AAAoDC,iDAApD;AAAoDD;AAApD;AACA,eAFA,MAGA;AACA;AAAoDC,mCAApD;AAAoDD;AAApD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,8CADA,CAEA;AACA;;AACA;AACA;AAAgCA;AAAhC;AACA;AACA;AACA;;;;iBACA;AACA,kCADA,CAEA;;;AACA;AACA;AACA;AACA;;;iBACA;AACA;AACA;AACA;AACA;;;iBACA;AACA,0DAAsDE,wDAAtD,IAA2DC,kBAAsBD,wDAAjF,GAAsF;AACtFC;;AACA;AACA;AACA;AACA;;;;iBACA;AACA,oDACA,iEADA;AAEA;AACA;;;;iBACA;AACA,6BAAkB,iCAAlB,SAAsD,oBAAtD;AACA;AACA;;;;iBACA;AACA;AACA,0CAA+BF,SAA/B,YAAyC,EAAzC,IAAyC,uBAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,sDACA,oBADA,GAEA,8BAFA;AAGA;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,yCACY,6CAAK,qBAAL,EAAK,wBAAL,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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_0__","_r2","ctx_r0","id","direction","MatSortBase","MatSort","rxjs__WEBPACK_IMPORTED_MODULE_2__","v","active","nextDirectionIndex","_MatSortMixinBase","MAT_SORT_DEFAULT_OPTIONS","type","selectors","hostAttrs","inputs","disabled","start","disableClear","outputs","sortChange","exportAs","features","decorators","args","selector","host","sortOrder","_angular_material_core__WEBPACK_IMPORTED_MODULE_1__","indicator","transform","SORT_ANIMATION_TRANSITION","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","MatSortHeaderIntl","factory","token","providedIn","provide","deps","useFactory","MatSortHeaderBase","MatSortHeader","_sort","_columnDef","_focusMonitor","_elementRef","toState","fromState","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__","event","subscribe","_MatSortHeaderMixinBase","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__","hostVars","hostBindings","ctx","attrs","ngContentSelectors","decls","vars","consts","template","MatSortHeader_div_3_Template","directives","_angular_common__WEBPACK_IMPORTED_MODULE_8__","styles","encapsulation","data","animation","matSortAnimations","changeDetection","animations","MatSortModule","providers","imports","exports","declarations"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/sort.js"],"sourcesContent":["import { InjectionToken, EventEmitter, Directive, Optional, Inject, Input, Output, ɵɵdefineInjectable, Injectable, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\n\nconst _c0 = [\"mat-sort-header\", \"\"];\nfunction MatSortHeader_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1._disableViewStateAnimation = true; })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3._disableViewStateAnimation = false; });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6);\n    ɵngcc0.ɵɵelement(4, \"div\", 7);\n    ɵngcc0.ɵɵelement(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n} }\nconst _c1 = [\"*\"];\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {\n}\nconst _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortMixinBase {\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /** The sort direction of the currently active MatSortable. */\n    get direction() { return this._direction; }\n    set direction(direction) {\n        if (direction && direction !== 'asc' && direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear() { return this._disableClear; }\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        var _a, _b, _c;\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = function MatSort_Factory(t) { return new (t || MatSort)(ɵngcc0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8)); };\nMatSort.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSort, selectors: [[\"\", \"matSort\", \"\"]], hostAttrs: [1, \"mat-sort\"], inputs: { disabled: [\"matSortDisabled\", \"disabled\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"], active: [\"matSortActive\", \"active\"] }, outputs: { sortChange: \"matSortChange\" }, exportAs: [\"matSort\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatSort.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_SORT_DEFAULT_OPTIONS,] }] }\n];\nMatSort.propDecorators = {\n    active: [{ type: Input, args: ['matSortActive',] }],\n    start: [{ type: Input, args: ['matSortStart',] }],\n    direction: [{ type: Input, args: ['matSortDirection',] }],\n    disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n    sortChange: [{ type: Output, args: ['matSortChange',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSort, [{\n        type: Directive,\n        args: [{\n                selector: '[matSort]',\n                exportAs: 'matSort',\n                host: { 'class': 'mat-sort' },\n                inputs: ['disabled: matSortDisabled']\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_SORT_DEFAULT_OPTIONS]\n            }] }]; }, { start: [{\n            type: Input,\n            args: ['matSortStart']\n        }], sortChange: [{\n            type: Output,\n            args: ['matSortChange']\n        }], direction: [{\n            type: Input,\n            args: ['matSortDirection']\n        }], disableClear: [{\n            type: Input,\n            args: ['matSortDisableClear']\n        }], active: [{\n            type: Input,\n            args: ['matSortActive']\n        }] }); })();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         * @deprecated Not used anymore. To be removed.\n         * @breaking-change 8.0.0\n         */\n        this.sortButtonLabel = (id) => {\n            return `Change sorting for ${id}`;\n        };\n    }\n}\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) { return new (t || MatSortHeaderIntl)(); };\nMatSortHeaderIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {\n}\nconst _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderMixinBase {\n    constructor(_intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._handleStateChanges();\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() { return this._disableClear; }\n    set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription =\n            merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n                if (this._isSorted()) {\n                    this._updateArrowDirection();\n                    // Do not show the animation if the header was already shown in the right position.\n                    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                        this._disableViewStateAnimation = true;\n                    }\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                    this._showIndicatorHint = false;\n                }\n                // If this header was recently active and now no longer sorted, animate away the arrow.\n                if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = false;\n                    this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n                }\n                this._changeDetectorRef.markForCheck();\n            });\n    }\n}\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) { return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatSortHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSortHeader, selectors: [[\"\", \"mat-sort-header\", \"\"]], hostAttrs: [1, \"mat-sort-header\"], hostVars: 3, hostBindings: function MatSortHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() { return ctx._handleClick(); })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() { return ctx._setIndicatorHintVisible(true); })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() { return ctx._setIndicatorHintVisible(false); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    } }, inputs: { disabled: \"disabled\", arrowPosition: \"arrowPosition\", disableClear: \"disableClear\", id: [\"mat-sort-header\", \"id\"], start: \"start\" }, exportAs: [\"matSortHeader\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], attrs: _c0, ngContentSelectors: _c1, decls: 4, vars: 6, consts: [[\"role\", \"button\", 1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]], template: function MatSortHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    } }, directives: [ɵngcc2.NgIf], styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], encapsulation: 2, data: { animation: [\n            matSortAnimations.indicator,\n            matSortAnimations.leftPointer,\n            matSortAnimations.rightPointer,\n            matSortAnimations.arrowOpacity,\n            matSortAnimations.arrowPosition,\n            matSortAnimations.allowChildren,\n        ] }, changeDetection: 0 });\nMatSortHeader.ctorParameters = () => [\n    { type: MatSortHeaderIntl },\n    { type: ChangeDetectorRef },\n    { type: MatSort, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] },\n    { type: FocusMonitor },\n    { type: ElementRef }\n];\nMatSortHeader.propDecorators = {\n    id: [{ type: Input, args: ['mat-sort-header',] }],\n    arrowPosition: [{ type: Input }],\n    start: [{ type: Input }],\n    disableClear: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n        type: Component,\n        args: [{\n                selector: '[mat-sort-header]',\n                exportAs: 'matSortHeader',\n                template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     role=\\\"button\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-sort-header',\n                    '(click)': '_handleClick()',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(mouseenter)': '_setIndicatorHintVisible(true)',\n                    '(mouseleave)': '_setIndicatorHintVisible(false)',\n                    '[attr.aria-sort]': '_getAriaSortAttribute()',\n                    '[class.mat-sort-header-disabled]': '_isDisabled()'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled'],\n                animations: [\n                    matSortAnimations.indicator,\n                    matSortAnimations.leftPointer,\n                    matSortAnimations.rightPointer,\n                    matSortAnimations.arrowOpacity,\n                    matSortAnimations.arrowPosition,\n                    matSortAnimations.allowChildren,\n                ],\n                styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatSortHeaderIntl }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: ['MAT_SORT_HEADER_COLUMN_DEF']\n            }, {\n                type: Optional\n            }] }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }]; }, { arrowPosition: [{\n            type: Input\n        }], disableClear: [{\n            type: Input\n        }], id: [{\n            type: Input,\n            args: ['mat-sort-header']\n        }], start: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {\n}\nMatSortModule.ɵfac = function MatSortModule_Factory(t) { return new (t || MatSortModule)(); };\nMatSortModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSortModule });\nMatSortModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule, MatCommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSort, MatSortHeader],\n                declarations: [MatSort, MatSortHeader],\n                providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, { declarations: function () { return [MatSort, MatSortHeader]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSort, MatSortHeader]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n\n"]}