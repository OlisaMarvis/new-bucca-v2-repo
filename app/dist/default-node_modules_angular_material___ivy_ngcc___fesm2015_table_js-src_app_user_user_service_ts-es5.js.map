{"version":3,"mappings":"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;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACAC;;AACA,gCAA4BC,uBAA5B,EAAqDA,GAArD,EAAqD;AACrDD;AACA;AACA,eAZA,CAaA;;AAbA;AAAA;AAAA;AAAA;AAAA;;AAcA;AAAA,0DACAA,eADA;AAAA;;AAAA;AACA;AAAA;;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAIS,aAJT;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;;AACA;AAAA;AAAA,kBACAE;AAAA;AAAA,cADA,GACA;AACA;AACA;AAA8DC;AAA9D;;AACA;AAAiEA;AAAjE;AACA;;AACA;AACA;;AACA;AACA;;AACA;;AACA;;AACA;;AACA;AACA,+DAfA,CAgBA;;AACA;AACA;AACA;AACA;;AAHA,0DAIAJ,IAJA;AAAA;;AAAA;AAIA;AAAA;;AACA,kCAAgCE,YAAhC,EAA8CA,GAA9C,EAA8C;AAC9C;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;;AAeA;AACA;AACAE,kDACA,EADA,GAEAC,WACAC,KADA,CACA,CADA,EACAC,mBADA,EAEAC,GAFA,CAEA;AAAA;AAAA,mBAFA;AAHA;;AAOA;AACAJ,iDACA,EADA,GAEAC,WACAC,KADA,CACAG,cADA,EAEAD,GAFA,CAEA;AAAA;AAAA,mBAFA,EAGAE,OAHA;AAHA;AAQA;AACS,aAhCT;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA,aAJA,CAKA;AACA;AACA;;;AACA;AACA,+FATA,CAUA;;AACA;AACA;AACA;;AACA,qDAAiDC,sBAAjD,EAAyEA,UAAzE,EAAyE;AACzEC;;AACA;AACA;AACA;;AACA;AACAC,oEACAC,wBADA,GACA,KADA;AAEA;AACAC;AACAC;AACA;;AACA,4DA1BA,CA2BA;AACA;;AACA;AACA;;AACA,sCAAmCL,uBAAnC,EAA2DA,WAA3D,EAA2D;AAC3D;AACA;AACA;;AACA;AACA;;AAL2D,4DAM3DE,0BAN2D;AAAA;;AAAA;AAM3D;AAAA;;AACA;AACA;AAR2D;AAAA;AAAA;AAAA;AAAA;AAS3D;;AACA;AACA;AAAgHT,0CAAhH;AAAgHa;AAAhH;AACA,eAFA,MAGA;AACA;AAAgHb,0CAAhH;AAAgHa;AAAhH;AACA;AACS,aAlBT;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA,4DAJA,CAKA;;AACA;AACA;AAAA;AAAA;AACA;AACA,eAFA,MAGA;AACA;AACA;AACS,aAPT;AAQA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA,wDACAC,gBADA;AAAA;;AAAA;AACA;AAAA;AACAC;AACAA;AACA,eAJA,CAKA;AACA;AACA;AACA;;AARA;AAAA;AAAA;AAAA;AAAA;;AASA;AAAA;AAAA;;AACA;AACAA;AACA,aAFA,MAGA;AACA;AACAA;;AACA;AACAA;AACA;;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACAA;;AACA;AACAA;AACA;;AACAA,2CAAgCC,QAAhC;AACAD;;AACA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACAE,sBADA;AAEAC,wBAFA;AAGAC,qBAHA;AAIAC;AAJA;AAMA,2BAPA,CAQA;AACA;AACA;;AAVA,wDAWAC,kBAXA;AAAA;;AAAA;AAWA;AAAA;;AACA;AACAC;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;;AAgBA,sCAA2BA,MAA3B,IAAkC,EAAlC;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;;AACA,4BAAwBxB,wBAAxB,EAAkDA,GAAlD,EAAkD;AAClD;AACAG;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA,4BAAwBH,iBAAxB,EAA2CA,GAA3C,EAA2C;AAC3C;AACAyB;AACAC;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;;AACA,wCAAoC1B,KAApC,EAA2CA,GAA3C,EAA2C;AAC3C;AACAyB;AACAC;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA,aAFA,MAGA;AACAC;AACA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,+DAAmDC,EAAnD;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,4EAAgEnF,IAAhE;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA,uGAC8BoF,oBAD9B;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA,2EACA,oDADA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,6CAAwC1G,yDAAxC,CAAsD,SAAtD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;UACA2G,iBACA;AAAA;;AACA;AACA;AACA;;AAEAA;AAAyD,yCAAgC3G,gEAAyBA,2DAAzB,CAAhC,EAAmFA,gEAAyBA,qDAAzB,CAAnF;AAA6H,OAAtL;;AACA2G,yCAAmC3G,gEAAwB;AAAGO,4BAAH;AAAGC;AAAH,OAAxB,CAAnC;;AACAmG;AAAA,gBACA;AAAMpG,gBAAMP;AAAZ,SADA,EAEA;AAAMO,gBAAMP;AAAZ,SAFA;AAAA;;AAIA;AAAe,2DAAmDA,gEAAwB2G,cAAxB,EAAwB;AAC1FpG,gBAAcP,oDAD4E;AAE1FG;AAAiBM;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAUF,kBAAMP;AAAhB,aAAyC;AAAIO,kBAAMP;AAAV,WAAzC;AAA0E,SAH9B,EAG8B,IAH9B,CAAnD;AAG2F,OAH1G;AAIA;AACA;AACA;AACA;;;UACA4G,mBACA;AAAA;;AACA;AACA;AACA;;AAEAA;AAA6D,2CAAkC5G,gEAAyBA,2DAAzB,CAAlC,EAAqFA,gEAAyBA,qDAAzB,CAArF;AAA+H,OAA5L;;AACA4G,2CAAqC5G,gEAAwB;AAAGO,8BAAH;AAAGC;AAAH,OAAxB,CAArC;;AACAoG;AAAA,gBACA;AAAMrG,gBAAMP;AAAZ,SADA,EAEA;AAAMO,gBAAMP;AAAZ,SAFA;AAAA;;AAIA;AAAe,2DAAmDA,gEAAwB4G,gBAAxB,EAAwB;AAC1FrG,gBAAcP,oDAD4E;AAE1FG;AAAiBM;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAUF,kBAAMP;AAAhB,aAAyC;AAAIO,kBAAMP;AAAV,WAAzC;AAA0E,SAH9B,EAG8B,IAH9B,CAAnD;AAG2F,OAH1G;AAIA;AACA;AACA;AACA;;;UACA6G,mBACA;AAAA;;AACA;AACA;AACA;;AAEAA;AAA6D,2CAAkC7G,gEAAyBA,2DAAzB,CAAlC,EAAqFA,gEAAyBA,qDAAzB,CAArF;AAA+H,OAA5L;;AACA6G,2CAAqC7G,gEAAwB;AAAGO,8BAAH;AAAGC;AAAH,OAAxB,CAArC;;AACAqG;AAAA,gBACA;AAAMtG,gBAAMP;AAAZ,SADA,EAEA;AAAMO,gBAAMP;AAAZ,SAFA;AAAA;;AAIA;AAAe,2DAAmDA,gEAAwB6G,gBAAxB,EAAwB;AAC1FtG,gBAAcP,oDAD4E;AAE1FG;AAAiBM;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAUF,kBAAMP;AAAhB,aAAyC;AAAIO,kBAAMP;AAAV,WAAzC;AAA0E,SAH9B,EAG8B,IAH9B,CAAnD;AAG2F,OAH1G;AAIA;AACA;AACA;AACA;AACA;;;UACA8G,mBACA;AAAA;;AACA;AACA;AACA;;AAEAA;AAA6D,2CAAkC9G,gEAAyBA,2DAAzB,CAAlC,EAAqFA,gEAAyBA,qDAAzB,CAArF;AAA+H,OAA5L;;AACA8G,2CAAqC9G,gEAAwB;AAAGO,8BAAH;AAAGC;AAAH,OAAxB,CAArC;;AACAsG;AAAA,gBACA;AAAMvG,gBAAMP;AAAZ,SADA,EAEA;AAAMO,gBAAMP;AAAZ,SAFA;AAAA;;AAIA;AAAe,2DAAmDA,gEAAwB8G,gBAAxB,EAAwB;AAC1FvG,gBAAcP,oDAD4E;AAE1FG;AAAiBM;AAAjB;AAF0F,UAAxB,EAG7D;AAAiB;AAAUF,kBAAMP;AAAhB,aAAyC;AAAIO,kBAAMP;AAAV,WAAzC;AAA0E,SAH9B,EAG8B,IAH9B,CAAnD;AAG2F,OAH1G;AAIA;AACA;AACA;AACA;AACA;;;AACA,gCACA;AACA;AAFA;AAWA;AACA;AACA;AACA;;UACA+G;;;;;;;;;;;;QAAyB/G;AAEzB;AACA;AACA;AACA;AACA;AACA;;;UACAgH;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,qBANA,EAMAxC,wBANA,EAMAyC,0BANA,EAOA;AACA;AACA;AACAC,sBAVA,EAUA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gCAA8BxE,yCAA9B;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,oCA3FA,CA4FA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gCAA8ByE,iDAA9B,CAA6C;AAAGC,oBAAH;AAAGC;AAAH,WAA7C;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;eACA;AACA;AACA;eACA;AACA;AACAC,8EAAqEb,kBAArE;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;eACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;eACA;AACA,0CAAsC,8EAAqBtG,CAArB,CAAtC,CADA,CAEA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;eACA;AACA,gCAA4B,8EAAqBA,CAArB,CAA5B,CADA,CAEA;;AACA;AACA;AACA;;;iBACA;AAAA;;AACA;;AACA;AACA;AACA,aAJA,CAKA;AACA;AACA;;;AACA;AACA;AACS,aAFT,EARA,CAWA;AACA;AACA;;AACA;AACA,gDAA8C,2DAAS,eAAT,CAA9C,EAAuDwC,SAAvD,CAAuD;AACvD;AACa,eAFb;AAGA;AACA;;;iBACA;AACA;AACA;;AACA,oCAHA,CAIA;;;AACA,wGACA,6CADA,GACA;AACA;AACA,aARA,CASA;;;AACA;;AACA,0GAXA,CAYA;;AACA;AACA,8DAdA,CAeA;;AACA;AACA;;AACA;AACA,aAnBA,CAoBA;;;AACA;AACA;;AACA;AACA,aAxBA,CAyBA;AACA;;;AACA;AACA;AACA,aAFA,MAGA;AACA;AACA;AACA;AACA;;AACA;AACA;;;iBACA;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA,gBAAY,wEAAY,eAAZ,CAAZ,EAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;;AACA;AACA;;AACA;AACA;;AACA,8DAPA,CAQA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACa,eAJb;AAKA,aANA,MAOA;AACA4D;AACA;AACA;AACA;AACA;AAAsCgB;AAAtC;;AACA;AACA,iBALA,MAMA;AACAC;AACA,iBAFA,MAGA;AACA;AACAA;AACA;AACa,eAdb;AAeA,aAjCA,CAkCA;;;AACA,0CAnCA,CAoCA;AACA;;;AACAjB;AACA;AACAkB;AACS,aAHT;;AAIA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,8DAFA,CAGA;AACA;AACA;;AACA;;AACA;AACAC;AACA;;AACA;AAAA;AAAA;;AACA;;AACA,0EAZA,CAaA;;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,8DAFA,CAGA;AACA;AACA;;AACA;;AACA;AACAC;AACA;;AACA;AAAA;AAAA;;AACA;;AACA;;AACA,yGAbA,CAcA;;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;;AACA,0EAHA,CAIA;AACA;AACA;AACA;;;AACA,iEACA,iCADA,EACA;AACA;AACA;AACA;;AACA;AACA,aAdA,CAeA;;;AACAC;AACA;AACS,aAFT,EAhBA,CAmBA;;AACA;AACA;AACA;;AACA,8BAA4BhD,mBAA5B,EAAiDA,GAAjD,EAAiD;AACjD;AACAF;AACA;AACA;;AACA;AACS,aATT,EApBA,CA8BA;;;AACAmD;AACA;AACS,aAFT,EA/BA,CAkCA;;AACArC;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA,gCADA,CAEA;AACA;;AACA;AACA,kDALA,CAMA;AACA;;AACA,4BAAwBZ,qBAAxB,EAA+CA,GAA/C,EAA+C;AAC/C;;AACA;;AACA;AACA;AACA;;AACA,8BAA4BkD,4BAA5B,EAA0DA,GAA1D,EAA0D;AAC1D;;AACA;;AACA;AACAC;AACA,iBAFA,MAGA;AACAA;AACA;;AACAC;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;;AACA;AACA;AACAC;AACA;AACA,eAJA,MAKA;AACA;AAAyBC,4BAAzB;AAAyBC,gCAAzB;AAAyBC;AAAzB;AACA;AACS,aAVT;AAWA;AACA;;;;iBACA;AAAA;;AACA;;AACA;AACAC;AACA,oEACA,6CADA,GACA;AACA;AACA;;AACA;AACS,aANT;AAOA;AACA;;;;iBACA;AACA;AACA;AACA,0GAHA,CAIA;;AACA;AAAA;AAAA;;AACA,6EACA,6CADA,GACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AAAA;AAAA,cADA,CAEA;;;AACA;;AACA;AACA;AACA,aANA,CAOA;;;AACA;;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,gBAAY,wEAAY,eAAZ,CAAZ,EAAwB;AACxB;AACA,aAJA,CAKA;;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;;AACA;;AACA,gBAAY,wEAAY,eAAZ,CAAZ,EAAwB;AACxBC;AACA,aAFA,MAGA,IAAiB,oDAAY,eAAZ,CAAjB,EAA6B;AAC7BA;AACA,aAFA,MAGA;AACAA,2BAAyB,0CAAE,eAAF,CAAzB;AACA;;AACA;AACA;AACA;;AACA,6DAAyD,2DAAS,eAAT,CAAzD,EACA3F,SADA,CACA;AACA;;AACA;AACS,aAJT;AAKA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACS,aANT;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,4BAAwBiC,kCAAxB,EAA4DA,GAA5D,EAA4D;AAC5D;AACA2D;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;AACAC;AAAA;AAAA;AACA,aAFA,MAGA;AACA;AAAA;AAAA;;AACA;AACAA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;;iBACA;AACA;AACA;AAA0BjB;AAA1B;AACA;AACAkB,0CADA;AAEAC,8BAFA;AAGAC;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;;;;iBACA,2CAAkD;AAAA,gBAAlDD,OAAkD,uEAAlD,EAAkD;AAClD;AACA;;AACA;;AACA;AACA;;;iBACA;AAAA,yDACA,8BADA;AAAA;;AAAA;AACA;AAAA;;AACA;AACA9E;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA,oEAAgEgF,mBAAhE,EAAqFA,aAArF,EAAqF;AACrF;AACA;AACAF;AACAA;AACAA;AACAA;AACAA;;AACA;AACAA;AACAA;AACA,eAHA,MAIA;AACAA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACS,aANT;AAOA;AACA;;;;iBACA;AACA;;AACA,4BACA;AAAcG,0BAAd;AAAcC;AAAd,aADA,EAEA;AAAcD,0BAAd;AAAcC;AAAd,aAFA,EAGA;AAAcD,0BAAd;AAAcC;AAAd,aAHA;;AAKA;AAAA;;AACA;;AACAjD;;AAFA,2DAGAkD,eAHA;AAAA;;AAAA;AAGA;AAAA;AACAlD;AACA;AALA;AAAA;AAAA;AAAA;AAAA;;AAMAmD;AACA,aAdA,CAeA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iB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AACA;AACA;AACAC;AACA,iBAFA,MAGA;AACAA;AACA;AACA,eARA,MASA;AACAA;AACA,eAFA,MAGA;AACAA;AACA;;AACA;AACa,aArCb;AAsCA,WA5CA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa,aARb,EAQa,EARb,EAQaC,WARb,GAFA,CAWA;;AACA;AACA;AACA,WAdA;;AAeA,8BAAyBN,iDAAzB,CAAwCO,WAAxC;;AACA;;AAhHA;AAiHA;AACA;;;;;eACA;AAAiB;AAAA;eACjB;AACA,kCADA,CAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAmB;AAAA;eACnB;AACA,sCADA,CAEA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAiB;AAAA;eACjB;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;eACA;AAAsB;AAAA;eACtB;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA,mBADA,CAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,0CACY,6CAAK,qBAAL,EAAK,sBAAL,CADZ,GAEY,0CAAE,IAAF,CAFZ;AAGA,+CACY,6CAAK,oBAAL,EAAK,yBAAL,EAAK,2BAAL,CADZ,GAEY,0CAAE,IAAF,CAFZ;AAGA,wCAdA,CAeA;;AACA,+BAA6B,qDAAa,0BAAb,EAC7B7E,IAD6B,CACX,sDAAG;AAAA;AAAA;;AAAA;AAAA,aAAH,CADW,CAA7B,CAhBA,CAkBA;;AACA,8BAA4B,qDAAa,0BAAb,EAC5BA,IAD4B,CACV,sDAAG;AAAA;AAAA;;AAAA;AAAA,aAAH,CADU,CAA5B,CAnBA,CAqBA;;AACA,gCAA8B,qDAAa,yBAAb,EAC9BA,IAD8B,CACZ,sDAAG;AAAA;AAAA;;AAAA;AAAA,aAAH,CADY,CAA9B,CAtBA,CAwBA;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;AACA;AACA;AACA,mFACAf;AAAA;AAAA,cADA;;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AACApF;AACA;;AACA;AACA;AACA;;AACAiL,oDALA,CAMA;;AACA;AACA;AACA;;AACA;AACAA,qDADA,CAEA;AACA;;AACA;AACA;AACA;AACS,aAjBT;AAkBA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;AACA;;;;QArRkC9B;AAuRlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;UACA+B;;;;;;;;;;;;QAAAV;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC/wBaW;AAwBX,8BACUC,IADV,EAEUC,MAFV,EAGUC,mBAHV,EAIUC,YAJV,EAIoC;AAAA;;AAH1B;AACA;AACA;AACA;AA3BF,wBAASC,sEAAT;AACA,6BAAiC,IAAIC,4EAAJ,EAAjC;AACA,kCAAmB,IAAIhB,yCAAJ,EAAnB;AACA,4BAAgC,IAAIgB,4EAAJ,EAAhC;AACA,iCAAkB,IAAIhB,yCAAJ,EAAlB;AACA,kCAAsC,IAAIgB,4EAAJ,EAAtC;AACA,sCAAuB,IAAIhB,yCAAJ,EAAvB;AACA,gCAAoC,IAAIgB,4EAAJ,EAApC;AACA,oCAAqB,IAAIhB,yCAAJ,EAArB;AACA,wBAA4B,IAAIgB,4EAAJ,EAA5B;AACA,gCAAiB,IAAIhB,yCAAJ,EAAjB;AACA,2CAA4B,IAAIA,yCAAJ,EAA5B;AACA,6BAAiC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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_0__","ctx_r0","ctx_r1","args","v","CdkCellDef","template","type","selectors","selector","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDefBase","CdkColumnDef","_CdkColumnDefBase","CDK_TABLE","contentQueries","dirIndex","_t","ctx","inputs","sticky","name","stickyEnd","features","provide","useExisting","decorators","cell","headerCell","footerCell","providers","BaseCdkCell","columnDef","classList","CdkHeaderCell","elementRef","hostAttrs","host","CdkFooterCell","CdkCell","_Schedule","_CoalescedStyleScheduler","rxjs__WEBPACK_IMPORTED_MODULE_3__","subscribe","schedule","task","Promise","token","factory","BaseRowDef","_differs","CdkHeaderRowDefBase","CdkHeaderRowDef","_CdkHeaderRowDefBase","columns","CdkFooterRowDefBase","CdkFooterRowDef","_CdkFooterRowDefBase","CdkRowDef","when","CdkCellOutlet","CdkHeaderRow","decls","vars","consts","directives","encapsulation","changeDetection","CdkFooterRow","CdkRow","CdkNoDataRow","StickyStyler","_coalescedStyleScheduler","_stickCellCss","rows","elementsToClear","i","stickyEndStates","sizes","cellWidths","slice","lastStickyStart","map","firstStickyEnd","reverse","rowIndex","stickyOffsets","elementsToStick","Array","stickyOffset","stickyCellHeights","elements","stickyDirections","element","dirValue","top","bottom","left","right","STICKY_DIRECTIONS","zIndex","positions","nextPosition","changes","id","JSON","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","RowViewRef","CdkTable","_viewRepeater","_stickyPositioningListener","_viewportRuler","rxjs__WEBPACK_IMPORTED_MODULE_7__","start","end","console","$implicit","viewContainer","rowView","thead","tfoot","headerRows","footerRows","j","cache","renderRows","dataRow","data","rowDef","dataIndex","columnDefs","dataStream","renderedRows","rowDefs","templateRef","context","index","renderIndex","tag","outlets","section","documentFragment","pipe","shouldShow","_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__","_angular_common__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__","_COALESCED_STYLE_SCHEDULER","STICKY_POSITIONING_LISTENER","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__","viewQuery","hostVars","hostBindings","trackBy","dataSource","multiTemplateDataRows","fixedLayout","exportAs","useClass","useValue","ngContentSelectors","_c0","styles","_rowOutlet","_headerRowOutlet","_footerRowOutlet","_noDataRowOutlet","_contentColumnDefs","descendants","_contentRowDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_noDataRow","CdkTextColumn","_table","_options","TEXT_COLUMN_OPTIONS","justify","headerText","dataAccessor","CdkTextColumn_th_1_Template","CdkTextColumn_td_2_Template","CdkTableModule","imports","exports","declarations","MatTable","_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__","t","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__","MatCellDef","MatHeaderCellDef","MatFooterCellDef","MatColumnDef","MatHeaderCell","MatFooterCell","MatCell","MatHeaderRowDef","MatFooterRowDef","MatRowDef","MatHeaderRow","MatFooterRow","MatRow","MatNoDataRow","MatTextColumn","MatTextColumn_th_1_Template","MatTextColumn_td_2_Template","MatTableModule","_angular_material_core__WEBPACK_IMPORTED_MODULE_3__","EXPORTED_DECLARATIONS","_MatTableDataSource","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","value","valueA","valueB","comparatorResult","toLowerCase","initialData","paginator","MatTableDataSource","UserService","http","router","notificationService","errorService","_environments_environment__WEBPACK_IMPORTED_MODULE_0__","_shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__","isLoadingListener","asObservable","pageSize","pageIndex","query","get","apiUrl","res","companyList","companysListener","next","Object","err","formData","post","response","success","navigate","log","errorMessage","error","message","details","danger","handleError","deviceList","devicesListener","device","patch","dialogRef","close","device_code","device_id","is_active","company","location","employees","staffsCreateErrorListener","user","user_email","email","phone_number","status","deactivatingListener","companyAdminList","companyAdminListener","accountantList","accountantListener","staffs","staffsListener","staffLevels","staffLevelsListener","departments","departmentsListener","vendors","vendorsListener","vendorStaffs","vendorStaffsListener","warning","_angular_core__WEBPACK_IMPORTED_MODULE_6__","providedIn"],"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/table.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/table.js","webpack:///src/app/user/user.service.ts"],"sourcesContent":["import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { isDataSource, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/scrolling';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction CdkTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction CdkTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, Inject, Optional, Input, ContentChild, ElementRef, Injectable, NgZone, IterableDiffers, ViewContainerRef, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, ChangeDetectorRef, Attribute, SkipSelf, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() { return this._sticky; }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) { return new (t || CdkColumnDef)(ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky'],\n                providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        // If IE 11 is dropped before we switch to setting a single class name, change to multi param\n        // with destructuring.\n        const classList = elementRef.nativeElement.classList;\n        for (const className of columnDef._columnCssClassName) {\n            classList.add(className);\n        }\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable ?\n            from(Promise.resolve(undefined)) :\n            this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) { return new (t || _CoalescedStyleScheduler)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n_CoalescedStyleScheduler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: _CoalescedStyleScheduler, factory: _CoalescedStyleScheduler.ɵfac });\n_CoalescedStyleScheduler.ctorParameters = () => [\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_CoalescedStyleScheduler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { return new (t || BaseRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nBaseRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRowDef, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CDK_TABLE, 8)); };\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TABLE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TABLE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) { return new (t || CdkNoDataRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkNoDataRow, selectors: [[\"ng-template\", \"cdkNoDataRow\", \"\"]] });\nCdkNoDataRow.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkNoDataRow]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, \n    /**\n     * @deprecated `_coalescedStyleScheduler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length || !this._isBrowser || !(stickyStartStates.some(state => state) ||\n            stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => stickyStartStates[index] ? width : null)\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1 ?\n                        [] :\n                        cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => stickyEndStates[index + firstStickyEnd] ? width : null)\n                            .reverse()\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            stickyOffsets[rowIndex] = stickyOffset;\n            if (!states[rowIndex]) {\n                continue;\n            }\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable ?\n                Array.from(row.children) : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({ sizes: stickyCellHeights, elements: elementsToStick });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._scheduleStyleChanges(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Schedules styles to be applied when the style scheduler deems appropriate.\n     * @breaking-change 11.0.0 This method can be removed in favor of calling\n     * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.\n     */\n    _scheduleStyleChanges(changes) {\n        if (this._coalescedStyleScheduler) {\n            this._coalescedStyleScheduler.schedule(changes);\n        }\n        else {\n            changes();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) { return new (t || NoDataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNoDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NoDataRowOutlet, selectors: [[\"\", \"noDataRowOutlet\", \"\"]] });\nNoDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoDataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[noDataRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, \n    /**\n     * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`\n     *    parameters to become required.\n     * @breaking-change 11.0.0\n     */\n    _viewRepeater, _coalescedStyleScheduler, _stickyPositioningListener, \n    // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,\n    // this property will never be null.\n    // tslint:disable-next-line: lightweight-tokens\n    _viewportRuler) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._viewportRuler = _viewportRuler;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        // Table cell dimensions may change after resizing the window. Signal the sticky styler to\n        // refresh its cache of cell widths the next time sticky styles are updated.\n        // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.\n        if (this._viewportRuler) {\n            this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n                this._forceRecalculateCellWidths = true;\n            });\n        }\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._noDataRowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the\n        // `else` clause once `_viewRepeater` is turned into a required parameter.\n        if (this._viewRepeater) {\n            this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), (record) => record.item.data, (change) => {\n                if (change.operation === 1 /* INSERTED */ && change.context) {\n                    this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n                }\n            });\n        }\n        else {\n            changes.forEachOperation((record, prevIndex, currentIndex) => {\n                if (record.previousIndex == null) {\n                    const renderRow = record.item;\n                    const rowDef = renderRow.rowDef;\n                    const context = { $implicit: renderRow.data };\n                    this._renderRow(this._rowOutlet, rowDef, currentIndex, context);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(prevIndex);\n                }\n                else {\n                    const view = viewContainer.get(prevIndex);\n                    viewContainer.move(view, currentIndex);\n                }\n            });\n        }\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        this.updateStickyColumnStyles();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout)\n            || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (noDataRow) {\n            const shouldShow = this._rowOutlet.viewContainer.length === 0;\n            if (shouldShow !== this._isShowingNoDataRow) {\n                const container = this._noDataRowOutlet.viewContainer;\n                shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();\n                this._isShowingNoDataRow = shouldShow;\n            }\n        }\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform), ɵngcc0.ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(_COALESCED_STYLE_SCHEDULER, 8), ɵngcc0.ɵɵdirectiveInject(STICKY_POSITIONING_LISTENER, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ViewportRuler, 8)); };\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkNoDataRow, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRow = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 7);\n        ɵngcc0.ɵɵviewQuery(NoDataRowOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._noDataRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], hostVars: 2, hostBindings: function CdkTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-table-fixed-layout\", ctx.fixedLayout);\n    } }, inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, exportAs: [\"cdkTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ])], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [_VIEW_REPEATER_STRATEGY,] }] },\n    { type: _CoalescedStyleScheduler, decorators: [{ type: Optional }, { type: Inject, args: [_COALESCED_STYLE_SCHEDULER,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [STICKY_POSITIONING_LISTENER,] }] },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    fixedLayout: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n    _noDataRowOutlet: [{ type: ViewChild, args: [NoDataRowOutlet, { static: true },] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef, { descendants: true },] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef, { descendants: true },] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef, {\n                    descendants: true\n                },] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef, {\n                    descendants: true\n                },] }],\n    _noDataRow: [{ type: ContentChild, args: [CdkNoDataRow,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table',\n                    '[class.cdk-table-fixed-layout]': 'fixedLayout'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [\n                    { provide: CDK_TABLE, useExisting: CdkTable },\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                    // Prevent nested tables from seeing this table's StickyPositioningListener.\n                    { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                ],\n                styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [_VIEW_REPEATER_STRATEGY]\n            }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [_COALESCED_STYLE_SCHEDULER]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [STICKY_POSITIONING_LISTENER]\n            }] }, { type: ɵngcc3.ViewportRuler, decorators: [{\n                type: Optional\n            }] }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], fixedLayout: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet, { static: true }]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet, { static: true }]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet, { static: true }]\n        }], _noDataRowOutlet: [{\n            type: ViewChild,\n            args: [NoDataRowOutlet, { static: true }]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef, { descendants: true }]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef, { descendants: true }]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef, {\n                    descendants: true\n                }]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef, {\n                    descendants: true\n                }]\n        }], _noDataRow: [{\n            type: ContentChild,\n            args: [CdkNoDataRow]\n        }] }); })();\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) { return new (t || CdkTextColumn)(ɵngcc0.ɵɵdirectiveInject(CdkTable, 8), ɵngcc0.ɵɵdirectiveInject(TEXT_COLUMN_OPTIONS, 8)); };\nCdkTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTextColumn, selectors: [[\"cdk-text-column\"]], viewQuery: function CdkTextColumn_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(CdkColumnDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkCellDef, 7);\n        ɵngcc0.ɵɵviewQuery(CdkHeaderCellDef, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnDef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n    } }, inputs: { justify: \"justify\", name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\" }, decls: 3, vars: 0, consts: [[\"cdkColumnDef\", \"\"], [\"cdk-header-cell\", \"\", 3, \"text-align\", 4, \"cdkHeaderCellDef\"], [\"cdk-cell\", \"\", 3, \"text-align\", 4, \"cdkCellDef\"], [\"cdk-header-cell\", \"\"], [\"cdk-cell\", \"\"]], template: function CdkTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, CdkTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, CdkTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [CdkColumnDef, CdkHeaderCellDef, CdkCellDef, CdkHeaderCell, CdkCell], encapsulation: 2 });\nCdkTextColumn.ctorParameters = () => [\n    { type: CdkTable, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n];\nCdkTextColumn.propDecorators = {\n    name: [{ type: Input }],\n    headerText: [{ type: Input }],\n    dataAccessor: [{ type: Input }],\n    justify: [{ type: Input }],\n    columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n    cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n    headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-text-column',\n                template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: CdkTable, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [TEXT_COLUMN_OPTIONS]\n            }] }]; }, { justify: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], headerText: [{\n            type: Input\n        }], dataAccessor: [{\n            type: Input\n        }], columnDef: [{\n            type: ViewChild,\n            args: [CdkColumnDef, { static: true }]\n        }], cell: [{\n            type: ViewChild,\n            args: [CdkCellDef, { static: true }]\n        }], headerCell: [{\n            type: ViewChild,\n            args: [CdkHeaderCellDef, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[ScrollingModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                imports: [ScrollingModule]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; }, imports: function () { return [ScrollingModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CdkNoDataRow, NoDataRowOutlet]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Input, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE_TEMPLATE, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/table';\n\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction MatTextColumn_th_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n} }\nfunction MatTextColumn_td_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n} }\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n}\nMatTable.ɵfac = /*@__PURE__*/ function () { let ɵMatTable_BaseFactory; return function MatTable_Factory(t) { return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTable)))(t || MatTable); }; }();\nMatTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTable, selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]], hostAttrs: [1, \"mat-table\"], hostVars: 2, hostBindings: function MatTable_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n    } }, exportAs: [\"matTable\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function MatTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c0);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵelementContainer(2, 0);\n        ɵngcc0.ɵɵelementContainer(3, 1);\n        ɵngcc0.ɵɵelementContainer(4, 2);\n        ɵngcc0.ɵɵelementContainer(5, 3);\n    } }, directives: [ɵngcc1.HeaderRowOutlet, ɵngcc1.DataRowOutlet, ɵngcc1.NoDataRowOutlet, ɵngcc1.FooterRowOutlet], styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTable, [{\n        type: Component,\n        args: [{\n                selector: 'mat-table, table[mat-table]',\n                exportAs: 'matTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'mat-table',\n                    '[class.mat-table-fixed-layout]': 'fixedLayout'\n                },\n                providers: [\n                    // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                    //  is only included in the build if used.\n                    { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                    { provide: CdkTable, useExisting: MatTable },\n                    { provide: CDK_TABLE, useExisting: MatTable },\n                    { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                ],\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\\\"\\\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.ɵfac = /*@__PURE__*/ function () { let ɵMatCellDef_BaseFactory; return function MatCellDef_Factory(t) { return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCellDef)))(t || MatCellDef); }; }();\nMatCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCellDef, selectors: [[\"\", \"matCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkCellDef, useExisting: MatCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matCellDef]',\n                providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderCellDef_BaseFactory; return function MatHeaderCellDef_Factory(t) { return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCellDef)))(t || MatHeaderCellDef); }; }();\nMatHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatHeaderCellDef, selectors: [[\"\", \"matHeaderCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matHeaderCellDef]',\n                providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterCellDef_BaseFactory; return function MatFooterCellDef_Factory(t) { return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCellDef)))(t || MatFooterCellDef); }; }();\nMatFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatFooterCellDef, selectors: [[\"\", \"matFooterCellDef\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterCellDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matFooterCellDef]',\n                providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n            }]\n    }], null, null); })();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() { return this._name; }\n    set name(name) { this._setNameInput(name); }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n}\nMatColumnDef.ɵfac = /*@__PURE__*/ function () { let ɵMatColumnDef_BaseFactory; return function MatColumnDef_Factory(t) { return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatColumnDef)))(t || MatColumnDef); }; }();\nMatColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatColumnDef, selectors: [[\"\", \"matColumnDef\", \"\"]], inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['matColumnDef',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matColumnDef]',\n                inputs: ['sticky'],\n                providers: [\n                    { provide: CdkColumnDef, useExisting: MatColumnDef },\n                    { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                ]\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['matColumnDef']\n        }] }); })();\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n}\nMatHeaderCell.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderCell_BaseFactory; return function MatHeaderCell_Factory(t) { return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderCell)))(t || MatHeaderCell); }; }();\nMatHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatHeaderCell, selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-header-cell, th[mat-header-cell]',\n                host: {\n                    'class': 'mat-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], null, null); })();\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n}\nMatFooterCell.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterCell_BaseFactory; return function MatFooterCell_Factory(t) { return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterCell)))(t || MatFooterCell); }; }();\nMatFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatFooterCell, selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-footer-cell, td[mat-footer-cell]',\n                host: {\n                    'class': 'mat-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], null, null); })();\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n}\nMatCell.ɵfac = /*@__PURE__*/ function () { let ɵMatCell_BaseFactory; return function MatCell_Factory(t) { return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCell)))(t || MatCell); }; }();\nMatCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCell, selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCell, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-cell, td[mat-cell]',\n                host: {\n                    'class': 'mat-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderRowDef_BaseFactory; return function MatHeaderRowDef_Factory(t) { return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRowDef)))(t || MatHeaderRowDef); }; }();\nMatHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatHeaderRowDef, selectors: [[\"\", \"matHeaderRowDef\", \"\"]], inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matHeaderRowDef]',\n                providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n            }]\n    }], null, null); })();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterRowDef_BaseFactory; return function MatFooterRowDef_Factory(t) { return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRowDef)))(t || MatFooterRowDef); }; }();\nMatFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatFooterRowDef, selectors: [[\"\", \"matFooterRowDef\", \"\"]], inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matFooterRowDef]',\n                providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n            }]\n    }], null, null); })();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.ɵfac = /*@__PURE__*/ function () { let ɵMatRowDef_BaseFactory; return function MatRowDef_Factory(t) { return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRowDef)))(t || MatRowDef); }; }();\nMatRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRowDef, selectors: [[\"\", \"matRowDef\", \"\"]], inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRowDef, useExisting: MatRowDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matRowDef]',\n                providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n            }]\n    }], null, null); })();\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.ɵfac = /*@__PURE__*/ function () { let ɵMatHeaderRow_BaseFactory; return function MatHeaderRow_Factory(t) { return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHeaderRow)))(t || MatHeaderRow); }; }();\nMatHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatHeaderRow, selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"], exportAs: [\"matHeaderRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHeaderRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-header-row, tr[mat-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-header-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matHeaderRow',\n                providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }]\n            }]\n    }], null, null); })();\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.ɵfac = /*@__PURE__*/ function () { let ɵMatFooterRow_BaseFactory; return function MatFooterRow_Factory(t) { return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatFooterRow)))(t || MatFooterRow); }; }();\nMatFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatFooterRow, selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"], exportAs: [\"matFooterRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkFooterRow, useExisting: MatFooterRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatFooterRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-footer-row, tr[mat-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-footer-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matFooterRow',\n                providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }]\n            }]\n    }], null, null); })();\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n}\nMatRow.ɵfac = /*@__PURE__*/ function () { let ɵMatRow_BaseFactory; return function MatRow_Factory(t) { return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRow)))(t || MatRow); }; }();\nMatRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRow, selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"mat-row\"], exportAs: [\"matRow\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkRow, useExisting: MatRow }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function MatRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [ɵngcc1.CdkCellOutlet], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRow, [{\n        type: Component,\n        args: [{\n                selector: 'mat-row, tr[mat-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'mat-row',\n                    'role': 'row'\n                },\n                // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRow',\n                providers: [{ provide: CdkRow, useExisting: MatRow }]\n            }]\n    }], null, null); })();\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n}\nMatNoDataRow.ɵfac = /*@__PURE__*/ function () { let ɵMatNoDataRow_BaseFactory; return function MatNoDataRow_Factory(t) { return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatNoDataRow)))(t || MatNoDataRow); }; }();\nMatNoDataRow.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNoDataRow, selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkNoDataRow, useExisting: MatNoDataRow }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNoDataRow, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matNoDataRow]',\n                providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.ɵfac = /*@__PURE__*/ function () { let ɵMatTextColumn_BaseFactory; return function MatTextColumn_Factory(t) { return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextColumn)))(t || MatTextColumn); }; }();\nMatTextColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTextColumn, selectors: [[\"mat-text-column\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 0, consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]], template: function MatTextColumn_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, MatTextColumn_th_1_Template, 2, 3, \"th\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatTextColumn_td_2_Template, 2, 3, \"td\", 2);\n        ɵngcc0.ɵɵelementContainerEnd();\n    } }, directives: [MatColumnDef, MatHeaderCellDef, MatCellDef, MatHeaderCell, MatCell], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTextColumn, [{\n        type: Component,\n        args: [{\n                selector: 'mat-text-column',\n                template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                encapsulation: ViewEncapsulation.None,\n                // Change detection is intentionally not set to OnPush. This component's template will be provided\n                // to the table to be inserted into its view. This is problematic when change detection runs since\n                // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                // mean's the template in the table's view will not have the updated value (and in fact will cause\n                // an ExpressionChangedAfterItHasBeenCheckedError).\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.ɵfac = function MatTableModule_Factory(t) { return new (t || MatTableModule)(); };\nMatTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTableModule });\nMatTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            CdkTableModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CdkTableModule,\n                    MatCommonModule,\n                ],\n                exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTableModule, { declarations: function () { return [MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn]; }, imports: function () { return [CdkTableModule,\n        MatCommonModule]; }, exports: function () { return [MatCommonModule, MatTable, MatHeaderCellDef, MatHeaderRowDef, MatColumnDef, MatCellDef, MatRowDef, MatFooterCellDef, MatFooterRowDef, MatHeaderCell, MatCell, MatFooterCell, MatHeaderRow, MatRow, MatFooterRow, MatNoDataRow, MatTextColumn]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data).reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() { return this._data.value; }\n    set data(data) {\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() { return this._filter.value; }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() { return this._sort; }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() { return this._paginator; }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        var _a;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort ?\n            merge(this._sort.sortChange, this._sort.initialized) :\n            of(null);\n        const pageChange = this._paginator ?\n            merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized) :\n            of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter])\n            .pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange])\n            .pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange])\n            .pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData = (this.filter == null || this.filter === '') ? data :\n            data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        var _a;\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n\n","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { MatDialogRef } from \"@angular/material/dialog\";\nimport { Router } from \"@angular/router\";\nimport { Subject } from \"rxjs\";\nimport { shareReplay } from \"rxjs/operators\";\nimport { NotificationService } from \"src/app/shared/services/notification.service\";\nimport { environment } from \"../../environments/environment\";\nimport { PaginatedResponse } from \"../shared/models/response.model\";\nimport { ErrorService } from \"../shared/services/error.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UserService {\n  private apiUrl = environment.url;\n  private companyList: PaginatedResponse = new PaginatedResponse();\n  private companysListener = new Subject<PaginatedResponse>();\n  private deviceList: PaginatedResponse = new PaginatedResponse();\n  private devicesListener = new Subject<PaginatedResponse>();\n  private companyAdminList: PaginatedResponse = new PaginatedResponse();\n  private companyAdminListener = new Subject<PaginatedResponse>();\n  private accountantList: PaginatedResponse = new PaginatedResponse();\n  private accountantListener = new Subject<PaginatedResponse>();\n  private staffs: PaginatedResponse = new PaginatedResponse();\n  private staffsListener = new Subject<PaginatedResponse>();\n  private staffsCreateErrorListener = new Subject<any[]>();\n  private staffLevels: PaginatedResponse = new PaginatedResponse();\n  private staffLevelsListener = new Subject<PaginatedResponse>();\n  private departments: PaginatedResponse = new PaginatedResponse();\n  private departmentsListener = new Subject<PaginatedResponse>();\n  private vendors: PaginatedResponse = new PaginatedResponse();\n  private vendorsListener = new Subject<PaginatedResponse>();\n  private vendorStaffs = new PaginatedResponse();\n  private vendorStaffsListener = new Subject<PaginatedResponse>();\n  private isLoadingListener = new Subject<boolean>();\n  private deactivatingListener = new Subject<boolean>();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private notificationService: NotificationService,\n    private errorService: ErrorService\n  ) { }\n\n  getIsLoadingListener() {\n    return this.isLoadingListener.asObservable();\n  }\n\n  getCompanyList(pageSize = 10, pageIndex = 1) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/companys/${query}`)\n      .subscribe(\n        (res) => {\n          this.companyList = res;\n          this.companysListener.next({ ...this.companyList });\n        },\n        (err) => { }\n      );\n  }\n\n  getCompanyListUpdate() {\n    return this.companysListener.asObservable();\n  }\n\n  createCompany(formData) {\n    this.isLoadingListener.next(true);\n    this.http\n      .post(`${this.apiUrl}auth/companys/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.isLoadingListener.next(false);\n          this.notificationService.success(\n            `Success`,\n            `Company onboard successful`\n          );\n          this.router.navigate([\"/user/company-list\"]);\n        },\n        (err) => {\n          console.log(err);\n          const errorMessage =\n            err.error.message || err.error.details || err.error.error;\n          this.notificationService.danger(`Error`, errorMessage);\n          this.isLoadingListener.next(false);\n          this.errorService.handleError(errorMessage);\n        }\n      );\n  }\n\n  getDeviceList(pageSize = 10, pageIndex = 1) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/devices/${query}`)\n      .subscribe(\n        (res) => {\n          this.deviceList = res;\n          this.devicesListener.next({ ...this.deviceList });\n        },\n        (err) => { }\n      );\n  }\n\n  getDeviceListUpdate() {\n    return this.devicesListener.asObservable();\n  }\n\n  activateDevice(device) {\n    console.log(device)\n    this.isLoadingListener.next(true)\n    this.http\n      .patch(`${this.apiUrl}auth/devices/${device.id}/`, device)\n      .subscribe(\n        (response: any) => {\n          console.log(response);\n          this.isLoadingListener.next(false)\n          this.notificationService.success(\"Success\", response.message);\n        },\n        (err) => {\n          console.log(err);\n          this.notificationService.danger(\"Error\", err.error.message);\n          this.isLoadingListener.next(false)\n        }\n      );\n  }\n\n  createDevice(formData, dialogRef) {\n    this.isLoadingListener.next(true);\n    // const company = this.hel\n    this.http\n      .post(`${this.apiUrl}auth/devices/`, { ...formData })\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.isLoadingListener.next(false);\n          this.notificationService.success(\n            `Success`,\n            `Device onboard successful`\n          );\n          dialogRef.close()\n        },\n        (err) => {\n          console.log(err);\n          const errorMessage =\n            err.error.message || err.error.details || err.error.error || `device code: ${err.error.device_code[0]}` || `name: ${err.error.name[0]}` || `device id: ${err.error.device_id[0]}` || `${err.error.is_active[0]}` || err.error.company[0] || err.error.location[0];\n          // this.notificationService.danger(`Error`, errorMessage);\n          this.isLoadingListener.next(false);\n          this.errorService.handleError(errorMessage);\n        }\n      );\n  }\n\n  uploadStaff(employees) {\n    this.http\n      .post(`${this.apiUrl}auth/bulk-employee/`, employees)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          console.log(response);\n          this.isLoadingListener.next(false);\n          this.notificationService.success(\n            `Successful`,\n            `User(s) account created`\n          );\n          this.router.navigate([\"/user/staff-list\"]);\n        },\n        (err) => {\n          console.log(err);\n          console.log(err.error);\n          this.staffsCreateErrorListener.next(err.error);\n          // this.notificationService.danger(`Error`, `An unknown error occured`);\n          this.isLoadingListener.next(false);\n          this.errorService.handleError(err.error.message || err.error.details);\n        }\n      );\n  }\n\n  deactivateUser(user) {\n    // TODO: refactor code to take either phone or email\n    this.http\n      .post(`${this.apiUrl}auth/change-user-status/`, {\n        user_email: user.email || user.phone_number,\n        status: user.is_active,\n      })\n      .subscribe(\n        (response: any) => {\n          console.log(response);\n          this.notificationService.success(\"Success\", response.message);\n          this.deactivatingListener.next(true);\n        },\n        (err) => {\n          console.log(err);\n          this.notificationService.danger(\"Error\", err.error.message);\n          this.deactivatingListener.next(true);\n        }\n      );\n    return this.deactivatingListener.asObservable();\n  }\n\n  getStaffCreationErrorUpdate() {\n    return this.staffsCreateErrorListener.asObservable();\n  }\n\n  getCompanyAdminList(pageSize = 10, pageIndex = 1, company) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}&${company ? \"&company=\" + company : \"\"\n      }`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/cmp-adm/${query}`)\n      .subscribe(\n        (res) => {\n          this.companyAdminList = res;\n          this.companyAdminListener.next({ ...this.companyAdminList });\n        },\n        (err) => { }\n      );\n  }\n\n  getCompanyAdminListUpdate() {\n    return this.companyAdminListener.asObservable();\n  }\n\n  createCompanyAdmin(formData) {\n    console.log(formData);\n    this.isLoadingListener.next(true);\n    this.http\n      .post(`${this.apiUrl}auth/cmp-adm/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response: any) => {\n          this.notificationService.success(response.status, response.message);\n          this.router.navigate([\"/user/company-admin-list\"]);\n          this.isLoadingListener.next(false);\n        },\n        (err) => {\n          this.notificationService.danger(`Error`, `An unknown error occured`);\n          this.isLoadingListener.next(false);\n          this.errorService.handleError(err.error.message || err.error.details);\n        }\n      );\n  }\n\n  getAccountantList(pageSize = 10, pageIndex = 1, company) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}&${company ? \"&company=\" + company : \"\"\n      }`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/cmp-act/${query}`)\n      .subscribe(\n        (res) => {\n          this.accountantList = res;\n          this.accountantListener.next({ ...this.accountantList });\n        },\n        (err) => { }\n      );\n  }\n\n  getAccountantUpdate() {\n    return this.accountantListener.asObservable();\n  }\n\n  createAccountant(formData) {\n    this.http\n      .post(`${this.apiUrl}auth/cmp-act/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response: { status: string; message: string }) => {\n          this.notificationService.success(response.status, response.message);\n          this.router.navigate([\"/user/accountant-list\"]);\n        },\n        (err) => {\n          this.notificationService.danger(`Error`, `An unknown error occured`);\n          // this.errorService.handleError(err.error.message);\n          this.errorService.handleError(err.error.message || err.error.details);\n        }\n      );\n  }\n\n  getStaffList(pageSize: number = 10, pageIndex: number = 0) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/staffs/${query}`)\n      .subscribe(\n        (res) => {\n          // console.log(res)\n          this.staffs = res;\n          this.staffsListener.next({ ...this.staffs });\n        },\n        (err) => { }\n      );\n  }\n\n  getStaffListUpdate() {\n    return this.staffsListener.asObservable();\n  }\n\n  createStaff(formData) {\n    this.http\n      .post(`${this.apiUrl}auth/staffs/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.notificationService.success(\n            `Success`,\n            `staff account creation successful`\n          );\n          this.router.navigate([\"/staff-list\"]);\n        },\n        (err) => { }\n      );\n  }\n\n  createStaffLevel(formData) {\n    console.log(formData);\n    this.http\n      .post(`${this.apiUrl}auth/staff-level/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.notificationService.success(\n            `Success`,\n            `staff Level creation successful`\n          );\n          this.router.navigate([\"user/staff-level-list\"]);\n        },\n        (err) => {\n          this.errorService.handleError(err.error.message || err.error.details);\n          console.log(err);\n          this.notificationService.danger(\n            `Error`,\n            `Department creation was unsuccessful`\n          );\n          this.notificationService.danger(``, `${err.error.name || err.name}`);\n        }\n      );\n  }\n\n  getStaffLevels() {\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/staff-level/`)\n      .subscribe(\n        (res) => {\n          console.log(res);\n          this.staffLevels = res;\n          this.staffLevelsListener.next({ ...this.staffLevels });\n        },\n        (err) => { }\n      );\n    return this.staffLevelsListener.asObservable();\n  }\n\n  getDepartments(pageSize = 10, pageIndex = 1) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/departments/${query}`)\n      .subscribe(\n        (res) => {\n          this.departments = res;\n          this.departmentsListener.next({ ...this.departments });\n        },\n        (err) => { }\n      );\n  }\n\n  getDepartmentsUpdate() {\n    return this.departmentsListener.asObservable();\n  }\n\n  createDepartment(formData) {\n    this.http\n      .post(`${this.apiUrl}auth/departments/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.notificationService.success(\n            `Success`,\n            `Department creation successful`\n          );\n          this.router.navigate([\"/user/department-list\"]);\n        },\n        (err) => {\n          this.errorService.handleError(err.error.message || err.error.details);\n          this.notificationService.danger(\n            `Error`,\n            `Department creation was unsuccessful`\n          );\n          this.notificationService.danger(``, `${err.error.name || err.name}`);\n        }\n      );\n  }\n\n  getVendors(pageSize = 10, pageIndex = 1, company = null) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}&${company ? \"&company=\" + company : \"\"\n      }`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/vendor/${query}`)\n      .subscribe(\n        (res) => {\n          this.vendors = res;\n          this.vendorsListener.next({ ...this.vendors });\n        },\n        (err) => { }\n      );\n  }\n\n  getVendorsUpdate() {\n    return this.vendorsListener.asObservable();\n  }\n\n  createVendor(formData) {\n    this.http\n      .post(`${this.apiUrl}auth/vendor/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.notificationService.success(\n            `Success`,\n            `Vendor account creation successful`\n          );\n          this.router.navigate([\"/user/vendor-list\"]);\n        },\n        (err) => {\n          const errorMessage =\n            err.error.message || err.error.details || err.error.error;\n          this.notificationService.danger(`Error`, errorMessage);\n          this.errorService.handleError(errorMessage);\n        }\n      );\n  }\n\n  getVendorStaffs(pageSize = 10, pageIndex = 1) {\n    const query = `?limit=${pageSize}&offset=${pageIndex}`;\n    this.http\n      .get<PaginatedResponse>(`${this.apiUrl}auth/vendor-staff/${query}`)\n      .subscribe(\n        (res) => {\n          this.vendorStaffs = res;\n          this.vendorStaffsListener.next({ ...this.vendorStaffs });\n        },\n        (err) => { }\n      );\n  }\n\n  getVendorStaffsUpdate() {\n    return this.vendorStaffsListener.asObservable();\n  }\n\n  createVendorStaff(formData) {\n    this.http\n      .post(`${this.apiUrl}auth/vendor-staff/`, formData)\n      .pipe(shareReplay())\n      .subscribe(\n        (response) => {\n          this.notificationService.success(\n            `Success`,\n            `Vendor account creation successful`\n          );\n          this.router.navigate([\"/user/vendor-staff-list\"]);\n        },\n        (err) => {\n          this.notificationService.warning(\n            `Error`,\n            `Account creation was unsuccessful`\n          );\n          this.errorService.handleError(err.error.message || err.error.details);\n        }\n      );\n  }\n}\n"]}