(function () {
  "use strict";

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  (self["webpackChunkendless"] = self["webpackChunkendless"] || []).push([["default-node_modules_angular_material___ivy_ngcc___fesm2015_sort_js-node_modules_angular_mate-9356fd"], {
    /***/
    72306: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "DataSource": function DataSource() {
          return (
            /* reexport safe */
            _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__.DataSource
          );
        },

        /* harmony export */
        "BaseCdkCell": function BaseCdkCell() {
          return (
            /* binding */
            _BaseCdkCell
          );
        },

        /* harmony export */
        "BaseRowDef": function BaseRowDef() {
          return (
            /* binding */
            _BaseRowDef
          );
        },

        /* harmony export */
        "CDK_ROW_TEMPLATE": function CDK_ROW_TEMPLATE() {
          return (
            /* binding */
            _CDK_ROW_TEMPLATE
          );
        },

        /* harmony export */
        "CDK_TABLE": function CDK_TABLE() {
          return (
            /* binding */
            _CDK_TABLE
          );
        },

        /* harmony export */
        "CDK_TABLE_TEMPLATE": function CDK_TABLE_TEMPLATE() {
          return (
            /* binding */
            _CDK_TABLE_TEMPLATE
          );
        },

        /* harmony export */
        "CdkCell": function CdkCell() {
          return (
            /* binding */
            _CdkCell
          );
        },

        /* harmony export */
        "CdkCellDef": function CdkCellDef() {
          return (
            /* binding */
            _CdkCellDef
          );
        },

        /* harmony export */
        "CdkCellOutlet": function CdkCellOutlet() {
          return (
            /* binding */
            _CdkCellOutlet
          );
        },

        /* harmony export */
        "CdkColumnDef": function CdkColumnDef() {
          return (
            /* binding */
            _CdkColumnDef
          );
        },

        /* harmony export */
        "CdkFooterCell": function CdkFooterCell() {
          return (
            /* binding */
            _CdkFooterCell
          );
        },

        /* harmony export */
        "CdkFooterCellDef": function CdkFooterCellDef() {
          return (
            /* binding */
            _CdkFooterCellDef
          );
        },

        /* harmony export */
        "CdkFooterRow": function CdkFooterRow() {
          return (
            /* binding */
            _CdkFooterRow
          );
        },

        /* harmony export */
        "CdkFooterRowDef": function CdkFooterRowDef() {
          return (
            /* binding */
            _CdkFooterRowDef
          );
        },

        /* harmony export */
        "CdkHeaderCell": function CdkHeaderCell() {
          return (
            /* binding */
            _CdkHeaderCell
          );
        },

        /* harmony export */
        "CdkHeaderCellDef": function CdkHeaderCellDef() {
          return (
            /* binding */
            _CdkHeaderCellDef
          );
        },

        /* harmony export */
        "CdkHeaderRow": function CdkHeaderRow() {
          return (
            /* binding */
            _CdkHeaderRow
          );
        },

        /* harmony export */
        "CdkHeaderRowDef": function CdkHeaderRowDef() {
          return (
            /* binding */
            _CdkHeaderRowDef
          );
        },

        /* harmony export */
        "CdkNoDataRow": function CdkNoDataRow() {
          return (
            /* binding */
            _CdkNoDataRow
          );
        },

        /* harmony export */
        "CdkRow": function CdkRow() {
          return (
            /* binding */
            _CdkRow
          );
        },

        /* harmony export */
        "CdkRowDef": function CdkRowDef() {
          return (
            /* binding */
            _CdkRowDef
          );
        },

        /* harmony export */
        "CdkTable": function CdkTable() {
          return (
            /* binding */
            _CdkTable
          );
        },

        /* harmony export */
        "CdkTableModule": function CdkTableModule() {
          return (
            /* binding */
            _CdkTableModule
          );
        },

        /* harmony export */
        "CdkTextColumn": function CdkTextColumn() {
          return (
            /* binding */
            _CdkTextColumn
          );
        },

        /* harmony export */
        "DataRowOutlet": function DataRowOutlet() {
          return (
            /* binding */
            _DataRowOutlet
          );
        },

        /* harmony export */
        "FooterRowOutlet": function FooterRowOutlet() {
          return (
            /* binding */
            _FooterRowOutlet
          );
        },

        /* harmony export */
        "HeaderRowOutlet": function HeaderRowOutlet() {
          return (
            /* binding */
            _HeaderRowOutlet
          );
        },

        /* harmony export */
        "NoDataRowOutlet": function NoDataRowOutlet() {
          return (
            /* binding */
            _NoDataRowOutlet
          );
        },

        /* harmony export */
        "STICKY_DIRECTIONS": function STICKY_DIRECTIONS() {
          return (
            /* binding */
            _STICKY_DIRECTIONS
          );
        },

        /* harmony export */
        "STICKY_POSITIONING_LISTENER": function STICKY_POSITIONING_LISTENER() {
          return (
            /* binding */
            _STICKY_POSITIONING_LISTENER
          );
        },

        /* harmony export */
        "StickyStyler": function StickyStyler() {
          return (
            /* binding */
            _StickyStyler
          );
        },

        /* harmony export */
        "TEXT_COLUMN_OPTIONS": function TEXT_COLUMN_OPTIONS() {
          return (
            /* binding */
            _TEXT_COLUMN_OPTIONS
          );
        },

        /* harmony export */
        "_COALESCED_STYLE_SCHEDULER": function _COALESCED_STYLE_SCHEDULER() {
          return (
            /* binding */
            _COALESCED_STYLE_SCHEDULER2
          );
        },

        /* harmony export */
        "_CoalescedStyleScheduler": function _CoalescedStyleScheduler() {
          return (
            /* binding */
            _CoalescedStyleScheduler2
          );
        },

        /* harmony export */
        "_Schedule": function _Schedule() {
          return (
            /* binding */
            _Schedule2
          );
        },

        /* harmony export */
        "mixinHasStickyInput": function mixinHasStickyInput() {
          return (
            /* binding */
            _mixinHasStickyInput
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/collections */
      62604);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      772);
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/cdk/platform */
      36145);
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      42791);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      34361);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs */
      76491);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      64674);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs */
      81134);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      22663);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      53466);

      var _c0 = [[["caption"]], [["colgroup"], ["col"]]];
      var _c1 = ["caption", "colgroup, col"];

      function CdkTextColumn_th_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("text-align", ctx_r0.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r0.headerText, " ");
        }
      }

      function CdkTextColumn_td_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var data_r2 = ctx.$implicit;

          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("text-align", ctx_r1.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r1.dataAccessor(data_r2, ctx_r1.name), " ");
        }
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Mixin to provide a directive with a function that checks if the sticky input has been
       * changed since the last time the function was called. Essentially adds a dirty-check to the
       * sticky value.
       * @docs-private
       */


      function _mixinHasStickyInput(base) {
        return /*#__PURE__*/function (_base) {
          _inherits(_class, _base);

          var _super = _createSuper(_class);

          function _class() {
            var _this;

            _classCallCheck(this, _class);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));
            _this._sticky = false;
            /** Whether the sticky input has changed since it was last checked. */

            _this._hasStickyChanged = false;
            return _this;
          }
          /** Whether sticky positioning should be applied. */


          _createClass(_class, [{
            key: "sticky",
            get: function get() {
              return this._sticky;
            },
            set: function set(v) {
              var prevValue = this._sticky;
              this._sticky = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(v);
              this._hasStickyChanged = prevValue !== this._sticky;
            }
            /** Whether the sticky value has changed since this was last called. */

          }, {
            key: "hasStickyChanged",
            value: function hasStickyChanged() {
              var hasStickyChanged = this._hasStickyChanged;
              this._hasStickyChanged = false;
              return hasStickyChanged;
            }
            /** Resets the dirty check for cases where the sticky state has been used without checking. */

          }, {
            key: "resetStickyChanged",
            value: function resetStickyChanged() {
              this._hasStickyChanged = false;
            }
          }]);

          return _class;
        }(base);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Used to provide a table to some of the sub-components without causing a circular dependency.
       * @docs-private
       */


      var _CDK_TABLE = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('CDK_TABLE');
      /** Injection token that can be used to specify the text column options. */


      var _TEXT_COLUMN_OPTIONS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('text-column-options');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Cell definition for a CDK table.
       * Captures the template of a column's data row cell as well as cell-specific properties.
       */


      var _CdkCellDef = /*#__PURE__*/function () {
        var CdkCellDef = function CdkCellDef(
        /** @docs-private */
        template) {
          _classCallCheck(this, CdkCellDef);

          this.template = template;
        };

        CdkCellDef.ɵfac = function CdkCellDef_Factory(t) {
          return new (t || CdkCellDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
        };

        CdkCellDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkCellDef,
          selectors: [["", "cdkCellDef", ""]]
        });
        return CdkCellDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Header cell definition for a CDK table.
       * Captures the template of a column's header cell and as well as cell-specific properties.
       */


      var _CdkHeaderCellDef = /*#__PURE__*/function () {
        var CdkHeaderCellDef = function CdkHeaderCellDef(
        /** @docs-private */
        template) {
          _classCallCheck(this, CdkHeaderCellDef);

          this.template = template;
        };

        CdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {
          return new (t || CdkHeaderCellDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
        };

        CdkHeaderCellDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkHeaderCellDef,
          selectors: [["", "cdkHeaderCellDef", ""]]
        });
        return CdkHeaderCellDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Footer cell definition for a CDK table.
       * Captures the template of a column's footer cell and as well as cell-specific properties.
       */


      var _CdkFooterCellDef = /*#__PURE__*/function () {
        var CdkFooterCellDef = function CdkFooterCellDef(
        /** @docs-private */
        template) {
          _classCallCheck(this, CdkFooterCellDef);

          this.template = template;
        };

        CdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {
          return new (t || CdkFooterCellDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
        };

        CdkFooterCellDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkFooterCellDef,
          selectors: [["", "cdkFooterCellDef", ""]]
        });
        return CdkFooterCellDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })(); // Boilerplate for applying mixins to CdkColumnDef.

      /** @docs-private */


      var CdkColumnDefBase = function CdkColumnDefBase() {
        _classCallCheck(this, CdkColumnDefBase);
      };

      var _CdkColumnDefBase = /*#__PURE__*/_mixinHasStickyInput(CdkColumnDefBase);
      /**
       * Column definition for the CDK table.
       * Defines a set of cells available for a table column.
       */


      var _CdkColumnDef = /*#__PURE__*/function () {
        var CdkColumnDef = /*#__PURE__*/function (_CdkColumnDefBase2) {
          _inherits(CdkColumnDef, _CdkColumnDefBase2);

          var _super2 = _createSuper(CdkColumnDef);

          function CdkColumnDef(_table) {
            var _this2;

            _classCallCheck(this, CdkColumnDef);

            _this2 = _super2.call(this);
            _this2._table = _table;
            _this2._stickyEnd = false;
            return _this2;
          }
          /** Unique name for this column. */


          _createClass(CdkColumnDef, [{
            key: "name",
            get: function get() {
              return this._name;
            },
            set: function set(name) {
              this._setNameInput(name);
            }
            /**
             * Whether this column should be sticky positioned on the end of the row. Should make sure
             * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value
             * has been changed.
             */

          }, {
            key: "stickyEnd",
            get: function get() {
              return this._stickyEnd;
            },
            set: function set(v) {
              var prevValue = this._stickyEnd;
              this._stickyEnd = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(v);
              this._hasStickyChanged = prevValue !== this._stickyEnd;
            }
            /**
             * Overridable method that sets the css classes that will be added to every cell in this
             * column.
             * In the future, columnCssClassName will change from type string[] to string and this
             * will set a single string value.
             * @docs-private
             */

          }, {
            key: "_updateColumnCssClassName",
            value: function _updateColumnCssClassName() {
              this._columnCssClassName = ["cdk-column-".concat(this.cssClassFriendlyName)];
            }
            /**
             * This has been extracted to a util because of TS 4 and VE.
             * View Engine doesn't support property rename inheritance.
             * TS 4.0 doesn't allow properties to override accessors or vice-versa.
             * @docs-private
             */

          }, {
            key: "_setNameInput",
            value: function _setNameInput(value) {
              // If the directive is set without a name (updated programmatically), then this setter will
              // trigger with an empty string and should not overwrite the programmatically set value.
              if (value) {
                this._name = value;
                this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/ig, '-');

                this._updateColumnCssClassName();
              }
            }
          }]);

          return CdkColumnDef;
        }(_CdkColumnDefBase);

        CdkColumnDef.ɵfac = function CdkColumnDef_Factory(t) {
          return new (t || CdkColumnDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CDK_TABLE, 8));
        };

        CdkColumnDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkColumnDef,
          selectors: [["", "cdkColumnDef", ""]],
          contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkCellDef, 5);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkHeaderCellDef, 5);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkFooterCellDef, 5);
            }

            if (rf & 2) {
              var _t;

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.cell = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.headerCell = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.footerCell = _t.first);
            }
          },
          inputs: {
            sticky: "sticky",
            name: ["cdkColumnDef", "name"],
            stickyEnd: "stickyEnd"
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: 'MAT_SORT_HEADER_COLUMN_DEF',
            useExisting: CdkColumnDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return CdkColumnDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */


      var _BaseCdkCell = function _BaseCdkCell(columnDef, elementRef) {
        _classCallCheck(this, _BaseCdkCell);

        // If IE 11 is dropped before we switch to setting a single class name, change to multi param
        // with destructuring.
        var classList = elementRef.nativeElement.classList;

        var _iterator = _createForOfIteratorHelper(columnDef._columnCssClassName),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var className = _step.value;
            classList.add(className);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      };
      /** Header cell template container that adds the right classes and role. */


      var _CdkHeaderCell = /*#__PURE__*/function () {
        var CdkHeaderCell = /*#__PURE__*/function (_BaseCdkCell2) {
          _inherits(CdkHeaderCell, _BaseCdkCell2);

          var _super3 = _createSuper(CdkHeaderCell);

          function CdkHeaderCell(columnDef, elementRef) {
            _classCallCheck(this, CdkHeaderCell);

            return _super3.call(this, columnDef, elementRef);
          }

          return CdkHeaderCell;
        }(_BaseCdkCell);

        CdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {
          return new (t || CdkHeaderCell)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CdkColumnDef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        CdkHeaderCell.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkHeaderCell,
          selectors: [["cdk-header-cell"], ["th", "cdk-header-cell", ""]],
          hostAttrs: ["role", "columnheader", 1, "cdk-header-cell"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return CdkHeaderCell;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Footer cell template container that adds the right classes and role. */


      var _CdkFooterCell = /*#__PURE__*/function () {
        var CdkFooterCell = /*#__PURE__*/function (_BaseCdkCell3) {
          _inherits(CdkFooterCell, _BaseCdkCell3);

          var _super4 = _createSuper(CdkFooterCell);

          function CdkFooterCell(columnDef, elementRef) {
            _classCallCheck(this, CdkFooterCell);

            return _super4.call(this, columnDef, elementRef);
          }

          return CdkFooterCell;
        }(_BaseCdkCell);

        CdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {
          return new (t || CdkFooterCell)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CdkColumnDef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        CdkFooterCell.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkFooterCell,
          selectors: [["cdk-footer-cell"], ["td", "cdk-footer-cell", ""]],
          hostAttrs: ["role", "gridcell", 1, "cdk-footer-cell"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return CdkFooterCell;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Cell template container that adds the right classes and role. */


      var _CdkCell = /*#__PURE__*/function () {
        var CdkCell = /*#__PURE__*/function (_BaseCdkCell4) {
          _inherits(CdkCell, _BaseCdkCell4);

          var _super5 = _createSuper(CdkCell);

          function CdkCell(columnDef, elementRef) {
            _classCallCheck(this, CdkCell);

            return _super5.call(this, columnDef, elementRef);
          }

          return CdkCell;
        }(_BaseCdkCell);

        CdkCell.ɵfac = function CdkCell_Factory(t) {
          return new (t || CdkCell)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CdkColumnDef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        CdkCell.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkCell,
          selectors: [["cdk-cell"], ["td", "cdk-cell", ""]],
          hostAttrs: ["role", "gridcell", 1, "cdk-cell"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return CdkCell;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @docs-private
       */


      var _Schedule2 = function _Schedule2() {
        _classCallCheck(this, _Schedule2);

        this.tasks = [];
        this.endTasks = [];
      };
      /** Injection token used to provide a coalesced style scheduler. */


      var _COALESCED_STYLE_SCHEDULER2 = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('_COALESCED_STYLE_SCHEDULER');
      /**
       * Allows grouping up CSSDom mutations after the current execution context.
       * This can significantly improve performance when separate consecutive functions are
       * reading from the CSSDom and then mutating it.
       *
       * @docs-private
       */


      var _CoalescedStyleScheduler2 = /*#__PURE__*/function () {
        var _CoalescedStyleScheduler = /*#__PURE__*/function () {
          function _CoalescedStyleScheduler(_ngZone) {
            _classCallCheck(this, _CoalescedStyleScheduler);

            this._ngZone = _ngZone;
            this._currentSchedule = null;
            this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
          }
          /**
           * Schedules the specified task to run at the end of the current VM turn.
           */


          _createClass(_CoalescedStyleScheduler, [{
            key: "schedule",
            value: function schedule(task) {
              this._createScheduleIfNeeded();

              this._currentSchedule.tasks.push(task);
            }
            /**
             * Schedules the specified task to run after other scheduled tasks at the end of the current
             * VM turn.
             */

          }, {
            key: "scheduleEnd",
            value: function scheduleEnd(task) {
              this._createScheduleIfNeeded();

              this._currentSchedule.endTasks.push(task);
            }
            /** Prevent any further tasks from running. */

          }, {
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              this._destroyed.next();

              this._destroyed.complete();
            }
          }, {
            key: "_createScheduleIfNeeded",
            value: function _createScheduleIfNeeded() {
              var _this3 = this;

              if (this._currentSchedule) {
                return;
              }

              this._currentSchedule = new _Schedule2();

              this._getScheduleObservable().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._destroyed)).subscribe(function () {
                while (_this3._currentSchedule.tasks.length || _this3._currentSchedule.endTasks.length) {
                  var schedule = _this3._currentSchedule; // Capture new tasks scheduled by the current set of tasks.

                  _this3._currentSchedule = new _Schedule2();

                  var _iterator2 = _createForOfIteratorHelper(schedule.tasks),
                      _step2;

                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      var task = _step2.value;
                      task();
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }

                  var _iterator3 = _createForOfIteratorHelper(schedule.endTasks),
                      _step3;

                  try {
                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                      var _task = _step3.value;

                      _task();
                    }
                  } catch (err) {
                    _iterator3.e(err);
                  } finally {
                    _iterator3.f();
                  }
                }

                _this3._currentSchedule = null;
              });
            }
          }, {
            key: "_getScheduleObservable",
            value: function _getScheduleObservable() {
              // Use onStable when in the context of an ongoing change detection cycle so that we
              // do not accidentally trigger additional cycles.
              return this._ngZone.isStable ? (0, rxjs__WEBPACK_IMPORTED_MODULE_5__.from)(Promise.resolve(undefined)) : this._ngZone.onStable.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_6__.take)(1));
            }
          }]);

          return _CoalescedStyleScheduler;
        }();

        _CoalescedStyleScheduler.ɵfac = function _CoalescedStyleScheduler_Factory(t) {
          return new (t || _CoalescedStyleScheduler)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone));
        };

        _CoalescedStyleScheduler.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
          token: _CoalescedStyleScheduler,
          factory: _CoalescedStyleScheduler.ɵfac
        });
        return _CoalescedStyleScheduler;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * The row template that can be used by the mat-table. Should not be used outside of the
       * material library.
       */


      var _CDK_ROW_TEMPLATE = "<ng-container cdkCellOutlet></ng-container>";
      /**
       * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs
       * for changes and notifying the table.
       */

      var _BaseRowDef = /*#__PURE__*/function () {
        var BaseRowDef = /*#__PURE__*/function () {
          function BaseRowDef(
          /** @docs-private */
          template, _differs) {
            _classCallCheck(this, BaseRowDef);

            this.template = template;
            this._differs = _differs;
          }

          _createClass(BaseRowDef, [{
            key: "ngOnChanges",
            value: function ngOnChanges(changes) {
              // Create a new columns differ if one does not yet exist. Initialize it based on initial value
              // of the columns property or an empty array if none is provided.
              if (!this._columnsDiffer) {
                var columns = changes['columns'] && changes['columns'].currentValue || [];
                this._columnsDiffer = this._differs.find(columns).create();

                this._columnsDiffer.diff(columns);
              }
            }
            /**
             * Returns the difference between the current columns and the columns from the last diff, or null
             * if there is no difference.
             */

          }, {
            key: "getColumnsDiff",
            value: function getColumnsDiff() {
              return this._columnsDiffer.diff(this.columns);
            }
            /** Gets this row def's relevant cell template from the provided column def. */

          }, {
            key: "extractCellTemplate",
            value: function extractCellTemplate(column) {
              if (this instanceof _CdkHeaderRowDef) {
                return column.headerCell.template;
              }

              if (this instanceof _CdkFooterRowDef) {
                return column.footerCell.template;
              } else {
                return column.cell.template;
              }
            }
          }]);

          return BaseRowDef;
        }();

        BaseRowDef.ɵfac = function BaseRowDef_Factory(t) {
          return new (t || BaseRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers));
        };

        BaseRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: BaseRowDef,
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
        });
        return BaseRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })(); // Boilerplate for applying mixins to CdkHeaderRowDef.

      /** @docs-private */


      var CdkHeaderRowDefBase = /*#__PURE__*/function (_BaseRowDef2) {
        _inherits(CdkHeaderRowDefBase, _BaseRowDef2);

        var _super6 = _createSuper(CdkHeaderRowDefBase);

        function CdkHeaderRowDefBase() {
          _classCallCheck(this, CdkHeaderRowDefBase);

          return _super6.apply(this, arguments);
        }

        return CdkHeaderRowDefBase;
      }(_BaseRowDef);

      var _CdkHeaderRowDefBase = /*#__PURE__*/_mixinHasStickyInput(CdkHeaderRowDefBase);
      /**
       * Header row definition for the CDK table.
       * Captures the header row's template and other header properties such as the columns to display.
       */


      var _CdkHeaderRowDef = /*#__PURE__*/function () {
        var CdkHeaderRowDef = /*#__PURE__*/function (_CdkHeaderRowDefBase2) {
          _inherits(CdkHeaderRowDef, _CdkHeaderRowDefBase2);

          var _super7 = _createSuper(CdkHeaderRowDef);

          function CdkHeaderRowDef(template, _differs, _table) {
            var _this4;

            _classCallCheck(this, CdkHeaderRowDef);

            _this4 = _super7.call(this, template, _differs);
            _this4._table = _table;
            return _this4;
          } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
          // Explicitly define it so that the method is called as part of the Angular lifecycle.


          _createClass(CdkHeaderRowDef, [{
            key: "ngOnChanges",
            value: function ngOnChanges(changes) {
              _get(_getPrototypeOf(CdkHeaderRowDef.prototype), "ngOnChanges", this).call(this, changes);
            }
          }]);

          return CdkHeaderRowDef;
        }(_CdkHeaderRowDefBase);

        CdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {
          return new (t || CdkHeaderRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CDK_TABLE, 8));
        };

        CdkHeaderRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkHeaderRowDef,
          selectors: [["", "cdkHeaderRowDef", ""]],
          inputs: {
            columns: ["cdkHeaderRowDef", "columns"],
            sticky: ["cdkHeaderRowDefSticky", "sticky"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
        });
        return CdkHeaderRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })(); // Boilerplate for applying mixins to CdkFooterRowDef.

      /** @docs-private */


      var CdkFooterRowDefBase = /*#__PURE__*/function (_BaseRowDef3) {
        _inherits(CdkFooterRowDefBase, _BaseRowDef3);

        var _super8 = _createSuper(CdkFooterRowDefBase);

        function CdkFooterRowDefBase() {
          _classCallCheck(this, CdkFooterRowDefBase);

          return _super8.apply(this, arguments);
        }

        return CdkFooterRowDefBase;
      }(_BaseRowDef);

      var _CdkFooterRowDefBase = /*#__PURE__*/_mixinHasStickyInput(CdkFooterRowDefBase);
      /**
       * Footer row definition for the CDK table.
       * Captures the footer row's template and other footer properties such as the columns to display.
       */


      var _CdkFooterRowDef = /*#__PURE__*/function () {
        var CdkFooterRowDef = /*#__PURE__*/function (_CdkFooterRowDefBase2) {
          _inherits(CdkFooterRowDef, _CdkFooterRowDefBase2);

          var _super9 = _createSuper(CdkFooterRowDef);

          function CdkFooterRowDef(template, _differs, _table) {
            var _this5;

            _classCallCheck(this, CdkFooterRowDef);

            _this5 = _super9.call(this, template, _differs);
            _this5._table = _table;
            return _this5;
          } // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.
          // Explicitly define it so that the method is called as part of the Angular lifecycle.


          _createClass(CdkFooterRowDef, [{
            key: "ngOnChanges",
            value: function ngOnChanges(changes) {
              _get(_getPrototypeOf(CdkFooterRowDef.prototype), "ngOnChanges", this).call(this, changes);
            }
          }]);

          return CdkFooterRowDef;
        }(_CdkFooterRowDefBase);

        CdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {
          return new (t || CdkFooterRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CDK_TABLE, 8));
        };

        CdkFooterRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkFooterRowDef,
          selectors: [["", "cdkFooterRowDef", ""]],
          inputs: {
            columns: ["cdkFooterRowDef", "columns"],
            sticky: ["cdkFooterRowDefSticky", "sticky"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
        });
        return CdkFooterRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Data row definition for the CDK table.
       * Captures the header row's template and other row properties such as the columns to display and
       * a when predicate that describes when this row should be used.
       */


      var _CdkRowDef = /*#__PURE__*/function () {
        var CdkRowDef = /*#__PURE__*/function (_BaseRowDef4) {
          _inherits(CdkRowDef, _BaseRowDef4);

          var _super10 = _createSuper(CdkRowDef);

          // TODO(andrewseguin): Add an input for providing a switch function to determine
          //   if this template should be used.
          function CdkRowDef(template, _differs, _table) {
            var _this6;

            _classCallCheck(this, CdkRowDef);

            _this6 = _super10.call(this, template, _differs);
            _this6._table = _table;
            return _this6;
          }

          return CdkRowDef;
        }(_BaseRowDef);

        CdkRowDef.ɵfac = function CdkRowDef_Factory(t) {
          return new (t || CdkRowDef)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CDK_TABLE, 8));
        };

        CdkRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkRowDef,
          selectors: [["", "cdkRowDef", ""]],
          inputs: {
            columns: ["cdkRowDefColumns", "columns"],
            when: ["cdkRowDefWhen", "when"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return CdkRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Outlet for rendering cells inside of a row or header row.
       * @docs-private
       */


      var _CdkCellOutlet = /*#__PURE__*/function () {
        var CdkCellOutlet = /*#__PURE__*/function () {
          function CdkCellOutlet(_viewContainer) {
            _classCallCheck(this, CdkCellOutlet);

            this._viewContainer = _viewContainer;
            CdkCellOutlet.mostRecentCellOutlet = this;
          }

          _createClass(CdkCellOutlet, [{
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              // If this was the last outlet being rendered in the view, remove the reference
              // from the static property after it has been destroyed to avoid leaking memory.
              if (CdkCellOutlet.mostRecentCellOutlet === this) {
                CdkCellOutlet.mostRecentCellOutlet = null;
              }
            }
          }]);

          return CdkCellOutlet;
        }();

        CdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {
          return new (t || CdkCellOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef));
        };

        CdkCellOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkCellOutlet,
          selectors: [["", "cdkCellOutlet", ""]]
        });
        /**
         * Static property containing the latest constructed instance of this class.
         * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using
         * createEmbeddedView. After one of these components are created, this property will provide
         * a handle to provide that component's cells and context. After init, the CdkCellOutlet will
         * construct the cells with the provided context.
         */

        CdkCellOutlet.mostRecentCellOutlet = null;
        return CdkCellOutlet;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Header template container that contains the cell outlet. Adds the right class and role. */


      var _CdkHeaderRow = /*#__PURE__*/function () {
        var CdkHeaderRow = function CdkHeaderRow() {
          _classCallCheck(this, CdkHeaderRow);
        };

        CdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {
          return new (t || CdkHeaderRow)();
        };

        CdkHeaderRow.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: CdkHeaderRow,
          selectors: [["cdk-header-row"], ["tr", "cdk-header-row", ""]],
          hostAttrs: ["role", "row", 1, "cdk-header-row"],
          decls: 1,
          vars: 0,
          consts: [["cdkCellOutlet", ""]],
          template: function CdkHeaderRow_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
            }
          },
          directives: [_CdkCellOutlet],
          encapsulation: 2
        });
        return CdkHeaderRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Footer template container that contains the cell outlet. Adds the right class and role. */


      var _CdkFooterRow = /*#__PURE__*/function () {
        var CdkFooterRow = function CdkFooterRow() {
          _classCallCheck(this, CdkFooterRow);
        };

        CdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {
          return new (t || CdkFooterRow)();
        };

        CdkFooterRow.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: CdkFooterRow,
          selectors: [["cdk-footer-row"], ["tr", "cdk-footer-row", ""]],
          hostAttrs: ["role", "row", 1, "cdk-footer-row"],
          decls: 1,
          vars: 0,
          consts: [["cdkCellOutlet", ""]],
          template: function CdkFooterRow_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
            }
          },
          directives: [_CdkCellOutlet],
          encapsulation: 2
        });
        return CdkFooterRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Data row template container that contains the cell outlet. Adds the right class and role. */


      var _CdkRow = /*#__PURE__*/function () {
        var CdkRow = function CdkRow() {
          _classCallCheck(this, CdkRow);
        };

        CdkRow.ɵfac = function CdkRow_Factory(t) {
          return new (t || CdkRow)();
        };

        CdkRow.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: CdkRow,
          selectors: [["cdk-row"], ["tr", "cdk-row", ""]],
          hostAttrs: ["role", "row", 1, "cdk-row"],
          decls: 1,
          vars: 0,
          consts: [["cdkCellOutlet", ""]],
          template: function CdkRow_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
            }
          },
          directives: [_CdkCellOutlet],
          encapsulation: 2
        });
        return CdkRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Row that can be used to display a message when no data is shown in the table. */


      var _CdkNoDataRow = /*#__PURE__*/function () {
        var CdkNoDataRow = function CdkNoDataRow(templateRef) {
          _classCallCheck(this, CdkNoDataRow);

          this.templateRef = templateRef;
        };

        CdkNoDataRow.ɵfac = function CdkNoDataRow_Factory(t) {
          return new (t || CdkNoDataRow)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
        };

        CdkNoDataRow.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: CdkNoDataRow,
          selectors: [["ng-template", "cdkNoDataRow", ""]]
        });
        return CdkNoDataRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * List of all possible directions that can be used for sticky positioning.
       * @docs-private
       */


      var _STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];
      /**
       * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.
       * @docs-private
       */

      var _StickyStyler = /*#__PURE__*/function () {
        /**
         * @param _isNativeHtmlTable Whether the sticky logic should be based on a table
         *     that uses the native `<table>` element.
         * @param _stickCellCss The CSS class that will be applied to every row/cell that has
         *     sticky positioning applied.
         * @param direction The directionality context of the table (ltr/rtl); affects column positioning
         *     by reversing left/right positions.
         * @param _isBrowser Whether the table is currently being rendered on the server or the client.
         * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells
         *     using inline styles. If false, it is assumed that position: sticky is included in
         *     the component stylesheet for _stickCellCss.
         * @param _positionListener A listener that is notified of changes to sticky rows/columns
         *     and their dimensions.
         */
        function _StickyStyler(_isNativeHtmlTable, _stickCellCss, direction,
        /**
         * @deprecated `_coalescedStyleScheduler` parameter to become required.
         * @breaking-change 11.0.0
         */
        _coalescedStyleScheduler) {
          var _isBrowser = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

          var _needsPositionStickyOnElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

          var _positionListener = arguments.length > 6 ? arguments[6] : undefined;

          _classCallCheck(this, _StickyStyler);

          this._isNativeHtmlTable = _isNativeHtmlTable;
          this._stickCellCss = _stickCellCss;
          this.direction = direction;
          this._coalescedStyleScheduler = _coalescedStyleScheduler;
          this._isBrowser = _isBrowser;
          this._needsPositionStickyOnElement = _needsPositionStickyOnElement;
          this._positionListener = _positionListener;
          this._cachedCellWidths = [];
          this._borderCellCss = {
            'top': "".concat(_stickCellCss, "-border-elem-top"),
            'bottom': "".concat(_stickCellCss, "-border-elem-bottom"),
            'left': "".concat(_stickCellCss, "-border-elem-left"),
            'right': "".concat(_stickCellCss, "-border-elem-right")
          };
        }
        /**
         * Clears the sticky positioning styles from the row and its cells by resetting the `position`
         * style, setting the zIndex to 0, and unsetting each provided sticky direction.
         * @param rows The list of rows that should be cleared from sticking in the provided directions
         * @param stickyDirections The directions that should no longer be set as sticky on the rows.
         */


        _createClass(_StickyStyler, [{
          key: "clearStickyPositioning",
          value: function clearStickyPositioning(rows, stickyDirections) {
            var _this7 = this;

            var elementsToClear = [];

            var _iterator4 = _createForOfIteratorHelper(rows),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var row = _step4.value;

                // If the row isn't an element (e.g. if it's an `ng-container`),
                // it won't have inline styles or `children` so we skip it.
                if (row.nodeType !== row.ELEMENT_NODE) {
                  continue;
                }

                elementsToClear.push(row);

                for (var i = 0; i < row.children.length; i++) {
                  elementsToClear.push(row.children[i]);
                }
              } // Coalesce with sticky row/column updates (and potentially other changes like column resize).

            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            this._scheduleStyleChanges(function () {
              var _iterator5 = _createForOfIteratorHelper(elementsToClear),
                  _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var element = _step5.value;

                  _this7._removeStickyStyle(element, stickyDirections);
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            });
          }
          /**
           * Applies sticky left and right positions to the cells of each row according to the sticky
           * states of the rendered column definitions.
           * @param rows The rows that should have its set of cells stuck according to the sticky states.
           * @param stickyStartStates A list of boolean states where each state represents whether the cell
           *     in this index position should be stuck to the start of the row.
           * @param stickyEndStates A list of boolean states where each state represents whether the cell
           *     in this index position should be stuck to the end of the row.
           * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each
           *     column cell. If `false` cached widths will be used instead.
           */

        }, {
          key: "updateStickyColumns",
          value: function updateStickyColumns(rows, stickyStartStates, stickyEndStates) {
            var _this8 = this;

            var recalculateCellWidths = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

            if (!rows.length || !this._isBrowser || !(stickyStartStates.some(function (state) {
              return state;
            }) || stickyEndStates.some(function (state) {
              return state;
            }))) {
              if (this._positionListener) {
                this._positionListener.stickyColumnsUpdated({
                  sizes: []
                });

                this._positionListener.stickyEndColumnsUpdated({
                  sizes: []
                });
              }

              return;
            }

            var firstRow = rows[0];
            var numCells = firstRow.children.length;

            var cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);

            var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);

            var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);

            var lastStickyStart = stickyStartStates.lastIndexOf(true);
            var firstStickyEnd = stickyEndStates.indexOf(true); // Coalesce with sticky row updates (and potentially other changes like column resize).

            this._scheduleStyleChanges(function () {
              var isRtl = _this8.direction === 'rtl';
              var start = isRtl ? 'right' : 'left';
              var end = isRtl ? 'left' : 'right';

              var _iterator6 = _createForOfIteratorHelper(rows),
                  _step6;

              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var row = _step6.value;

                  for (var i = 0; i < numCells; i++) {
                    var cell = row.children[i];

                    if (stickyStartStates[i]) {
                      _this8._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);
                    }

                    if (stickyEndStates[i]) {
                      _this8._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);
                    }
                  }
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }

              if (_this8._positionListener) {
                _this8._positionListener.stickyColumnsUpdated({
                  sizes: lastStickyStart === -1 ? [] : cellWidths.slice(0, lastStickyStart + 1).map(function (width, index) {
                    return stickyStartStates[index] ? width : null;
                  })
                });

                _this8._positionListener.stickyEndColumnsUpdated({
                  sizes: firstStickyEnd === -1 ? [] : cellWidths.slice(firstStickyEnd).map(function (width, index) {
                    return stickyEndStates[index + firstStickyEnd] ? width : null;
                  }).reverse()
                });
              }
            });
          }
          /**
           * Applies sticky positioning to the row's cells if using the native table layout, and to the
           * row itself otherwise.
           * @param rowsToStick The list of rows that should be stuck according to their corresponding
           *     sticky state and to the provided top or bottom position.
           * @param stickyStates A list of boolean states where each state represents whether the row
           *     should be stuck in the particular top or bottom position.
           * @param position The position direction in which the row should be stuck if that row should be
           *     sticky.
           *
           */

        }, {
          key: "stickRows",
          value: function stickRows(rowsToStick, stickyStates, position) {
            var _this9 = this;

            // Since we can't measure the rows on the server, we can't stick the rows properly.
            if (!this._isBrowser) {
              return;
            } // If positioning the rows to the bottom, reverse their order when evaluating the sticky
            // position such that the last row stuck will be "bottom: 0px" and so on. Note that the
            // sticky states need to be reversed as well.


            var rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;
            var states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates; // Measure row heights all at once before adding sticky styles to reduce layout thrashing.

            var stickyOffsets = [];
            var stickyCellHeights = [];
            var elementsToStick = [];

            for (var rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {
              stickyOffsets[rowIndex] = stickyOffset;

              if (!states[rowIndex]) {
                continue;
              }

              var row = rows[rowIndex];
              elementsToStick[rowIndex] = this._isNativeHtmlTable ? Array.from(row.children) : [row];
              var height = row.getBoundingClientRect().height;
              stickyOffset += height;
              stickyCellHeights[rowIndex] = height;
            }

            var borderedRowIndex = states.lastIndexOf(true); // Coalesce with other sticky row updates (top/bottom), sticky columns updates
            // (and potentially other changes like column resize).

            this._scheduleStyleChanges(function () {
              var _a, _b;

              for (var _rowIndex = 0; _rowIndex < rows.length; _rowIndex++) {
                if (!states[_rowIndex]) {
                  continue;
                }

                var offset = stickyOffsets[_rowIndex];
                var isBorderedRowIndex = _rowIndex === borderedRowIndex;

                var _iterator7 = _createForOfIteratorHelper(elementsToStick[_rowIndex]),
                    _step7;

                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    var element = _step7.value;

                    _this9._addStickyStyle(element, position, offset, isBorderedRowIndex);
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              }

              if (position === 'top') {
                (_a = _this9._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({
                  sizes: stickyCellHeights,
                  elements: elementsToStick
                });
              } else {
                (_b = _this9._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({
                  sizes: stickyCellHeights,
                  elements: elementsToStick
                });
              }
            });
          }
          /**
           * When using the native table in Safari, sticky footer cells do not stick. The only way to stick
           * footer rows is to apply sticky styling to the tfoot container. This should only be done if
           * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from
           * the tfoot element.
           */

        }, {
          key: "updateStickyFooterContainer",
          value: function updateStickyFooterContainer(tableElement, stickyStates) {
            var _this10 = this;

            if (!this._isNativeHtmlTable) {
              return;
            }

            var tfoot = tableElement.querySelector('tfoot'); // Coalesce with other sticky updates (and potentially other changes like column resize).

            this._scheduleStyleChanges(function () {
              if (stickyStates.some(function (state) {
                return !state;
              })) {
                _this10._removeStickyStyle(tfoot, ['bottom']);
              } else {
                _this10._addStickyStyle(tfoot, 'bottom', 0, false);
              }
            });
          }
          /**
           * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating
           * the zIndex, removing each of the provided sticky directions, and removing the
           * sticky position if there are no more directions.
           */

        }, {
          key: "_removeStickyStyle",
          value: function _removeStickyStyle(element, stickyDirections) {
            var _iterator8 = _createForOfIteratorHelper(stickyDirections),
                _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var dir = _step8.value;
                element.style[dir] = '';
                element.classList.remove(this._borderCellCss[dir]);
              } // If the element no longer has any more sticky directions, remove sticky positioning and
              // the sticky CSS class.
              // Short-circuit checking element.style[dir] for stickyDirections as they
              // were already removed above.

            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }

            var hasDirection = _STICKY_DIRECTIONS.some(function (dir) {
              return stickyDirections.indexOf(dir) === -1 && element.style[dir];
            });

            if (hasDirection) {
              element.style.zIndex = this._getCalculatedZIndex(element);
            } else {
              // When not hasDirection, _getCalculatedZIndex will always return ''.
              element.style.zIndex = '';

              if (this._needsPositionStickyOnElement) {
                element.style.position = '';
              }

              element.classList.remove(this._stickCellCss);
            }
          }
          /**
           * Adds the sticky styling to the element by adding the sticky style class, changing position
           * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky
           * direction and value.
           */

        }, {
          key: "_addStickyStyle",
          value: function _addStickyStyle(element, dir, dirValue, isBorderElement) {
            element.classList.add(this._stickCellCss);

            if (isBorderElement) {
              element.classList.add(this._borderCellCss[dir]);
            }

            element.style[dir] = "".concat(dirValue, "px");
            element.style.zIndex = this._getCalculatedZIndex(element);

            if (this._needsPositionStickyOnElement) {
              element.style.cssText += 'position: -webkit-sticky; position: sticky; ';
            }
          }
          /**
           * Calculate what the z-index should be for the element, depending on what directions (top,
           * bottom, left, right) have been set. It should be true that elements with a top direction
           * should have the highest index since these are elements like a table header. If any of those
           * elements are also sticky in another direction, then they should appear above other elements
           * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements
           * (e.g. footer rows) should then be next in the ordering such that they are below the header
           * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)
           * should minimally increment so that they are above non-sticky elements but below top and bottom
           * elements.
           */

        }, {
          key: "_getCalculatedZIndex",
          value: function _getCalculatedZIndex(element) {
            var zIndexIncrements = {
              top: 100,
              bottom: 10,
              left: 1,
              right: 1
            };
            var zIndex = 0; // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,
            // loses the array generic type in the `for of`. But we *also* have to use `Array` because
            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`

            var _iterator9 = _createForOfIteratorHelper(_STICKY_DIRECTIONS),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var dir = _step9.value;

                if (element.style[dir]) {
                  zIndex += zIndexIncrements[dir];
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            return zIndex ? "".concat(zIndex) : '';
          }
          /** Gets the widths for each cell in the provided row. */

        }, {
          key: "_getCellWidths",
          value: function _getCellWidths(row) {
            var recalculateCellWidths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (!recalculateCellWidths && this._cachedCellWidths.length) {
              return this._cachedCellWidths;
            }

            var cellWidths = [];
            var firstRowCells = row.children;

            for (var i = 0; i < firstRowCells.length; i++) {
              var cell = firstRowCells[i];
              cellWidths.push(cell.getBoundingClientRect().width);
            }

            this._cachedCellWidths = cellWidths;
            return cellWidths;
          }
          /**
           * Determines the left and right positions of each sticky column cell, which will be the
           * accumulation of all sticky column cell widths to the left and right, respectively.
           * Non-sticky cells do not need to have a value set since their positions will not be applied.
           */

        }, {
          key: "_getStickyStartColumnPositions",
          value: function _getStickyStartColumnPositions(widths, stickyStates) {
            var positions = [];
            var nextPosition = 0;

            for (var i = 0; i < widths.length; i++) {
              if (stickyStates[i]) {
                positions[i] = nextPosition;
                nextPosition += widths[i];
              }
            }

            return positions;
          }
          /**
           * Determines the left and right positions of each sticky column cell, which will be the
           * accumulation of all sticky column cell widths to the left and right, respectively.
           * Non-sticky cells do not need to have a value set since their positions will not be applied.
           */

        }, {
          key: "_getStickyEndColumnPositions",
          value: function _getStickyEndColumnPositions(widths, stickyStates) {
            var positions = [];
            var nextPosition = 0;

            for (var i = widths.length; i > 0; i--) {
              if (stickyStates[i]) {
                positions[i] = nextPosition;
                nextPosition += widths[i];
              }
            }

            return positions;
          }
          /**
           * Schedules styles to be applied when the style scheduler deems appropriate.
           * @breaking-change 11.0.0 This method can be removed in favor of calling
           * `CoalescedStyleScheduler.schedule` directly once the scheduler is a required parameter.
           */

        }, {
          key: "_scheduleStyleChanges",
          value: function _scheduleStyleChanges(changes) {
            if (this._coalescedStyleScheduler) {
              this._coalescedStyleScheduler.schedule(changes);
            } else {
              changes();
            }
          }
        }]);

        return _StickyStyler;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Returns an error to be thrown when attempting to find an unexisting column.
       * @param id Id whose lookup failed.
       * @docs-private
       */


      function getTableUnknownColumnError(id) {
        return Error("Could not find column with id \"".concat(id, "\"."));
      }
      /**
       * Returns an error to be thrown when two column definitions have the same name.
       * @docs-private
       */


      function getTableDuplicateColumnNameError(name) {
        return Error("Duplicate column definition name provided: \"".concat(name, "\"."));
      }
      /**
       * Returns an error to be thrown when there are multiple rows that are missing a when function.
       * @docs-private
       */


      function getTableMultipleDefaultRowDefsError() {
        return Error("There can only be one default row without a when predicate function.");
      }
      /**
       * Returns an error to be thrown when there are no matching row defs for a particular set of data.
       * @docs-private
       */


      function getTableMissingMatchingRowDefError(data) {
        return Error("Could not find a matching row definition for the" + "provided row data: ".concat(JSON.stringify(data)));
      }
      /**
       * Returns an error to be thrown when there is no row definitions present in the content.
       * @docs-private
       */


      function getTableMissingRowDefsError() {
        return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');
      }
      /**
       * Returns an error to be thrown when the data source does not match the compatible types.
       * @docs-private
       */


      function getTableUnknownDataSourceError() {
        return Error("Provided data source did not match an array, Observable, or DataSource");
      }
      /**
       * Returns an error to be thrown when the text column cannot find a parent table to inject.
       * @docs-private
       */


      function getTableTextColumnMissingParentTableError() {
        return Error("Text column could not find a parent table for registration.");
      }
      /**
       * Returns an error to be thrown when a table text column doesn't have a name.
       * @docs-private
       */


      function getTableTextColumnMissingNameError() {
        return Error("Table text column must have a name.");
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** The injection token used to specify the StickyPositioningListener. */


      var _STICKY_POSITIONING_LISTENER = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('CDK_SPL');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Provides a handle for the table to grab the view container's ng-container to insert data rows.
       * @docs-private
       */


      var _DataRowOutlet = /*#__PURE__*/function () {
        var DataRowOutlet = function DataRowOutlet(viewContainer, elementRef) {
          _classCallCheck(this, DataRowOutlet);

          this.viewContainer = viewContainer;
          this.elementRef = elementRef;
        };

        DataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {
          return new (t || DataRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        DataRowOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: DataRowOutlet,
          selectors: [["", "rowOutlet", ""]]
        });
        return DataRowOutlet;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Provides a handle for the table to grab the view container's ng-container to insert the header.
       * @docs-private
       */


      var _HeaderRowOutlet = /*#__PURE__*/function () {
        var HeaderRowOutlet = function HeaderRowOutlet(viewContainer, elementRef) {
          _classCallCheck(this, HeaderRowOutlet);

          this.viewContainer = viewContainer;
          this.elementRef = elementRef;
        };

        HeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {
          return new (t || HeaderRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        HeaderRowOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: HeaderRowOutlet,
          selectors: [["", "headerRowOutlet", ""]]
        });
        return HeaderRowOutlet;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Provides a handle for the table to grab the view container's ng-container to insert the footer.
       * @docs-private
       */


      var _FooterRowOutlet = /*#__PURE__*/function () {
        var FooterRowOutlet = function FooterRowOutlet(viewContainer, elementRef) {
          _classCallCheck(this, FooterRowOutlet);

          this.viewContainer = viewContainer;
          this.elementRef = elementRef;
        };

        FooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {
          return new (t || FooterRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        FooterRowOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: FooterRowOutlet,
          selectors: [["", "footerRowOutlet", ""]]
        });
        return FooterRowOutlet;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Provides a handle for the table to grab the view
       * container's ng-container to insert the no data row.
       * @docs-private
       */


      var _NoDataRowOutlet = /*#__PURE__*/function () {
        var NoDataRowOutlet = function NoDataRowOutlet(viewContainer, elementRef) {
          _classCallCheck(this, NoDataRowOutlet);

          this.viewContainer = viewContainer;
          this.elementRef = elementRef;
        };

        NoDataRowOutlet.ɵfac = function NoDataRowOutlet_Factory(t) {
          return new (t || NoDataRowOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        NoDataRowOutlet.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: NoDataRowOutlet,
          selectors: [["", "noDataRowOutlet", ""]]
        });
        return NoDataRowOutlet;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * The table template that can be used by the mat-table. Should not be used outside of the
       * material library.
       * @docs-private
       */


      var _CDK_TABLE_TEMPLATE = // Note that according to MDN, the `caption` element has to be projected as the **first**
      // element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption
      "\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n";
      /**
       * Class used to conveniently type the embedded view ref for rows with a context.
       * @docs-private
       */

      var RowViewRef = /*#__PURE__*/function (_angular_core__WEBPAC) {
        _inherits(RowViewRef, _angular_core__WEBPAC);

        var _super11 = _createSuper(RowViewRef);

        function RowViewRef() {
          _classCallCheck(this, RowViewRef);

          return _super11.apply(this, arguments);
        }

        return RowViewRef;
      }(_angular_core__WEBPACK_IMPORTED_MODULE_0__.EmbeddedViewRef);
      /**
       * A data table that can render a header row, data rows, and a footer row.
       * Uses the dataSource input to determine the data to be rendered. The data can be provided either
       * as a data array, an Observable stream that emits the data array to render, or a DataSource with a
       * connect function that will return an Observable stream that emits the data array to render.
       */


      var _CdkTable = /*#__PURE__*/function () {
        var CdkTable = /*#__PURE__*/function () {
          function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform,
          /**
           * @deprecated `_coalescedStyleScheduler`, `_viewRepeater` and `_viewportRuler`
           *    parameters to become required.
           * @breaking-change 11.0.0
           */
          _viewRepeater, _coalescedStyleScheduler, _stickyPositioningListener, // Optional for backwards compatibility. The viewport ruler is provided in root. Therefore,
          // this property will never be null.
          // tslint:disable-next-line: lightweight-tokens
          _viewportRuler) {
            _classCallCheck(this, CdkTable);

            this._differs = _differs;
            this._changeDetectorRef = _changeDetectorRef;
            this._elementRef = _elementRef;
            this._dir = _dir;
            this._platform = _platform;
            this._viewRepeater = _viewRepeater;
            this._coalescedStyleScheduler = _coalescedStyleScheduler;
            this._stickyPositioningListener = _stickyPositioningListener;
            this._viewportRuler = _viewportRuler;
            /** Subject that emits when the component has been destroyed. */

            this._onDestroy = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();
            /**
             * Map of all the user's defined columns (header, data, and footer cell template) identified by
             * name. Collection populated by the column definitions gathered by `ContentChildren` as well as
             * any custom column definitions added to `_customColumnDefs`.
             */

            this._columnDefsByName = new Map();
            /**
             * Column definitions that were defined outside of the direct content children of the table.
             * These will be defined when, e.g., creating a wrapper around the cdkTable that has
             * column definitions as *its* content child.
             */

            this._customColumnDefs = new Set();
            /**
             * Data row definitions that were defined outside of the direct content children of the table.
             * These will be defined when, e.g., creating a wrapper around the cdkTable that has
             * built-in data rows as *its* content child.
             */

            this._customRowDefs = new Set();
            /**
             * Header row definitions that were defined outside of the direct content children of the table.
             * These will be defined when, e.g., creating a wrapper around the cdkTable that has
             * built-in header rows as *its* content child.
             */

            this._customHeaderRowDefs = new Set();
            /**
             * Footer row definitions that were defined outside of the direct content children of the table.
             * These will be defined when, e.g., creating a wrapper around the cdkTable that has a
             * built-in footer row as *its* content child.
             */

            this._customFooterRowDefs = new Set();
            /**
             * Whether the header row definition has been changed. Triggers an update to the header row after
             * content is checked. Initialized as true so that the table renders the initial set of rows.
             */

            this._headerRowDefChanged = true;
            /**
             * Whether the footer row definition has been changed. Triggers an update to the footer row after
             * content is checked. Initialized as true so that the table renders the initial set of rows.
             */

            this._footerRowDefChanged = true;
            /**
             * Whether the sticky column styles need to be updated. Set to `true` when the visible columns
             * change.
             */

            this._stickyColumnStylesNeedReset = true;
            /**
             * Whether the sticky styler should recalculate cell widths when applying sticky styles. If
             * `false`, cached values will be used instead. This is only applicable to tables with
             * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.
             */

            this._forceRecalculateCellWidths = true;
            /**
             * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing
             * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with
             * the cached `RenderRow` objects when possible, the row identity is preserved when the data
             * and row template matches, which allows the `IterableDiffer` to check rows by reference
             * and understand which rows are added/moved/removed.
             *
             * Implemented as a map of maps where the first key is the `data: T` object and the second is the
             * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that
             * contains an array of created pairs. The array is necessary to handle cases where the data
             * array contains multiple duplicate data objects and each instantiated `RenderRow` must be
             * stored.
             */

            this._cachedRenderRowsMap = new Map();
            /**
             * CSS class added to any row or cell that has sticky positioning applied. May be overriden by
             * table subclasses.
             */

            this.stickyCssClass = 'cdk-table-sticky';
            /**
             * Whether to manually add positon: sticky to all sticky cell elements. Not needed if
             * the position is set in a selector associated with the value of stickyCssClass. May be
             * overridden by table subclasses
             */

            this.needsPositionStickyOnElement = true;
            /** Whether the no data row is currently showing anything. */

            this._isShowingNoDataRow = false;
            this._multiTemplateDataRows = false;
            this._fixedLayout = false; // TODO(andrewseguin): Remove max value as the end index
            //   and instead calculate the view on init and scroll.

            /**
             * Stream containing the latest information on what rows are being displayed on screen.
             * Can be used by the data source to as a heuristic of what data should be provided.
             *
             * @docs-private
             */

            this.viewChange = new rxjs__WEBPACK_IMPORTED_MODULE_7__.BehaviorSubject({
              start: 0,
              end: Number.MAX_VALUE
            });

            if (!role) {
              this._elementRef.nativeElement.setAttribute('role', 'grid');
            }

            this._document = _document;
            this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';
          }
          /**
           * Tracking function that will be used to check the differences in data changes. Used similarly
           * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data
           * relative to the function to know if a row should be added/removed/moved.
           * Accepts a function that takes two parameters, `index` and `item`.
           */


          _createClass(CdkTable, [{
            key: "trackBy",
            get: function get() {
              return this._trackByFn;
            },
            set: function set(fn) {
              if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {
                console.warn("trackBy must be a function, but received ".concat(JSON.stringify(fn), "."));
              }

              this._trackByFn = fn;
            }
            /**
             * The table's source of data, which can be provided in three ways (in order of complexity):
             *   - Simple data array (each object represents one table row)
             *   - Stream that emits a data array each time the array changes
             *   - `DataSource` object that implements the connect/disconnect interface.
             *
             * If a data array is provided, the table must be notified when the array's objects are
             * added, removed, or moved. This can be done by calling the `renderRows()` function which will
             * render the diff since the last table render. If the data array reference is changed, the table
             * will automatically trigger an update to the rows.
             *
             * When providing an Observable stream, the table will trigger an update automatically when the
             * stream emits a new array of data.
             *
             * Finally, when providing a `DataSource` object, the table will use the Observable stream
             * provided by the connect function and trigger updates when that stream emits new data array
             * values. During the table's ngOnDestroy or when the data source is removed from the table, the
             * table will call the DataSource's `disconnect` function (may be useful for cleaning up any
             * subscriptions registered during the connect process).
             */

          }, {
            key: "dataSource",
            get: function get() {
              return this._dataSource;
            },
            set: function set(dataSource) {
              if (this._dataSource !== dataSource) {
                this._switchDataSource(dataSource);
              }
            }
            /**
             * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'
             * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each
             * dataobject will render the first row that evaluates its when predicate to true, in the order
             * defined in the table, or otherwise the default row which does not have a when predicate.
             */

          }, {
            key: "multiTemplateDataRows",
            get: function get() {
              return this._multiTemplateDataRows;
            },
            set: function set(v) {
              this._multiTemplateDataRows = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(v); // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),
              // this setter will be invoked before the row outlet has been defined hence the null check.

              if (this._rowOutlet && this._rowOutlet.viewContainer.length) {
                this._forceRenderDataRows();

                this.updateStickyColumnStyles();
              }
            }
            /**
             * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths
             * and optimize rendering sticky styles for native tables. No-op for flex tables.
             */

          }, {
            key: "fixedLayout",
            get: function get() {
              return this._fixedLayout;
            },
            set: function set(v) {
              this._fixedLayout = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.coerceBooleanProperty)(v); // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.

              this._forceRecalculateCellWidths = true;
              this._stickyColumnStylesNeedReset = true;
            }
          }, {
            key: "ngOnInit",
            value: function ngOnInit() {
              var _this11 = this;

              this._setupStickyStyler();

              if (this._isNativeHtmlTable) {
                this._applyNativeTableSections();
              } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If
              // the user has provided a custom trackBy, return the result of that function as evaluated
              // with the values of the `RenderRow`'s data and index.


              this._dataDiffer = this._differs.find([]).create(function (_i, dataRow) {
                return _this11.trackBy ? _this11.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;
              }); // Table cell dimensions may change after resizing the window. Signal the sticky styler to
              // refresh its cache of cell widths the next time sticky styles are updated.
              // @breaking-change 11.0.0 Remove null check for _viewportRuler once it's a required parameter.

              if (this._viewportRuler) {
                this._viewportRuler.change().pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._onDestroy)).subscribe(function () {
                  _this11._forceRecalculateCellWidths = true;
                });
              }
            }
          }, {
            key: "ngAfterContentChecked",
            value: function ngAfterContentChecked() {
              // Cache the row and column definitions gathered by ContentChildren and programmatic injection.
              this._cacheRowDefs();

              this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.


              if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableMissingRowDefsError();
              } // Render updates if the list of columns have been changed for the header, row, or footer defs.


              var columnsChanged = this._renderUpdatedColumns();

              var rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged; // Ensure sticky column styles are reset if set to `true` elsewhere.

              this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;
              this._forceRecalculateCellWidths = rowDefsChanged; // If the header row definition has been changed, trigger a render to the header row.

              if (this._headerRowDefChanged) {
                this._forceRenderHeaderRows();

                this._headerRowDefChanged = false;
              } // If the footer row definition has been changed, trigger a render to the footer row.


              if (this._footerRowDefChanged) {
                this._forceRenderFooterRows();

                this._footerRowDefChanged = false;
              } // If there is a data source and row definitions, connect to the data source unless a
              // connection has already been made.


              if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {
                this._observeRenderChanges();
              } else if (this._stickyColumnStylesNeedReset) {
                // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being
                // called when it row data arrives. Otherwise, we need to call it proactively.
                this.updateStickyColumnStyles();
              }

              this._checkStickyStates();
            }
          }, {
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              this._rowOutlet.viewContainer.clear();

              this._noDataRowOutlet.viewContainer.clear();

              this._headerRowOutlet.viewContainer.clear();

              this._footerRowOutlet.viewContainer.clear();

              this._cachedRenderRowsMap.clear();

              this._onDestroy.next();

              this._onDestroy.complete();

              if ((0, _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__.isDataSource)(this.dataSource)) {
                this.dataSource.disconnect(this);
              }
            }
            /**
             * Renders rows based on the table's latest set of data, which was either provided directly as an
             * input or retrieved through an Observable stream (directly or from a DataSource).
             * Checks for differences in the data since the last diff to perform only the necessary
             * changes (add/remove/move rows).
             *
             * If the table's data source is a DataSource or Observable, this will be invoked automatically
             * each time the provided Observable stream emits a new data array. Otherwise if your data is
             * an array, this function will need to be called to render any changes.
             */

          }, {
            key: "renderRows",
            value: function renderRows() {
              var _this12 = this;

              this._renderRows = this._getAllRenderRows();

              var changes = this._dataDiffer.diff(this._renderRows);

              if (!changes) {
                this._updateNoDataRow();

                return;
              }

              var viewContainer = this._rowOutlet.viewContainer; // @breaking-change 11.0.0 Remove null check for `_viewRepeater` and the
              // `else` clause once `_viewRepeater` is turned into a required parameter.

              if (this._viewRepeater) {
                this._viewRepeater.applyChanges(changes, viewContainer, function (record, _adjustedPreviousIndex, currentIndex) {
                  return _this12._getEmbeddedViewArgs(record.item, currentIndex);
                }, function (record) {
                  return record.item.data;
                }, function (change) {
                  if (change.operation === 1
                  /* INSERTED */
                  && change.context) {
                    _this12._renderCellTemplateForItem(change.record.item.rowDef, change.context);
                  }
                });
              } else {
                changes.forEachOperation(function (record, prevIndex, currentIndex) {
                  if (record.previousIndex == null) {
                    var renderRow = record.item;
                    var rowDef = renderRow.rowDef;
                    var context = {
                      $implicit: renderRow.data
                    };

                    _this12._renderRow(_this12._rowOutlet, rowDef, currentIndex, context);
                  } else if (currentIndex == null) {
                    viewContainer.remove(prevIndex);
                  } else {
                    var view = viewContainer.get(prevIndex);
                    viewContainer.move(view, currentIndex);
                  }
                });
              } // Update the meta context of a row's context data (index, count, first, last, ...)


              this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,
              // e.g. if trackBy matched data on some property but the actual data reference changed.


              changes.forEachIdentityChange(function (record) {
                var rowView = viewContainer.get(record.currentIndex);
                rowView.context.$implicit = record.item.data;
              });

              this._updateNoDataRow();

              this.updateStickyColumnStyles();
            }
            /** Adds a column definition that was not included as part of the content children. */

          }, {
            key: "addColumnDef",
            value: function addColumnDef(columnDef) {
              this._customColumnDefs.add(columnDef);
            }
            /** Removes a column definition that was not included as part of the content children. */

          }, {
            key: "removeColumnDef",
            value: function removeColumnDef(columnDef) {
              this._customColumnDefs["delete"](columnDef);
            }
            /** Adds a row definition that was not included as part of the content children. */

          }, {
            key: "addRowDef",
            value: function addRowDef(rowDef) {
              this._customRowDefs.add(rowDef);
            }
            /** Removes a row definition that was not included as part of the content children. */

          }, {
            key: "removeRowDef",
            value: function removeRowDef(rowDef) {
              this._customRowDefs["delete"](rowDef);
            }
            /** Adds a header row definition that was not included as part of the content children. */

          }, {
            key: "addHeaderRowDef",
            value: function addHeaderRowDef(headerRowDef) {
              this._customHeaderRowDefs.add(headerRowDef);

              this._headerRowDefChanged = true;
            }
            /** Removes a header row definition that was not included as part of the content children. */

          }, {
            key: "removeHeaderRowDef",
            value: function removeHeaderRowDef(headerRowDef) {
              this._customHeaderRowDefs["delete"](headerRowDef);

              this._headerRowDefChanged = true;
            }
            /** Adds a footer row definition that was not included as part of the content children. */

          }, {
            key: "addFooterRowDef",
            value: function addFooterRowDef(footerRowDef) {
              this._customFooterRowDefs.add(footerRowDef);

              this._footerRowDefChanged = true;
            }
            /** Removes a footer row definition that was not included as part of the content children. */

          }, {
            key: "removeFooterRowDef",
            value: function removeFooterRowDef(footerRowDef) {
              this._customFooterRowDefs["delete"](footerRowDef);

              this._footerRowDefChanged = true;
            }
            /** Sets a no data row definition that was not included as a part of the content children. */

          }, {
            key: "setNoDataRow",
            value: function setNoDataRow(noDataRow) {
              this._customNoDataRow = noDataRow;
            }
            /**
             * Updates the header sticky styles. First resets all applied styles with respect to the cells
             * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is
             * automatically called when the header row changes its displayed set of columns, or if its
             * sticky input changes. May be called manually for cases where the cell content changes outside
             * of these events.
             */

          }, {
            key: "updateStickyHeaderRowStyles",
            value: function updateStickyHeaderRowStyles() {
              var headerRows = this._getRenderedRows(this._headerRowOutlet);

              var tableElement = this._elementRef.nativeElement; // Hide the thead element if there are no header rows. This is necessary to satisfy
              // overzealous a11y checkers that fail because the `rowgroup` element does not contain
              // required child `row`.

              var thead = tableElement.querySelector('thead');

              if (thead) {
                thead.style.display = headerRows.length ? '' : 'none';
              }

              var stickyStates = this._headerRowDefs.map(function (def) {
                return def.sticky;
              });

              this._stickyStyler.clearStickyPositioning(headerRows, ['top']);

              this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.


              this._headerRowDefs.forEach(function (def) {
                return def.resetStickyChanged();
              });
            }
            /**
             * Updates the footer sticky styles. First resets all applied styles with respect to the cells
             * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is
             * automatically called when the footer row changes its displayed set of columns, or if its
             * sticky input changes. May be called manually for cases where the cell content changes outside
             * of these events.
             */

          }, {
            key: "updateStickyFooterRowStyles",
            value: function updateStickyFooterRowStyles() {
              var footerRows = this._getRenderedRows(this._footerRowOutlet);

              var tableElement = this._elementRef.nativeElement; // Hide the tfoot element if there are no footer rows. This is necessary to satisfy
              // overzealous a11y checkers that fail because the `rowgroup` element does not contain
              // required child `row`.

              var tfoot = tableElement.querySelector('tfoot');

              if (tfoot) {
                tfoot.style.display = footerRows.length ? '' : 'none';
              }

              var stickyStates = this._footerRowDefs.map(function (def) {
                return def.sticky;
              });

              this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);

              this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');

              this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.


              this._footerRowDefs.forEach(function (def) {
                return def.resetStickyChanged();
              });
            }
            /**
             * Updates the column sticky styles. First resets all applied styles with respect to the cells
             * sticking to the left and right. Then sticky styles are added for the left and right according
             * to the column definitions for each cell in each row. This is automatically called when
             * the data source provides a new set of data or when a column definition changes its sticky
             * input. May be called manually for cases where the cell content changes outside of these events.
             */

          }, {
            key: "updateStickyColumnStyles",
            value: function updateStickyColumnStyles() {
              var _this13 = this;

              var headerRows = this._getRenderedRows(this._headerRowOutlet);

              var dataRows = this._getRenderedRows(this._rowOutlet);

              var footerRows = this._getRenderedRows(this._footerRowOutlet); // For tables not using a fixed layout, the column widths may change when new rows are rendered.
              // In a table using a fixed layout, row content won't affect column width, so sticky styles
              // don't need to be cleared unless either the sticky column config changes or one of the row
              // defs change.


              if (this._isNativeHtmlTable && !this._fixedLayout || this._stickyColumnStylesNeedReset) {
                // Clear the left and right positioning from all columns in the table across all rows since
                // sticky columns span across all table sections (header, data, footer)
                this._stickyStyler.clearStickyPositioning([].concat(_toConsumableArray(headerRows), _toConsumableArray(dataRows), _toConsumableArray(footerRows)), ['left', 'right']);

                this._stickyColumnStylesNeedReset = false;
              } // Update the sticky styles for each header row depending on the def's sticky state


              headerRows.forEach(function (headerRow, i) {
                _this13._addStickyColumnStyles([headerRow], _this13._headerRowDefs[i]);
              }); // Update the sticky styles for each data row depending on its def's sticky state

              this._rowDefs.forEach(function (rowDef) {
                // Collect all the rows rendered with this row definition.
                var rows = [];

                for (var i = 0; i < dataRows.length; i++) {
                  if (_this13._renderRows[i].rowDef === rowDef) {
                    rows.push(dataRows[i]);
                  }
                }

                _this13._addStickyColumnStyles(rows, rowDef);
              }); // Update the sticky styles for each footer row depending on the def's sticky state


              footerRows.forEach(function (footerRow, i) {
                _this13._addStickyColumnStyles([footerRow], _this13._footerRowDefs[i]);
              }); // Reset the dirty state of the sticky input change since it has been used.

              Array.from(this._columnDefsByName.values()).forEach(function (def) {
                return def.resetStickyChanged();
              });
            }
            /**
             * Get the list of RenderRow objects to render according to the current list of data and defined
             * row definitions. If the previous list already contained a particular pair, it should be reused
             * so that the differ equates their references.
             */

          }, {
            key: "_getAllRenderRows",
            value: function _getAllRenderRows() {
              var renderRows = []; // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the
              // new cache while unused ones can be picked up by garbage collection.

              var prevCachedRenderRows = this._cachedRenderRowsMap;
              this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the
              // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.

              for (var i = 0; i < this._data.length; i++) {
                var data = this._data[i];

                var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));

                if (!this._cachedRenderRowsMap.has(data)) {
                  this._cachedRenderRowsMap.set(data, new WeakMap());
                }

                for (var j = 0; j < renderRowsForData.length; j++) {
                  var renderRow = renderRowsForData[j];

                  var cache = this._cachedRenderRowsMap.get(renderRow.data);

                  if (cache.has(renderRow.rowDef)) {
                    cache.get(renderRow.rowDef).push(renderRow);
                  } else {
                    cache.set(renderRow.rowDef, [renderRow]);
                  }

                  renderRows.push(renderRow);
                }
              }

              return renderRows;
            }
            /**
             * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that
             * should be rendered for this data. Reuses the cached RenderRow objects if they match the same
             * `(T, CdkRowDef)` pair.
             */

          }, {
            key: "_getRenderRowsForData",
            value: function _getRenderRowsForData(data, dataIndex, cache) {
              var rowDefs = this._getRowDefs(data, dataIndex);

              return rowDefs.map(function (rowDef) {
                var cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];

                if (cachedRenderRows.length) {
                  var dataRow = cachedRenderRows.shift();
                  dataRow.dataIndex = dataIndex;
                  return dataRow;
                } else {
                  return {
                    data: data,
                    rowDef: rowDef,
                    dataIndex: dataIndex
                  };
                }
              });
            }
            /** Update the map containing the content's column definitions. */

          }, {
            key: "_cacheColumnDefs",
            value: function _cacheColumnDefs() {
              var _this14 = this;

              this._columnDefsByName.clear();

              var columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);
              columnDefs.forEach(function (columnDef) {
                if (_this14._columnDefsByName.has(columnDef.name) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                  throw getTableDuplicateColumnNameError(columnDef.name);
                }

                _this14._columnDefsByName.set(columnDef.name, columnDef);
              });
            }
            /** Update the list of all available row definitions that can be used. */

          }, {
            key: "_cacheRowDefs",
            value: function _cacheRowDefs() {
              this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);
              this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);
              this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs); // After all row definitions are determined, find the row definition to be considered default.

              var defaultRowDefs = this._rowDefs.filter(function (def) {
                return !def.when;
              });

              if (!this.multiTemplateDataRows && defaultRowDefs.length > 1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableMultipleDefaultRowDefsError();
              }

              this._defaultRowDef = defaultRowDefs[0];
            }
            /**
             * Check if the header, data, or footer rows have changed what columns they want to display or
             * whether the sticky states have changed for the header or footer. If there is a diff, then
             * re-render that section.
             */

          }, {
            key: "_renderUpdatedColumns",
            value: function _renderUpdatedColumns() {
              var columnsDiffReducer = function columnsDiffReducer(acc, def) {
                return acc || !!def.getColumnsDiff();
              }; // Force re-render data rows if the list of column definitions have changed.


              var dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);

              if (dataColumnsChanged) {
                this._forceRenderDataRows();
              } // Force re-render header/footer rows if the list of column definitions have changed.


              var headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);

              if (headerColumnsChanged) {
                this._forceRenderHeaderRows();
              }

              var footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);

              if (footerColumnsChanged) {
                this._forceRenderFooterRows();
              }

              return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;
            }
            /**
             * Switch to the provided data source by resetting the data and unsubscribing from the current
             * render change subscription if one exists. If the data source is null, interpret this by
             * clearing the row outlet. Otherwise start listening for new data.
             */

          }, {
            key: "_switchDataSource",
            value: function _switchDataSource(dataSource) {
              this._data = [];

              if ((0, _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__.isDataSource)(this.dataSource)) {
                this.dataSource.disconnect(this);
              } // Stop listening for data from the previous data source.


              if (this._renderChangeSubscription) {
                this._renderChangeSubscription.unsubscribe();

                this._renderChangeSubscription = null;
              }

              if (!dataSource) {
                if (this._dataDiffer) {
                  this._dataDiffer.diff([]);
                }

                this._rowOutlet.viewContainer.clear();
              }

              this._dataSource = dataSource;
            }
            /** Set up a subscription for the data provided by the data source. */

          }, {
            key: "_observeRenderChanges",
            value: function _observeRenderChanges() {
              var _this15 = this;

              // If no data source has been set, there is nothing to observe for changes.
              if (!this.dataSource) {
                return;
              }

              var dataStream;

              if ((0, _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__.isDataSource)(this.dataSource)) {
                dataStream = this.dataSource.connect(this);
              } else if ((0, rxjs__WEBPACK_IMPORTED_MODULE_8__.isObservable)(this.dataSource)) {
                dataStream = this.dataSource;
              } else if (Array.isArray(this.dataSource)) {
                dataStream = (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(this.dataSource);
              }

              if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableUnknownDataSourceError();
              }

              this._renderChangeSubscription = dataStream.pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._onDestroy)).subscribe(function (data) {
                _this15._data = data || [];

                _this15.renderRows();
              });
            }
            /**
             * Clears any existing content in the header row outlet and creates a new embedded view
             * in the outlet using the header row definition.
             */

          }, {
            key: "_forceRenderHeaderRows",
            value: function _forceRenderHeaderRows() {
              var _this16 = this;

              // Clear the header row outlet if any content exists.
              if (this._headerRowOutlet.viewContainer.length > 0) {
                this._headerRowOutlet.viewContainer.clear();
              }

              this._headerRowDefs.forEach(function (def, i) {
                return _this16._renderRow(_this16._headerRowOutlet, def, i);
              });

              this.updateStickyHeaderRowStyles();
            }
            /**
             * Clears any existing content in the footer row outlet and creates a new embedded view
             * in the outlet using the footer row definition.
             */

          }, {
            key: "_forceRenderFooterRows",
            value: function _forceRenderFooterRows() {
              var _this17 = this;

              // Clear the footer row outlet if any content exists.
              if (this._footerRowOutlet.viewContainer.length > 0) {
                this._footerRowOutlet.viewContainer.clear();
              }

              this._footerRowDefs.forEach(function (def, i) {
                return _this17._renderRow(_this17._footerRowOutlet, def, i);
              });

              this.updateStickyFooterRowStyles();
            }
            /** Adds the sticky column styles for the rows according to the columns' stick states. */

          }, {
            key: "_addStickyColumnStyles",
            value: function _addStickyColumnStyles(rows, rowDef) {
              var _this18 = this;

              var columnDefs = Array.from(rowDef.columns || []).map(function (columnName) {
                var columnDef = _this18._columnDefsByName.get(columnName);

                if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                  throw getTableUnknownColumnError(columnName);
                }

                return columnDef;
              });
              var stickyStartStates = columnDefs.map(function (columnDef) {
                return columnDef.sticky;
              });
              var stickyEndStates = columnDefs.map(function (columnDef) {
                return columnDef.stickyEnd;
              });

              this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);
            }
            /** Gets the list of rows that have been rendered in the row outlet. */

          }, {
            key: "_getRenderedRows",
            value: function _getRenderedRows(rowOutlet) {
              var renderedRows = [];

              for (var i = 0; i < rowOutlet.viewContainer.length; i++) {
                var viewRef = rowOutlet.viewContainer.get(i);
                renderedRows.push(viewRef.rootNodes[0]);
              }

              return renderedRows;
            }
            /**
             * Get the matching row definitions that should be used for this row data. If there is only
             * one row definition, it is returned. Otherwise, find the row definitions that has a when
             * predicate that returns true with the data. If none return true, return the default row
             * definition.
             */

          }, {
            key: "_getRowDefs",
            value: function _getRowDefs(data, dataIndex) {
              if (this._rowDefs.length == 1) {
                return [this._rowDefs[0]];
              }

              var rowDefs = [];

              if (this.multiTemplateDataRows) {
                rowDefs = this._rowDefs.filter(function (def) {
                  return !def.when || def.when(dataIndex, data);
                });
              } else {
                var rowDef = this._rowDefs.find(function (def) {
                  return def.when && def.when(dataIndex, data);
                }) || this._defaultRowDef;

                if (rowDef) {
                  rowDefs.push(rowDef);
                }
              }

              if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableMissingMatchingRowDefError(data);
              }

              return rowDefs;
            }
          }, {
            key: "_getEmbeddedViewArgs",
            value: function _getEmbeddedViewArgs(renderRow, index) {
              var rowDef = renderRow.rowDef;
              var context = {
                $implicit: renderRow.data
              };
              return {
                templateRef: rowDef.template,
                context: context,
                index: index
              };
            }
            /**
             * Creates a new row template in the outlet and fills it with the set of cell templates.
             * Optionally takes a context to provide to the row and cells, as well as an optional index
             * of where to place the new row template in the outlet.
             */

          }, {
            key: "_renderRow",
            value: function _renderRow(outlet, rowDef, index) {
              var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
              // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView
              var view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);

              this._renderCellTemplateForItem(rowDef, context);

              return view;
            }
          }, {
            key: "_renderCellTemplateForItem",
            value: function _renderCellTemplateForItem(rowDef, context) {
              var _iterator10 = _createForOfIteratorHelper(this._getCellTemplates(rowDef)),
                  _step10;

              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var cellTemplate = _step10.value;

                  if (_CdkCellOutlet.mostRecentCellOutlet) {
                    _CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);
                  }
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }

              this._changeDetectorRef.markForCheck();
            }
            /**
             * Updates the index-related context for each row to reflect any changes in the index of the rows,
             * e.g. first/last/even/odd.
             */

          }, {
            key: "_updateRowIndexContext",
            value: function _updateRowIndexContext() {
              var viewContainer = this._rowOutlet.viewContainer;

              for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {
                var viewRef = viewContainer.get(renderIndex);
                var context = viewRef.context;
                context.count = count;
                context.first = renderIndex === 0;
                context.last = renderIndex === count - 1;
                context.even = renderIndex % 2 === 0;
                context.odd = !context.even;

                if (this.multiTemplateDataRows) {
                  context.dataIndex = this._renderRows[renderIndex].dataIndex;
                  context.renderIndex = renderIndex;
                } else {
                  context.index = this._renderRows[renderIndex].dataIndex;
                }
              }
            }
            /** Gets the column definitions for the provided row def. */

          }, {
            key: "_getCellTemplates",
            value: function _getCellTemplates(rowDef) {
              var _this19 = this;

              if (!rowDef || !rowDef.columns) {
                return [];
              }

              return Array.from(rowDef.columns, function (columnId) {
                var column = _this19._columnDefsByName.get(columnId);

                if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                  throw getTableUnknownColumnError(columnId);
                }

                return rowDef.extractCellTemplate(column);
              });
            }
            /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */

          }, {
            key: "_applyNativeTableSections",
            value: function _applyNativeTableSections() {
              var documentFragment = this._document.createDocumentFragment();

              var sections = [{
                tag: 'thead',
                outlets: [this._headerRowOutlet]
              }, {
                tag: 'tbody',
                outlets: [this._rowOutlet, this._noDataRowOutlet]
              }, {
                tag: 'tfoot',
                outlets: [this._footerRowOutlet]
              }];

              for (var _i2 = 0, _sections = sections; _i2 < _sections.length; _i2++) {
                var section = _sections[_i2];

                var element = this._document.createElement(section.tag);

                element.setAttribute('role', 'rowgroup');

                var _iterator11 = _createForOfIteratorHelper(section.outlets),
                    _step11;

                try {
                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                    var outlet = _step11.value;
                    element.appendChild(outlet.elementRef.nativeElement);
                  }
                } catch (err) {
                  _iterator11.e(err);
                } finally {
                  _iterator11.f();
                }

                documentFragment.appendChild(element);
              } // Use a DocumentFragment so we don't hit the DOM on each iteration.


              this._elementRef.nativeElement.appendChild(documentFragment);
            }
            /**
             * Forces a re-render of the data rows. Should be called in cases where there has been an input
             * change that affects the evaluation of which rows should be rendered, e.g. toggling
             * `multiTemplateDataRows` or adding/removing row definitions.
             */

          }, {
            key: "_forceRenderDataRows",
            value: function _forceRenderDataRows() {
              this._dataDiffer.diff([]);

              this._rowOutlet.viewContainer.clear();

              this.renderRows();
            }
            /**
             * Checks if there has been a change in sticky states since last check and applies the correct
             * sticky styles. Since checking resets the "dirty" state, this should only be performed once
             * during a change detection and after the inputs are settled (after content check).
             */

          }, {
            key: "_checkStickyStates",
            value: function _checkStickyStates() {
              var stickyCheckReducer = function stickyCheckReducer(acc, d) {
                return acc || d.hasStickyChanged();
              }; // Note that the check needs to occur for every definition since it notifies the definition
              // that it can reset its dirty state. Using another operator like `some` may short-circuit
              // remaining definitions and leave them in an unchecked state.


              if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {
                this.updateStickyHeaderRowStyles();
              }

              if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {
                this.updateStickyFooterRowStyles();
              }

              if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {
                this._stickyColumnStylesNeedReset = true;
                this.updateStickyColumnStyles();
              }
            }
            /**
             * Creates the sticky styler that will be used for sticky rows and columns. Listens
             * for directionality changes and provides the latest direction to the styler. Re-applies column
             * stickiness when directionality changes.
             */

          }, {
            key: "_setupStickyStyler",
            value: function _setupStickyStyler() {
              var _this20 = this;

              var direction = this._dir ? this._dir.value : 'ltr';
              this._stickyStyler = new _StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);
              (this._dir ? this._dir.change : (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.of)()).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.takeUntil)(this._onDestroy)).subscribe(function (value) {
                _this20._stickyStyler.direction = value;

                _this20.updateStickyColumnStyles();
              });
            }
            /** Filters definitions that belong to this table from a QueryList. */

          }, {
            key: "_getOwnDefs",
            value: function _getOwnDefs(items) {
              var _this21 = this;

              return items.filter(function (item) {
                return !item._table || item._table === _this21;
              });
            }
            /** Creates or removes the no data row, depending on whether any data is being shown. */

          }, {
            key: "_updateNoDataRow",
            value: function _updateNoDataRow() {
              var noDataRow = this._customNoDataRow || this._noDataRow;

              if (noDataRow) {
                var shouldShow = this._rowOutlet.viewContainer.length === 0;

                if (shouldShow !== this._isShowingNoDataRow) {
                  var container = this._noDataRowOutlet.viewContainer;
                  shouldShow ? container.createEmbeddedView(noDataRow.templateRef) : container.clear();
                  this._isShowingNoDataRow = shouldShow;
                }
              }
            }
          }]);

          return CdkTable;
        }();

        CdkTable.ɵfac = function CdkTable_Factory(t) {
          return new (t || CdkTable)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.IterableDiffers), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('role'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_10__.Directionality, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_11__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_12__.Platform), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__._VIEW_REPEATER_STRATEGY, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_COALESCED_STYLE_SCHEDULER2, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_STICKY_POSITIONING_LISTENER, 12), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__.ViewportRuler, 8));
        };

        CdkTable.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: CdkTable,
          selectors: [["cdk-table"], ["table", "cdk-table", ""]],
          contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkNoDataRow, 5);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkColumnDef, 5);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkRowDef, 5);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkHeaderRowDef, 5);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, _CdkFooterRowDef, 5);
            }

            if (rf & 2) {
              var _t;

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._noDataRow = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._contentColumnDefs = _t);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._contentRowDefs = _t);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._contentHeaderRowDefs = _t);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._contentFooterRowDefs = _t);
            }
          },
          viewQuery: function CdkTable_Query(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_DataRowOutlet, 7);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_HeaderRowOutlet, 7);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_FooterRowOutlet, 7);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_NoDataRowOutlet, 7);
            }

            if (rf & 2) {
              var _t;

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._rowOutlet = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._headerRowOutlet = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._footerRowOutlet = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._noDataRowOutlet = _t.first);
            }
          },
          hostAttrs: [1, "cdk-table"],
          hostVars: 2,
          hostBindings: function CdkTable_HostBindings(rf, ctx) {
            if (rf & 2) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("cdk-table-fixed-layout", ctx.fixedLayout);
            }
          },
          inputs: {
            trackBy: "trackBy",
            dataSource: "dataSource",
            multiTemplateDataRows: "multiTemplateDataRows",
            fixedLayout: "fixedLayout"
          },
          exportAs: ["cdkTable"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _CDK_TABLE,
            useExisting: CdkTable
          }, {
            provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__._VIEW_REPEATER_STRATEGY,
            useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_1__._DisposeViewRepeaterStrategy
          }, {
            provide: _COALESCED_STYLE_SCHEDULER2,
            useClass: _CoalescedStyleScheduler2
          }, // Prevent nested tables from seeing this table's StickyPositioningListener.
          {
            provide: _STICKY_POSITIONING_LISTENER,
            useValue: null
          }])],
          ngContentSelectors: _c1,
          decls: 6,
          vars: 0,
          consts: [["headerRowOutlet", ""], ["rowOutlet", ""], ["noDataRowOutlet", ""], ["footerRowOutlet", ""]],
          template: function CdkTable_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1, 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](2, 0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](3, 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](4, 2);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](5, 3);
            }
          },
          directives: [_HeaderRowOutlet, _DataRowOutlet, _NoDataRowOutlet, _FooterRowOutlet],
          styles: [".cdk-table-fixed-layout{table-layout:fixed}\n"],
          encapsulation: 2
        });
        return CdkTable;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Utility function that gets a merged list of the entries in an array and values of a Set. */


      function mergeArrayAndSet(array, set) {
        return array.concat(Array.from(set));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Column that simply shows text content for the header and row cells. Assumes that the table
       * is using the native table implementation (`<table>`).
       *
       * By default, the name of this column will be the header text and data property accessor.
       * The header text can be overridden with the `headerText` input. Cell values can be overridden with
       * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
       * input.
       */


      var _CdkTextColumn = /*#__PURE__*/function () {
        var CdkTextColumn = /*#__PURE__*/function () {
          function CdkTextColumn( // `CdkTextColumn` is always requiring a table, but we just assert it manually
          // for better error reporting.
          // tslint:disable-next-line: lightweight-tokens
          _table, _options) {
            _classCallCheck(this, CdkTextColumn);

            this._table = _table;
            this._options = _options;
            /** Alignment of the cell values. */

            this.justify = 'start';
            this._options = _options || {};
          }
          /** Column name that should be used to reference this column. */


          _createClass(CdkTextColumn, [{
            key: "name",
            get: function get() {
              return this._name;
            },
            set: function set(name) {
              this._name = name; // With Ivy, inputs can be initialized before static query results are
              // available. In that case, we defer the synchronization until "ngOnInit" fires.

              this._syncColumnDefName();
            }
          }, {
            key: "ngOnInit",
            value: function ngOnInit() {
              this._syncColumnDefName();

              if (this.headerText === undefined) {
                this.headerText = this._createDefaultHeaderText();
              }

              if (!this.dataAccessor) {
                this.dataAccessor = this._options.defaultDataAccessor || function (data, name) {
                  return data[name];
                };
              }

              if (this._table) {
                // Provide the cell and headerCell directly to the table with the static `ViewChild` query,
                // since the columnDef will not pick up its content by the time the table finishes checking
                // its content and initializing the rows.
                this.columnDef.cell = this.cell;
                this.columnDef.headerCell = this.headerCell;

                this._table.addColumnDef(this.columnDef);
              } else if (typeof ngDevMode === 'undefined' || ngDevMode) {
                throw getTableTextColumnMissingParentTableError();
              }
            }
          }, {
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              if (this._table) {
                this._table.removeColumnDef(this.columnDef);
              }
            }
            /**
             * Creates a default header text. Use the options' header text transformation function if one
             * has been provided. Otherwise simply capitalize the column name.
             */

          }, {
            key: "_createDefaultHeaderText",
            value: function _createDefaultHeaderText() {
              var name = this.name;

              if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getTableTextColumnMissingNameError();
              }

              if (this._options && this._options.defaultHeaderTextTransform) {
                return this._options.defaultHeaderTextTransform(name);
              }

              return name[0].toUpperCase() + name.slice(1);
            }
            /** Synchronizes the column definition name with the text column name. */

          }, {
            key: "_syncColumnDefName",
            value: function _syncColumnDefName() {
              if (this.columnDef) {
                this.columnDef.name = this.name;
              }
            }
          }]);

          return CdkTextColumn;
        }();

        CdkTextColumn.ɵfac = function CdkTextColumn_Factory(t) {
          return new (t || CdkTextColumn)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_CdkTable, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_TEXT_COLUMN_OPTIONS, 8));
        };

        CdkTextColumn.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: CdkTextColumn,
          selectors: [["cdk-text-column"]],
          viewQuery: function CdkTextColumn_Query(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_CdkColumnDef, 7);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_CdkCellDef, 7);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_CdkHeaderCellDef, 7);
            }

            if (rf & 2) {
              var _t;

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.columnDef = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.cell = _t.first);
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.headerCell = _t.first);
            }
          },
          inputs: {
            justify: "justify",
            name: "name",
            headerText: "headerText",
            dataAccessor: "dataAccessor"
          },
          decls: 3,
          vars: 0,
          consts: [["cdkColumnDef", ""], ["cdk-header-cell", "", 3, "text-align", 4, "cdkHeaderCellDef"], ["cdk-cell", "", 3, "text-align", 4, "cdkCellDef"], ["cdk-header-cell", ""], ["cdk-cell", ""]],
          template: function CdkTextColumn_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0, 0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, CdkTextColumn_th_1_Template, 2, 3, "th", 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, CdkTextColumn_td_2_Template, 2, 3, "td", 2);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
            }
          },
          directives: [_CdkColumnDef, _CdkHeaderCellDef, _CdkCellDef, _CdkHeaderCell, _CdkCell],
          encapsulation: 2
        });
        return CdkTextColumn;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EXPORTED_DECLARATIONS = [_CdkTable, _CdkRowDef, _CdkCellDef, _CdkCellOutlet, _CdkHeaderCellDef, _CdkFooterCellDef, _CdkColumnDef, _CdkCell, _CdkRow, _CdkHeaderCell, _CdkFooterCell, _CdkHeaderRow, _CdkHeaderRowDef, _CdkFooterRow, _CdkFooterRowDef, _DataRowOutlet, _HeaderRowOutlet, _FooterRowOutlet, _CdkTextColumn, _CdkNoDataRow, _NoDataRowOutlet];

      var _CdkTableModule = /*#__PURE__*/function () {
        var CdkTableModule = function CdkTableModule() {
          _classCallCheck(this, CdkTableModule);
        };

        CdkTableModule.ɵfac = function CdkTableModule_Factory(t) {
          return new (t || CdkTableModule)();
        };

        CdkTableModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
          type: CdkTableModule
        });
        CdkTableModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
          imports: [[_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__.ScrollingModule]]
        });
        return CdkTableModule;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /*#__PURE__*/


      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_CdkTableModule, {
          declarations: function declarations() {
            return [_CdkTable, _CdkRowDef, _CdkCellDef, _CdkCellOutlet, _CdkHeaderCellDef, _CdkFooterCellDef, _CdkColumnDef, _CdkCell, _CdkRow, _CdkHeaderCell, _CdkFooterCell, _CdkHeaderRow, _CdkHeaderRowDef, _CdkFooterRow, _CdkFooterRowDef, _DataRowOutlet, _HeaderRowOutlet, _FooterRowOutlet, _CdkTextColumn, _CdkNoDataRow, _NoDataRowOutlet];
          },
          imports: function imports() {
            return [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_13__.ScrollingModule];
          },
          exports: function exports() {
            return [_CdkTable, _CdkRowDef, _CdkCellDef, _CdkCellOutlet, _CdkHeaderCellDef, _CdkFooterCellDef, _CdkColumnDef, _CdkCell, _CdkRow, _CdkHeaderCell, _CdkFooterCell, _CdkHeaderRow, _CdkHeaderRowDef, _CdkFooterRow, _CdkFooterRowDef, _DataRowOutlet, _HeaderRowOutlet, _FooterRowOutlet, _CdkTextColumn, _CdkNoDataRow, _NoDataRowOutlet];
          }
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    45381: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MAT_SORT_DEFAULT_OPTIONS": function MAT_SORT_DEFAULT_OPTIONS() {
          return (
            /* binding */
            _MAT_SORT_DEFAULT_OPTIONS
          );
        },

        /* harmony export */
        "MAT_SORT_HEADER_INTL_PROVIDER": function MAT_SORT_HEADER_INTL_PROVIDER() {
          return (
            /* binding */
            _MAT_SORT_HEADER_INTL_PROVIDER
          );
        },

        /* harmony export */
        "MAT_SORT_HEADER_INTL_PROVIDER_FACTORY": function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY() {
          return (
            /* binding */
            _MAT_SORT_HEADER_INTL_PROVIDER_FACTORY
          );
        },

        /* harmony export */
        "MatSort": function MatSort() {
          return (
            /* binding */
            _MatSort
          );
        },

        /* harmony export */
        "MatSortHeader": function MatSortHeader() {
          return (
            /* binding */
            _MatSortHeader
          );
        },

        /* harmony export */
        "MatSortHeaderIntl": function MatSortHeaderIntl() {
          return (
            /* binding */
            _MatSortHeaderIntl
          );
        },

        /* harmony export */
        "MatSortModule": function MatSortModule() {
          return (
            /* binding */
            _MatSortModule
          );
        },

        /* harmony export */
        "matSortAnimations": function matSortAnimations() {
          return (
            /* binding */
            _matSortAnimations
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/material/core */
      32220);
      /* harmony import */


      var _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/cdk/keycodes */
      90084);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs */
      89919);
      /* harmony import */


      var _angular_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/animations */
      97175);
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/common */
      54364);
      /* harmony import */


      var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/a11y */
      51606);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** @docs-private */


      var _c0 = ["mat-sort-header", ""];

      function MatSortHeader_div_3_Template(rf, ctx) {
        if (rf & 1) {
          var _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("@arrowPosition.start", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);

            var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r1._disableViewStateAnimation = true;
          })("@arrowPosition.done", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r2);

            var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r3._disableViewStateAnimation = false;
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "div", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "div", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "div", 7);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](5, "div", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@arrowOpacity", ctx_r0._getArrowViewState())("@arrowPosition", ctx_r0._getArrowViewState())("@allowChildren", ctx_r0._getArrowDirectionState());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@indicator", ctx_r0._getArrowDirectionState());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@leftPointer", ctx_r0._getArrowDirectionState());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("@rightPointer", ctx_r0._getArrowDirectionState());
        }
      }

      var _c1 = ["*"];

      function getSortDuplicateSortableIdError(id) {
        return Error("Cannot have two MatSortables with the same id (".concat(id, ")."));
      }
      /** @docs-private */


      function getSortHeaderNotContainedWithinSortError() {
        return Error("MatSortHeader must be placed within a parent element with the MatSort directive.");
      }
      /** @docs-private */


      function getSortHeaderMissingIdError() {
        return Error("MatSortHeader must be provided with a unique id.");
      }
      /** @docs-private */


      function getSortInvalidDirectionError(direction) {
        return Error("".concat(direction, " is not a valid sort direction ('asc' or 'desc')."));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Injection token to be used to override the default options for `mat-sort`. */


      var _MAT_SORT_DEFAULT_OPTIONS = /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('MAT_SORT_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to MatSort.

      /** @docs-private */


      var MatSortBase = function MatSortBase() {
        _classCallCheck(this, MatSortBase);
      };

      var _MatSortMixinBase = /*#__PURE__*/(0, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.mixinInitialized)( /*#__PURE__*/(0, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.mixinDisabled)(MatSortBase));
      /** Container for MatSortables to manage the sort state and provide default sort parameters. */


      var _MatSort = /*#__PURE__*/function () {
        var MatSort = /*#__PURE__*/function (_MatSortMixinBase2) {
          _inherits(MatSort, _MatSortMixinBase2);

          var _super12 = _createSuper(MatSort);

          function MatSort(_defaultOptions) {
            var _this22;

            _classCallCheck(this, MatSort);

            _this22 = _super12.call(this);
            _this22._defaultOptions = _defaultOptions;
            /** Collection of all registered sortables that this directive manages. */

            _this22.sortables = new Map();
            /** Used to notify any child components listening to state changes. */

            _this22._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
            /**
             * The direction to set when an MatSortable is initially sorted.
             * May be overriden by the MatSortable's sort start.
             */

            _this22.start = 'asc';
            _this22._direction = '';
            /** Event emitted when the user changes either the active sort or sort direction. */

            _this22.sortChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
            return _this22;
          }
          /** The sort direction of the currently active MatSortable. */


          _createClass(MatSort, [{
            key: "direction",
            get: function get() {
              return this._direction;
            },
            set: function set(direction) {
              if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
                throw getSortInvalidDirectionError(direction);
              }

              this._direction = direction;
            }
            /**
             * Whether to disable the user from clearing the sort by finishing the sort direction cycle.
             * May be overriden by the MatSortable's disable clear input.
             */

          }, {
            key: "disableClear",
            get: function get() {
              return this._disableClear;
            },
            set: function set(v) {
              this._disableClear = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(v);
            }
            /**
             * Register function to be used by the contained MatSortables. Adds the MatSortable to the
             * collection of MatSortables.
             */

          }, {
            key: "register",
            value: function register(sortable) {
              if (typeof ngDevMode === 'undefined' || ngDevMode) {
                if (!sortable.id) {
                  throw getSortHeaderMissingIdError();
                }

                if (this.sortables.has(sortable.id)) {
                  throw getSortDuplicateSortableIdError(sortable.id);
                }
              }

              this.sortables.set(sortable.id, sortable);
            }
            /**
             * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the
             * collection of contained MatSortables.
             */

          }, {
            key: "deregister",
            value: function deregister(sortable) {
              this.sortables["delete"](sortable.id);
            }
            /** Sets the active sort id and determines the new sort direction. */

          }, {
            key: "sort",
            value: function sort(sortable) {
              if (this.active != sortable.id) {
                this.active = sortable.id;
                this.direction = sortable.start ? sortable.start : this.start;
              } else {
                this.direction = this.getNextSortDirection(sortable);
              }

              this.sortChange.emit({
                active: this.active,
                direction: this.direction
              });
            }
            /** Returns the next sort direction of the active sortable, checking for potential overrides. */

          }, {
            key: "getNextSortDirection",
            value: function getNextSortDirection(sortable) {
              var _a, _b, _c;

              if (!sortable) {
                return '';
              } // Get the sort direction cycle with the potential sortable overrides.


              var disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);
              var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle

              var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;

              if (nextDirectionIndex >= sortDirectionCycle.length) {
                nextDirectionIndex = 0;
              }

              return sortDirectionCycle[nextDirectionIndex];
            }
          }, {
            key: "ngOnInit",
            value: function ngOnInit() {
              this._markInitialized();
            }
          }, {
            key: "ngOnChanges",
            value: function ngOnChanges() {
              this._stateChanges.next();
            }
          }, {
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              this._stateChanges.complete();
            }
          }]);

          return MatSort;
        }(_MatSortMixinBase);

        MatSort.ɵfac = function MatSort_Factory(t) {
          return new (t || MatSort)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MAT_SORT_DEFAULT_OPTIONS, 8));
        };

        MatSort.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatSort,
          selectors: [["", "matSort", ""]],
          hostAttrs: [1, "mat-sort"],
          inputs: {
            disabled: ["matSortDisabled", "disabled"],
            start: ["matSortStart", "start"],
            direction: ["matSortDirection", "direction"],
            disableClear: ["matSortDisableClear", "disableClear"],
            active: ["matSortActive", "active"]
          },
          outputs: {
            sortChange: "matSortChange"
          },
          exportAs: ["matSort"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
        });
        return MatSort;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Returns the sort direction cycle to use given the provided parameters of order and clear. */


      function getSortDirectionCycle(start, disableClear) {
        var sortOrder = ['asc', 'desc'];

        if (start == 'desc') {
          sortOrder.reverse();
        }

        if (!disableClear) {
          sortOrder.push('');
        }

        return sortOrder;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var SORT_ANIMATION_TRANSITION = _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.AnimationDurations.ENTERING + ' ' + _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.AnimationCurves.STANDARD_CURVE;
      /**
       * Animations used by MatSort.
       * @docs-private
       */

      var _matSortAnimations = {
        /** Animation that moves the sort indicator. */
        indicator: /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('indicator', [/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('active-asc, asc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(0px)'
        })),
        /*#__PURE__*/
        // 10px is the height of the sort indicator, minus the width of the pointers
        (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('active-desc, desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(10px)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('active-asc <=> active-desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION))]),

        /** Animation that rotates the left pointer of the indicator based on the sorting direction. */
        leftPointer: /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('leftPointer', [/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('active-asc, asc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'rotate(-45deg)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('active-desc, desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'rotate(45deg)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('active-asc <=> active-desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION))]),

        /** Animation that rotates the right pointer of the indicator based on the sorting direction. */
        rightPointer: /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('rightPointer', [/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('active-asc, asc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'rotate(45deg)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('active-desc, desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'rotate(-45deg)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('active-asc <=> active-desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION))]),

        /** Animation that controls the arrow opacity. */
        arrowOpacity: /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('arrowOpacity', [/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('desc-to-active, asc-to-active, active', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          opacity: 1
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('desc-to-hint, asc-to-hint, hint', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          opacity: .54
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          opacity: 0
        })),
        /*#__PURE__*/
        // Transition between all states except for immediate transitions
        (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => asc, * => desc, * => active, * => hint, * => void', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)('0ms')), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* <=> *', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION))]),

        /**
         * Animation for the translation of the arrow as a whole. States are separated into two
         * groups: ones with animations and others that are immediate. Immediate states are asc, desc,
         * peek, and active. The other states define a specific animation (source-to-destination)
         * and are determined as a function of their prev user-perceived state and what the next state
         * should be.
         */
        arrowPosition: /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('arrowPosition', [
        /*#__PURE__*/
        // Hidden Above => Hint Center
        (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => desc-to-hint, * => desc-to-active', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION, /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.keyframes)([/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(-25%)'
        }), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(0)'
        })]))),
        /*#__PURE__*/
        // Hint Center => Hidden Below
        (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => hint-to-desc, * => active-to-desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION, /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.keyframes)([/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(0)'
        }), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(25%)'
        })]))),
        /*#__PURE__*/
        // Hidden Below => Hint Center
        (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => asc-to-hint, * => asc-to-active', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION, /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.keyframes)([/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(25%)'
        }), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(0)'
        })]))),
        /*#__PURE__*/
        // Hint Center => Hidden Above
        (0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* => hint-to-asc, * => active-to-asc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animate)(SORT_ANIMATION_TRANSITION, /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.keyframes)([/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(0)'
        }), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(-25%)'
        })]))), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(0)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('hint-to-desc, active-to-desc, desc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(-25%)'
        })), /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.state)('hint-to-asc, active-to-asc, asc', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.style)({
          transform: 'translateY(25%)'
        }))]),

        /** Necessary trigger that calls animate on children animations. */
        allowChildren: /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.trigger)('allowChildren', [/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.transition)('* <=> *', [/*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.query)('@*', /*#__PURE__*/(0, _angular_animations__WEBPACK_IMPORTED_MODULE_4__.animateChild)(), {
          optional: true
        })])])
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and
       * include it in a custom provider.
       */

      var _MatSortHeaderIntl = /*#__PURE__*/function () {
        var MatSortHeaderIntl = function MatSortHeaderIntl() {
          _classCallCheck(this, MatSortHeaderIntl);

          /**
           * Stream that emits whenever the labels here are changed. Use this to notify
           * components if the labels have changed after initialization.
           */
          this.changes = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();
          /**
           * ARIA label for the sorting button.
           * @deprecated Not used anymore. To be removed.
           * @breaking-change 8.0.0
           */

          this.sortButtonLabel = function (id) {
            return "Change sorting for ".concat(id);
          };
        };

        MatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {
          return new (t || MatSortHeaderIntl)();
        };

        MatSortHeaderIntl.ɵprov = (0, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
          factory: function MatSortHeaderIntl_Factory() {
            return new MatSortHeaderIntl();
          },
          token: MatSortHeaderIntl,
          providedIn: "root"
        });
        return MatSortHeaderIntl;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** @docs-private */


      function _MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {
        return parentIntl || new _MatSortHeaderIntl();
      }
      /** @docs-private */


      var _MAT_SORT_HEADER_INTL_PROVIDER = {
        // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.
        provide: _MatSortHeaderIntl,
        deps: [[/*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), /*#__PURE__*/new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), _MatSortHeaderIntl]],
        useFactory: _MAT_SORT_HEADER_INTL_PROVIDER_FACTORY
      };
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */
      // Boilerplate for applying mixins to the sort header.

      /** @docs-private */

      var MatSortHeaderBase = function MatSortHeaderBase() {
        _classCallCheck(this, MatSortHeaderBase);
      };

      var _MatSortHeaderMixinBase = /*#__PURE__*/(0, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.mixinDisabled)(MatSortHeaderBase);
      /**
       * Applies sorting behavior (click to change sort) and styles to an element, including an
       * arrow to display the current sort direction.
       *
       * Must be provided with an id and contained within a parent MatSort directive.
       *
       * If used on header cells in a CdkTable, it will automatically default its id from its containing
       * column definition.
       */


      var _MatSortHeader = /*#__PURE__*/function () {
        var MatSortHeader = /*#__PURE__*/function (_MatSortHeaderMixinBa) {
          _inherits(MatSortHeader, _MatSortHeaderMixinBa);

          var _super13 = _createSuper(MatSortHeader);

          function MatSortHeader(_intl, _changeDetectorRef, // `MatSort` is not optionally injected, but just asserted manually w/ better error.
          // tslint:disable-next-line: lightweight-tokens
          _sort, _columnDef, _focusMonitor, _elementRef) {
            var _this23;

            _classCallCheck(this, MatSortHeader);

            // Note that we use a string token for the `_columnDef`, because the value is provided both by
            // `material/table` and `cdk/table` and we can't have the CDK depending on Material,
            // and we want to avoid having the sort header depending on the CDK table because
            // of this single reference.
            _this23 = _super13.call(this);
            _this23._intl = _intl;
            _this23._changeDetectorRef = _changeDetectorRef;
            _this23._sort = _sort;
            _this23._columnDef = _columnDef;
            _this23._focusMonitor = _focusMonitor;
            _this23._elementRef = _elementRef;
            /**
             * Flag set to true when the indicator should be displayed while the sort is not active. Used to
             * provide an affordance that the header is sortable by showing on focus and hover.
             */

            _this23._showIndicatorHint = false;
            /**
             * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`
             * position through the animation. If animations are currently disabled, the fromState is removed
             * so that there is no animation displayed.
             */

            _this23._viewState = {};
            /** The direction the arrow should be facing according to the current state. */

            _this23._arrowDirection = '';
            /**
             * Whether the view state animation should show the transition between the `from` and `to` states.
             */

            _this23._disableViewStateAnimation = false;
            /** Sets the position of the arrow that displays when sorted. */

            _this23.arrowPosition = 'after';

            if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {
              throw getSortHeaderNotContainedWithinSortError();
            }

            _this23._handleStateChanges();

            return _this23;
          }
          /** Overrides the disable clear value of the containing MatSort for this MatSortable. */


          _createClass(MatSortHeader, [{
            key: "disableClear",
            get: function get() {
              return this._disableClear;
            },
            set: function set(v) {
              this._disableClear = (0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__.coerceBooleanProperty)(v);
            }
          }, {
            key: "ngOnInit",
            value: function ngOnInit() {
              if (!this.id && this._columnDef) {
                this.id = this._columnDef.name;
              } // Initialize the direction of the arrow and set the view state to be immediately that state.


              this._updateArrowDirection();

              this._setAnimationTransitionState({
                toState: this._isSorted() ? 'active' : this._arrowDirection
              });

              this._sort.register(this);
            }
          }, {
            key: "ngAfterViewInit",
            value: function ngAfterViewInit() {
              var _this24 = this;

              // We use the focus monitor because we also want to style
              // things differently based on the focus origin.
              this._focusMonitor.monitor(this._elementRef, true).subscribe(function (origin) {
                var newState = !!origin;

                if (newState !== _this24._showIndicatorHint) {
                  _this24._setIndicatorHintVisible(newState);

                  _this24._changeDetectorRef.markForCheck();
                }
              });
            }
          }, {
            key: "ngOnDestroy",
            value: function ngOnDestroy() {
              this._focusMonitor.stopMonitoring(this._elementRef);

              this._sort.deregister(this);

              this._rerenderSubscription.unsubscribe();
            }
            /**
             * Sets the "hint" state such that the arrow will be semi-transparently displayed as a hint to the
             * user showing what the active sort will become. If set to false, the arrow will fade away.
             */

          }, {
            key: "_setIndicatorHintVisible",
            value: function _setIndicatorHintVisible(visible) {
              // No-op if the sort header is disabled - should not make the hint visible.
              if (this._isDisabled() && visible) {
                return;
              }

              this._showIndicatorHint = visible;

              if (!this._isSorted()) {
                this._updateArrowDirection();

                if (this._showIndicatorHint) {
                  this._setAnimationTransitionState({
                    fromState: this._arrowDirection,
                    toState: 'hint'
                  });
                } else {
                  this._setAnimationTransitionState({
                    fromState: 'hint',
                    toState: this._arrowDirection
                  });
                }
              }
            }
            /**
             * Sets the animation transition view state for the arrow's position and opacity. If the
             * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that
             * no animation appears.
             */

          }, {
            key: "_setAnimationTransitionState",
            value: function _setAnimationTransitionState(viewState) {
              this._viewState = viewState || {}; // If the animation for arrow position state (opacity/translation) should be disabled,
              // remove the fromState so that it jumps right to the toState.

              if (this._disableViewStateAnimation) {
                this._viewState = {
                  toState: viewState.toState
                };
              }
            }
            /** Triggers the sort on this sort header and removes the indicator hint. */

          }, {
            key: "_toggleOnInteraction",
            value: function _toggleOnInteraction() {
              this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.


              if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {
                this._disableViewStateAnimation = true;
              }
            }
          }, {
            key: "_handleClick",
            value: function _handleClick() {
              if (!this._isDisabled()) {
                this._sort.sort(this);
              }
            }
          }, {
            key: "_handleKeydown",
            value: function _handleKeydown(event) {
              if (!this._isDisabled() && (event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__.SPACE || event.keyCode === _angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_5__.ENTER)) {
                event.preventDefault();

                this._toggleOnInteraction();
              }
            }
            /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */

          }, {
            key: "_isSorted",
            value: function _isSorted() {
              return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');
            }
            /** Returns the animation state for the arrow direction (indicator and pointers). */

          }, {
            key: "_getArrowDirectionState",
            value: function _getArrowDirectionState() {
              return "".concat(this._isSorted() ? 'active-' : '').concat(this._arrowDirection);
            }
            /** Returns the arrow position state (opacity, translation). */

          }, {
            key: "_getArrowViewState",
            value: function _getArrowViewState() {
              var fromState = this._viewState.fromState;
              return (fromState ? "".concat(fromState, "-to-") : '') + this._viewState.toState;
            }
            /**
             * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be
             * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently
             * active sorted direction. The reason this is updated through a function is because the direction
             * should only be changed at specific times - when deactivated but the hint is displayed and when
             * the sort is active and the direction changes. Otherwise the arrow's direction should linger
             * in cases such as the sort becoming deactivated but we want to animate the arrow away while
             * preserving its direction, even though the next sort direction is actually different and should
             * only be changed once the arrow displays again (hint or activation).
             */

          }, {
            key: "_updateArrowDirection",
            value: function _updateArrowDirection() {
              this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;
            }
          }, {
            key: "_isDisabled",
            value: function _isDisabled() {
              return this._sort.disabled || this.disabled;
            }
            /**
             * Gets the aria-sort attribute that should be applied to this sort header. If this header
             * is not sorted, returns null so that the attribute is removed from the host element. Aria spec
             * says that the aria-sort property should only be present on one header at a time, so removing
             * ensures this is true.
             */

          }, {
            key: "_getAriaSortAttribute",
            value: function _getAriaSortAttribute() {
              if (!this._isSorted()) {
                return 'none';
              }

              return this._sort.direction == 'asc' ? 'ascending' : 'descending';
            }
            /** Whether the arrow inside the sort header should be rendered. */

          }, {
            key: "_renderArrow",
            value: function _renderArrow() {
              return !this._isDisabled() || this._isSorted();
            }
            /** Handles changes in the sorting state. */

          }, {
            key: "_handleStateChanges",
            value: function _handleStateChanges() {
              var _this25 = this;

              this._rerenderSubscription = (0, rxjs__WEBPACK_IMPORTED_MODULE_6__.merge)(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(function () {
                if (_this25._isSorted()) {
                  _this25._updateArrowDirection(); // Do not show the animation if the header was already shown in the right position.


                  if (_this25._viewState.toState === 'hint' || _this25._viewState.toState === 'active') {
                    _this25._disableViewStateAnimation = true;
                  }

                  _this25._setAnimationTransitionState({
                    fromState: _this25._arrowDirection,
                    toState: 'active'
                  });

                  _this25._showIndicatorHint = false;
                } // If this header was recently active and now no longer sorted, animate away the arrow.


                if (!_this25._isSorted() && _this25._viewState && _this25._viewState.toState === 'active') {
                  _this25._disableViewStateAnimation = false;

                  _this25._setAnimationTransitionState({
                    fromState: 'active',
                    toState: _this25._arrowDirection
                  });
                }

                _this25._changeDetectorRef.markForCheck();
              });
            }
          }]);

          return MatSortHeader;
        }(_MatSortHeaderMixinBase);

        MatSortHeader.ɵfac = function MatSortHeader_Factory(t) {
          return new (t || MatSortHeader)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatSortHeaderIntl), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_MatSort, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"]('MAT_SORT_HEADER_COLUMN_DEF', 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_7__.FocusMonitor), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef));
        };

        MatSortHeader.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: MatSortHeader,
          selectors: [["", "mat-sort-header", ""]],
          hostAttrs: [1, "mat-sort-header"],
          hostVars: 3,
          hostBindings: function MatSortHeader_HostBindings(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function MatSortHeader_click_HostBindingHandler() {
                return ctx._handleClick();
              })("keydown", function MatSortHeader_keydown_HostBindingHandler($event) {
                return ctx._handleKeydown($event);
              })("mouseenter", function MatSortHeader_mouseenter_HostBindingHandler() {
                return ctx._setIndicatorHintVisible(true);
              })("mouseleave", function MatSortHeader_mouseleave_HostBindingHandler() {
                return ctx._setIndicatorHintVisible(false);
              });
            }

            if (rf & 2) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-sort", ctx._getAriaSortAttribute());

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-sort-header-disabled", ctx._isDisabled());
            }
          },
          inputs: {
            disabled: "disabled",
            arrowPosition: "arrowPosition",
            disableClear: "disableClear",
            id: ["mat-sort-header", "id"],
            start: "start"
          },
          exportAs: ["matSortHeader"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
          attrs: _c0,
          ngContentSelectors: _c1,
          decls: 4,
          vars: 6,
          consts: [["role", "button", 1, "mat-sort-header-container", "mat-focus-indicator"], [1, "mat-sort-header-content"], ["class", "mat-sort-header-arrow", 4, "ngIf"], [1, "mat-sort-header-arrow"], [1, "mat-sort-header-stem"], [1, "mat-sort-header-indicator"], [1, "mat-sort-header-pointer-left"], [1, "mat-sort-header-pointer-right"], [1, "mat-sort-header-pointer-middle"]],
          template: function MatSortHeader_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, MatSortHeader_div_3_Template, 6, 6, "div", 2);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
            }

            if (rf & 2) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-sort-header-sorted", ctx._isSorted())("mat-sort-header-position-before", ctx.arrowPosition == "before");

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("tabindex", ctx._isDisabled() ? null : 0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx._renderArrow());
            }
          },
          directives: [_angular_common__WEBPACK_IMPORTED_MODULE_8__.NgIf],
          styles: [".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\n"],
          encapsulation: 2,
          data: {
            animation: [_matSortAnimations.indicator, _matSortAnimations.leftPointer, _matSortAnimations.rightPointer, _matSortAnimations.arrowOpacity, _matSortAnimations.arrowPosition, _matSortAnimations.allowChildren]
          },
          changeDetection: 0
        });
        return MatSortHeader;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var _MatSortModule = /*#__PURE__*/function () {
        var MatSortModule = function MatSortModule() {
          _classCallCheck(this, MatSortModule);
        };

        MatSortModule.ɵfac = function MatSortModule_Factory(t) {
          return new (t || MatSortModule)();
        };

        MatSortModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
          type: MatSortModule
        });
        MatSortModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
          providers: [_MAT_SORT_HEADER_INTL_PROVIDER],
          imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_8__.CommonModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.MatCommonModule]]
        });
        return MatSortModule;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /*#__PURE__*/


      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatSortModule, {
          declarations: function declarations() {
            return [_MatSort, _MatSortHeader];
          },
          imports: function imports() {
            return [_angular_common__WEBPACK_IMPORTED_MODULE_8__.CommonModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__.MatCommonModule];
          },
          exports: function exports() {
            return [_MatSort, _MatSortHeader];
          }
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    54302: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "MatCell": function MatCell() {
          return (
            /* binding */
            _MatCell
          );
        },

        /* harmony export */
        "MatCellDef": function MatCellDef() {
          return (
            /* binding */
            _MatCellDef
          );
        },

        /* harmony export */
        "MatColumnDef": function MatColumnDef() {
          return (
            /* binding */
            _MatColumnDef
          );
        },

        /* harmony export */
        "MatFooterCell": function MatFooterCell() {
          return (
            /* binding */
            _MatFooterCell
          );
        },

        /* harmony export */
        "MatFooterCellDef": function MatFooterCellDef() {
          return (
            /* binding */
            _MatFooterCellDef
          );
        },

        /* harmony export */
        "MatFooterRow": function MatFooterRow() {
          return (
            /* binding */
            _MatFooterRow
          );
        },

        /* harmony export */
        "MatFooterRowDef": function MatFooterRowDef() {
          return (
            /* binding */
            _MatFooterRowDef
          );
        },

        /* harmony export */
        "MatHeaderCell": function MatHeaderCell() {
          return (
            /* binding */
            _MatHeaderCell
          );
        },

        /* harmony export */
        "MatHeaderCellDef": function MatHeaderCellDef() {
          return (
            /* binding */
            _MatHeaderCellDef
          );
        },

        /* harmony export */
        "MatHeaderRow": function MatHeaderRow() {
          return (
            /* binding */
            _MatHeaderRow
          );
        },

        /* harmony export */
        "MatHeaderRowDef": function MatHeaderRowDef() {
          return (
            /* binding */
            _MatHeaderRowDef
          );
        },

        /* harmony export */
        "MatNoDataRow": function MatNoDataRow() {
          return (
            /* binding */
            _MatNoDataRow
          );
        },

        /* harmony export */
        "MatRow": function MatRow() {
          return (
            /* binding */
            _MatRow
          );
        },

        /* harmony export */
        "MatRowDef": function MatRowDef() {
          return (
            /* binding */
            _MatRowDef
          );
        },

        /* harmony export */
        "MatTable": function MatTable() {
          return (
            /* binding */
            _MatTable
          );
        },

        /* harmony export */
        "MatTableDataSource": function MatTableDataSource() {
          return (
            /* binding */
            _MatTableDataSource2
          );
        },

        /* harmony export */
        "MatTableModule": function MatTableModule() {
          return (
            /* binding */
            _MatTableModule
          );
        },

        /* harmony export */
        "MatTextColumn": function MatTextColumn() {
          return (
            /* binding */
            _MatTextColumn
          );
        },

        /* harmony export */
        "_MatTableDataSource": function _MatTableDataSource() {
          return (
            /* binding */
            _MatTableDataSource3
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/table */
      72306);
      /* harmony import */


      var _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/collections */
      62604);
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/core */
      32220);
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      20657);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      76491);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! rxjs */
      89919);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! rxjs */
      81134);
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! rxjs */
      61486);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! rxjs/operators */
      33927);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Wrapper for the CdkTable with Material design styles.
       */


      var _c0 = [[["caption"]], [["colgroup"], ["col"]]];
      var _c1 = ["caption", "colgroup, col"];

      function MatTextColumn_th_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("text-align", ctx_r0.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r0.headerText, " ");
        }
      }

      function MatTextColumn_td_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var data_r2 = ctx.$implicit;

          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("text-align", ctx_r1.justify);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", ctx_r1.dataAccessor(data_r2, ctx_r1.name), " ");
        }
      }

      var _MatTable = /*#__PURE__*/function () {
        var MatTable = /*#__PURE__*/function (_angular_cdk_table__W) {
          _inherits(MatTable, _angular_cdk_table__W);

          var _super14 = _createSuper(MatTable);

          function MatTable() {
            var _this26;

            _classCallCheck(this, MatTable);

            _this26 = _super14.apply(this, arguments);
            /** Overrides the sticky CSS class set by the `CdkTable`. */

            _this26.stickyCssClass = 'mat-table-sticky';
            /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */

            _this26.needsPositionStickyOnElement = false;
            return _this26;
          }

          return MatTable;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkTable);

        MatTable.ɵfac = /*@__PURE__*/function () {
          var ɵMatTable_BaseFactory;
          return function MatTable_Factory(t) {
            return (ɵMatTable_BaseFactory || (ɵMatTable_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatTable)))(t || MatTable);
          };
        }();

        MatTable.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: MatTable,
          selectors: [["mat-table"], ["table", "mat-table", ""]],
          hostAttrs: [1, "mat-table"],
          hostVars: 2,
          hostBindings: function MatTable_HostBindings(rf, ctx) {
            if (rf & 2) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("mat-table-fixed-layout", ctx.fixedLayout);
            }
          },
          exportAs: ["matTable"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([// TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code
          //  is only included in the build if used.
          {
            provide: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__._VIEW_REPEATER_STRATEGY,
            useClass: _angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__._DisposeViewRepeaterStrategy
          }, {
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkTable,
            useExisting: MatTable
          }, {
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CDK_TABLE,
            useExisting: MatTable
          }, {
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__._COALESCED_STYLE_SCHEDULER,
            useClass: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__._CoalescedStyleScheduler
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
          ngContentSelectors: _c1,
          decls: 6,
          vars: 0,
          consts: [["headerRowOutlet", ""], ["rowOutlet", ""], ["noDataRowOutlet", ""], ["footerRowOutlet", ""]],
          template: function MatTable_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"](_c0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](1, 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](2, 0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](3, 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](4, 2);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](5, 3);
            }
          },
          directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.HeaderRowOutlet, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.DataRowOutlet, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.NoDataRowOutlet, _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.FooterRowOutlet],
          styles: ["mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-row::after,mat-header-row::after,mat-footer-row::after{display:inline-block;min-height:inherit;content:\"\"}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\n"],
          encapsulation: 2
        });
        return MatTable;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Cell definition for the mat-table.
       * Captures the template of a column's data row cell as well as cell-specific properties.
       */


      var _MatCellDef = /*#__PURE__*/function () {
        var MatCellDef = /*#__PURE__*/function (_angular_cdk_table__W2) {
          _inherits(MatCellDef, _angular_cdk_table__W2);

          var _super15 = _createSuper(MatCellDef);

          function MatCellDef() {
            _classCallCheck(this, MatCellDef);

            return _super15.apply(this, arguments);
          }

          return MatCellDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkCellDef);

        MatCellDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatCellDef_BaseFactory;
          return function MatCellDef_Factory(t) {
            return (ɵMatCellDef_BaseFactory || (ɵMatCellDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatCellDef)))(t || MatCellDef);
          };
        }();

        MatCellDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatCellDef,
          selectors: [["", "matCellDef", ""]],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkCellDef,
            useExisting: MatCellDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatCellDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Header cell definition for the mat-table.
       * Captures the template of a column's header cell and as well as cell-specific properties.
       */


      var _MatHeaderCellDef = /*#__PURE__*/function () {
        var MatHeaderCellDef = /*#__PURE__*/function (_angular_cdk_table__W3) {
          _inherits(MatHeaderCellDef, _angular_cdk_table__W3);

          var _super16 = _createSuper(MatHeaderCellDef);

          function MatHeaderCellDef() {
            _classCallCheck(this, MatHeaderCellDef);

            return _super16.apply(this, arguments);
          }

          return MatHeaderCellDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderCellDef);

        MatHeaderCellDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatHeaderCellDef_BaseFactory;
          return function MatHeaderCellDef_Factory(t) {
            return (ɵMatHeaderCellDef_BaseFactory || (ɵMatHeaderCellDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderCellDef)))(t || MatHeaderCellDef);
          };
        }();

        MatHeaderCellDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatHeaderCellDef,
          selectors: [["", "matHeaderCellDef", ""]],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderCellDef,
            useExisting: MatHeaderCellDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatHeaderCellDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Footer cell definition for the mat-table.
       * Captures the template of a column's footer cell and as well as cell-specific properties.
       */


      var _MatFooterCellDef = /*#__PURE__*/function () {
        var MatFooterCellDef = /*#__PURE__*/function (_angular_cdk_table__W4) {
          _inherits(MatFooterCellDef, _angular_cdk_table__W4);

          var _super17 = _createSuper(MatFooterCellDef);

          function MatFooterCellDef() {
            _classCallCheck(this, MatFooterCellDef);

            return _super17.apply(this, arguments);
          }

          return MatFooterCellDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterCellDef);

        MatFooterCellDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatFooterCellDef_BaseFactory;
          return function MatFooterCellDef_Factory(t) {
            return (ɵMatFooterCellDef_BaseFactory || (ɵMatFooterCellDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterCellDef)))(t || MatFooterCellDef);
          };
        }();

        MatFooterCellDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatFooterCellDef,
          selectors: [["", "matFooterCellDef", ""]],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterCellDef,
            useExisting: MatFooterCellDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatFooterCellDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Column definition for the mat-table.
       * Defines a set of cells available for a table column.
       */


      var _MatColumnDef = /*#__PURE__*/function () {
        var MatColumnDef = /*#__PURE__*/function (_angular_cdk_table__W5) {
          _inherits(MatColumnDef, _angular_cdk_table__W5);

          var _super18 = _createSuper(MatColumnDef);

          function MatColumnDef() {
            _classCallCheck(this, MatColumnDef);

            return _super18.apply(this, arguments);
          }

          _createClass(MatColumnDef, [{
            key: "name",
            get:
            /** Unique name for this column. */
            function get() {
              return this._name;
            },
            set: function set(name) {
              this._setNameInput(name);
            }
            /**
             * Add "mat-column-" prefix in addition to "cdk-column-" prefix.
             * In the future, this will only add "mat-column-" and columnCssClassName
             * will change from type string[] to string.
             * @docs-private
             */

          }, {
            key: "_updateColumnCssClassName",
            value: function _updateColumnCssClassName() {
              _get(_getPrototypeOf(MatColumnDef.prototype), "_updateColumnCssClassName", this).call(this);

              this._columnCssClassName.push("mat-column-".concat(this.cssClassFriendlyName));
            }
          }]);

          return MatColumnDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkColumnDef);

        MatColumnDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatColumnDef_BaseFactory;
          return function MatColumnDef_Factory(t) {
            return (ɵMatColumnDef_BaseFactory || (ɵMatColumnDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatColumnDef)))(t || MatColumnDef);
          };
        }();

        MatColumnDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatColumnDef,
          selectors: [["", "matColumnDef", ""]],
          inputs: {
            sticky: "sticky",
            name: ["matColumnDef", "name"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkColumnDef,
            useExisting: MatColumnDef
          }, {
            provide: 'MAT_SORT_HEADER_COLUMN_DEF',
            useExisting: MatColumnDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatColumnDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Header cell template container that adds the right classes and role. */


      var _MatHeaderCell = /*#__PURE__*/function () {
        var MatHeaderCell = /*#__PURE__*/function (_angular_cdk_table__W6) {
          _inherits(MatHeaderCell, _angular_cdk_table__W6);

          var _super19 = _createSuper(MatHeaderCell);

          function MatHeaderCell() {
            _classCallCheck(this, MatHeaderCell);

            return _super19.apply(this, arguments);
          }

          return MatHeaderCell;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderCell);

        MatHeaderCell.ɵfac = /*@__PURE__*/function () {
          var ɵMatHeaderCell_BaseFactory;
          return function MatHeaderCell_Factory(t) {
            return (ɵMatHeaderCell_BaseFactory || (ɵMatHeaderCell_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderCell)))(t || MatHeaderCell);
          };
        }();

        MatHeaderCell.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatHeaderCell,
          selectors: [["mat-header-cell"], ["th", "mat-header-cell", ""]],
          hostAttrs: ["role", "columnheader", 1, "mat-header-cell"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatHeaderCell;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Footer cell template container that adds the right classes and role. */


      var _MatFooterCell = /*#__PURE__*/function () {
        var MatFooterCell = /*#__PURE__*/function (_angular_cdk_table__W7) {
          _inherits(MatFooterCell, _angular_cdk_table__W7);

          var _super20 = _createSuper(MatFooterCell);

          function MatFooterCell() {
            _classCallCheck(this, MatFooterCell);

            return _super20.apply(this, arguments);
          }

          return MatFooterCell;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterCell);

        MatFooterCell.ɵfac = /*@__PURE__*/function () {
          var ɵMatFooterCell_BaseFactory;
          return function MatFooterCell_Factory(t) {
            return (ɵMatFooterCell_BaseFactory || (ɵMatFooterCell_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterCell)))(t || MatFooterCell);
          };
        }();

        MatFooterCell.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatFooterCell,
          selectors: [["mat-footer-cell"], ["td", "mat-footer-cell", ""]],
          hostAttrs: ["role", "gridcell", 1, "mat-footer-cell"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatFooterCell;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Cell template container that adds the right classes and role. */


      var _MatCell = /*#__PURE__*/function () {
        var MatCell = /*#__PURE__*/function (_angular_cdk_table__W8) {
          _inherits(MatCell, _angular_cdk_table__W8);

          var _super21 = _createSuper(MatCell);

          function MatCell() {
            _classCallCheck(this, MatCell);

            return _super21.apply(this, arguments);
          }

          return MatCell;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkCell);

        MatCell.ɵfac = /*@__PURE__*/function () {
          var ɵMatCell_BaseFactory;
          return function MatCell_Factory(t) {
            return (ɵMatCell_BaseFactory || (ɵMatCell_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatCell)))(t || MatCell);
          };
        }();

        MatCell.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatCell,
          selectors: [["mat-cell"], ["td", "mat-cell", ""]],
          hostAttrs: ["role", "gridcell", 1, "mat-cell"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatCell;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Header row definition for the mat-table.
       * Captures the header row's template and other header properties such as the columns to display.
       */


      var _MatHeaderRowDef = /*#__PURE__*/function () {
        var MatHeaderRowDef = /*#__PURE__*/function (_angular_cdk_table__W9) {
          _inherits(MatHeaderRowDef, _angular_cdk_table__W9);

          var _super22 = _createSuper(MatHeaderRowDef);

          function MatHeaderRowDef() {
            _classCallCheck(this, MatHeaderRowDef);

            return _super22.apply(this, arguments);
          }

          return MatHeaderRowDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderRowDef);

        MatHeaderRowDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatHeaderRowDef_BaseFactory;
          return function MatHeaderRowDef_Factory(t) {
            return (ɵMatHeaderRowDef_BaseFactory || (ɵMatHeaderRowDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderRowDef)))(t || MatHeaderRowDef);
          };
        }();

        MatHeaderRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatHeaderRowDef,
          selectors: [["", "matHeaderRowDef", ""]],
          inputs: {
            columns: ["matHeaderRowDef", "columns"],
            sticky: ["matHeaderRowDefSticky", "sticky"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderRowDef,
            useExisting: MatHeaderRowDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatHeaderRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Footer row definition for the mat-table.
       * Captures the footer row's template and other footer properties such as the columns to display.
       */


      var _MatFooterRowDef = /*#__PURE__*/function () {
        var MatFooterRowDef = /*#__PURE__*/function (_angular_cdk_table__W10) {
          _inherits(MatFooterRowDef, _angular_cdk_table__W10);

          var _super23 = _createSuper(MatFooterRowDef);

          function MatFooterRowDef() {
            _classCallCheck(this, MatFooterRowDef);

            return _super23.apply(this, arguments);
          }

          return MatFooterRowDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterRowDef);

        MatFooterRowDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatFooterRowDef_BaseFactory;
          return function MatFooterRowDef_Factory(t) {
            return (ɵMatFooterRowDef_BaseFactory || (ɵMatFooterRowDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterRowDef)))(t || MatFooterRowDef);
          };
        }();

        MatFooterRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatFooterRowDef,
          selectors: [["", "matFooterRowDef", ""]],
          inputs: {
            columns: ["matFooterRowDef", "columns"],
            sticky: ["matFooterRowDefSticky", "sticky"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterRowDef,
            useExisting: MatFooterRowDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatFooterRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * Data row definition for the mat-table.
       * Captures the data row's template and other properties such as the columns to display and
       * a when predicate that describes when this row should be used.
       */


      var _MatRowDef = /*#__PURE__*/function () {
        var MatRowDef = /*#__PURE__*/function (_angular_cdk_table__W11) {
          _inherits(MatRowDef, _angular_cdk_table__W11);

          var _super24 = _createSuper(MatRowDef);

          function MatRowDef() {
            _classCallCheck(this, MatRowDef);

            return _super24.apply(this, arguments);
          }

          return MatRowDef;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkRowDef);

        MatRowDef.ɵfac = /*@__PURE__*/function () {
          var ɵMatRowDef_BaseFactory;
          return function MatRowDef_Factory(t) {
            return (ɵMatRowDef_BaseFactory || (ɵMatRowDef_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatRowDef)))(t || MatRowDef);
          };
        }();

        MatRowDef.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatRowDef,
          selectors: [["", "matRowDef", ""]],
          inputs: {
            columns: ["matRowDefColumns", "columns"],
            when: ["matRowDefWhen", "when"]
          },
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkRowDef,
            useExisting: MatRowDef
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatRowDef;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Header template container that contains the cell outlet. Adds the right class and role. */


      var _MatHeaderRow = /*#__PURE__*/function () {
        var MatHeaderRow = /*#__PURE__*/function (_angular_cdk_table__W12) {
          _inherits(MatHeaderRow, _angular_cdk_table__W12);

          var _super25 = _createSuper(MatHeaderRow);

          function MatHeaderRow() {
            _classCallCheck(this, MatHeaderRow);

            return _super25.apply(this, arguments);
          }

          return MatHeaderRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderRow);

        MatHeaderRow.ɵfac = /*@__PURE__*/function () {
          var ɵMatHeaderRow_BaseFactory;
          return function MatHeaderRow_Factory(t) {
            return (ɵMatHeaderRow_BaseFactory || (ɵMatHeaderRow_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatHeaderRow)))(t || MatHeaderRow);
          };
        }();

        MatHeaderRow.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: MatHeaderRow,
          selectors: [["mat-header-row"], ["tr", "mat-header-row", ""]],
          hostAttrs: ["role", "row", 1, "mat-header-row"],
          exportAs: ["matHeaderRow"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkHeaderRow,
            useExisting: MatHeaderRow
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
          decls: 1,
          vars: 0,
          consts: [["cdkCellOutlet", ""]],
          template: function MatHeaderRow_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
            }
          },
          directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkCellOutlet],
          encapsulation: 2
        });
        return MatHeaderRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Footer template container that contains the cell outlet. Adds the right class and role. */


      var _MatFooterRow = /*#__PURE__*/function () {
        var MatFooterRow = /*#__PURE__*/function (_angular_cdk_table__W13) {
          _inherits(MatFooterRow, _angular_cdk_table__W13);

          var _super26 = _createSuper(MatFooterRow);

          function MatFooterRow() {
            _classCallCheck(this, MatFooterRow);

            return _super26.apply(this, arguments);
          }

          return MatFooterRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterRow);

        MatFooterRow.ɵfac = /*@__PURE__*/function () {
          var ɵMatFooterRow_BaseFactory;
          return function MatFooterRow_Factory(t) {
            return (ɵMatFooterRow_BaseFactory || (ɵMatFooterRow_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatFooterRow)))(t || MatFooterRow);
          };
        }();

        MatFooterRow.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: MatFooterRow,
          selectors: [["mat-footer-row"], ["tr", "mat-footer-row", ""]],
          hostAttrs: ["role", "row", 1, "mat-footer-row"],
          exportAs: ["matFooterRow"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkFooterRow,
            useExisting: MatFooterRow
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
          decls: 1,
          vars: 0,
          consts: [["cdkCellOutlet", ""]],
          template: function MatFooterRow_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
            }
          },
          directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkCellOutlet],
          encapsulation: 2
        });
        return MatFooterRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Data row template container that contains the cell outlet. Adds the right class and role. */


      var _MatRow = /*#__PURE__*/function () {
        var MatRow = /*#__PURE__*/function (_angular_cdk_table__W14) {
          _inherits(MatRow, _angular_cdk_table__W14);

          var _super27 = _createSuper(MatRow);

          function MatRow() {
            _classCallCheck(this, MatRow);

            return _super27.apply(this, arguments);
          }

          return MatRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkRow);

        MatRow.ɵfac = /*@__PURE__*/function () {
          var ɵMatRow_BaseFactory;
          return function MatRow_Factory(t) {
            return (ɵMatRow_BaseFactory || (ɵMatRow_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatRow)))(t || MatRow);
          };
        }();

        MatRow.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: MatRow,
          selectors: [["mat-row"], ["tr", "mat-row", ""]],
          hostAttrs: ["role", "row", 1, "mat-row"],
          exportAs: ["matRow"],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkRow,
            useExisting: MatRow
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
          decls: 1,
          vars: 0,
          consts: [["cdkCellOutlet", ""]],
          template: function MatRow_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0, 0);
            }
          },
          directives: [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkCellOutlet],
          encapsulation: 2
        });
        return MatRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /** Row that can be used to display a message when no data is shown in the table. */


      var _MatNoDataRow = /*#__PURE__*/function () {
        var MatNoDataRow = /*#__PURE__*/function (_angular_cdk_table__W15) {
          _inherits(MatNoDataRow, _angular_cdk_table__W15);

          var _super28 = _createSuper(MatNoDataRow);

          function MatNoDataRow() {
            _classCallCheck(this, MatNoDataRow);

            return _super28.apply(this, arguments);
          }

          return MatNoDataRow;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkNoDataRow);

        MatNoDataRow.ɵfac = /*@__PURE__*/function () {
          var ɵMatNoDataRow_BaseFactory;
          return function MatNoDataRow_Factory(t) {
            return (ɵMatNoDataRow_BaseFactory || (ɵMatNoDataRow_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatNoDataRow)))(t || MatNoDataRow);
          };
        }();

        MatNoDataRow.ɵdir = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
          type: MatNoDataRow,
          selectors: [["ng-template", "matNoDataRow", ""]],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
            provide: _angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkNoDataRow,
            useExisting: MatNoDataRow
          }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
        });
        return MatNoDataRow;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Column that simply shows text content for the header and row cells. Assumes that the table
       * is using the native table implementation (`<table>`).
       *
       * By default, the name of this column will be the header text and data property accessor.
       * The header text can be overridden with the `headerText` input. Cell values can be overridden with
       * the `dataAccessor` input. Change the text justification to the start or end using the `justify`
       * input.
       */


      var _MatTextColumn = /*#__PURE__*/function () {
        var MatTextColumn = /*#__PURE__*/function (_angular_cdk_table__W16) {
          _inherits(MatTextColumn, _angular_cdk_table__W16);

          var _super29 = _createSuper(MatTextColumn);

          function MatTextColumn() {
            _classCallCheck(this, MatTextColumn);

            return _super29.apply(this, arguments);
          }

          return MatTextColumn;
        }(_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkTextColumn);

        MatTextColumn.ɵfac = /*@__PURE__*/function () {
          var ɵMatTextColumn_BaseFactory;
          return function MatTextColumn_Factory(t) {
            return (ɵMatTextColumn_BaseFactory || (ɵMatTextColumn_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](MatTextColumn)))(t || MatTextColumn);
          };
        }();

        MatTextColumn.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
          type: MatTextColumn,
          selectors: [["mat-text-column"]],
          features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
          decls: 3,
          vars: 0,
          consts: [["matColumnDef", ""], ["mat-header-cell", "", 3, "text-align", 4, "matHeaderCellDef"], ["mat-cell", "", 3, "text-align", 4, "matCellDef"], ["mat-header-cell", ""], ["mat-cell", ""]],
          template: function MatTextColumn_Template(rf, ctx) {
            if (rf & 1) {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0, 0);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, MatTextColumn_th_1_Template, 2, 3, "th", 1);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, MatTextColumn_td_2_Template, 2, 3, "td", 2);

              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
            }
          },
          directives: [_MatColumnDef, _MatHeaderCellDef, _MatCellDef, _MatHeaderCell, _MatCell],
          encapsulation: 2
        });
        return MatTextColumn;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var EXPORTED_DECLARATIONS = [// Table
      _MatTable, // Template defs
      _MatHeaderCellDef, _MatHeaderRowDef, _MatColumnDef, _MatCellDef, _MatRowDef, _MatFooterCellDef, _MatFooterRowDef, // Cell directives
      _MatHeaderCell, _MatCell, _MatFooterCell, // Row directives
      _MatHeaderRow, _MatRow, _MatFooterRow, _MatNoDataRow, _MatTextColumn];

      var _MatTableModule = /*#__PURE__*/function () {
        var MatTableModule = function MatTableModule() {
          _classCallCheck(this, MatTableModule);
        };

        MatTableModule.ɵfac = function MatTableModule_Factory(t) {
          return new (t || MatTableModule)();
        };

        MatTableModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
          type: MatTableModule
        });
        MatTableModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
          imports: [[_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkTableModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__.MatCommonModule], _angular_material_core__WEBPACK_IMPORTED_MODULE_3__.MatCommonModule]
        });
        return MatTableModule;
      }();
      /*#__PURE__*/


      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
      })();
      /*#__PURE__*/


      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](_MatTableModule, {
          declarations: function declarations() {
            return [_MatTable, _MatHeaderCellDef, _MatHeaderRowDef, _MatColumnDef, _MatCellDef, _MatRowDef, _MatFooterCellDef, _MatFooterRowDef, _MatHeaderCell, _MatCell, _MatFooterCell, _MatHeaderRow, _MatRow, _MatFooterRow, _MatNoDataRow, _MatTextColumn];
          },
          imports: function imports() {
            return [_angular_cdk_table__WEBPACK_IMPORTED_MODULE_1__.CdkTableModule, _angular_material_core__WEBPACK_IMPORTED_MODULE_3__.MatCommonModule];
          },
          exports: function exports() {
            return [_angular_material_core__WEBPACK_IMPORTED_MODULE_3__.MatCommonModule, _MatTable, _MatHeaderCellDef, _MatHeaderRowDef, _MatColumnDef, _MatCellDef, _MatRowDef, _MatFooterCellDef, _MatFooterRowDef, _MatHeaderCell, _MatCell, _MatFooterCell, _MatHeaderRow, _MatRow, _MatFooterRow, _MatNoDataRow, _MatTextColumn];
          }
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to
       * flaky browser support and the value not being defined in Closure's typings.
       */


      var MAX_SAFE_INTEGER = 9007199254740991;
      /** Shared base class with MDC-based implementation. */

      var _MatTableDataSource3 = /*#__PURE__*/function (_angular_cdk_collecti) {
        _inherits(_MatTableDataSource3, _angular_cdk_collecti);

        var _super30 = _createSuper(_MatTableDataSource3);

        function _MatTableDataSource3() {
          var _this27;

          var initialData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          _classCallCheck(this, _MatTableDataSource3);

          _this27 = _super30.call(this);
          /** Stream emitting render data to the table (depends on ordered data changes). */

          _this27._renderData = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject([]);
          /** Stream that emits when a new filter string is set on the data source. */

          _this27._filter = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject('');
          /** Used to react to internal changes of the paginator that are made by the data source itself. */

          _this27._internalPageChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__.Subject();
          /**
           * Subscription to the changes that should trigger an update to the table's rendered rows, such
           * as filtering, sorting, pagination, or base data changes.
           */

          _this27._renderChangesSubscription = null;
          /**
           * Data accessor function that is used for accessing data properties for sorting through
           * the default sortData function.
           * This default function assumes that the sort header IDs (which defaults to the column name)
           * matches the data's properties (e.g. column Xyz represents data['Xyz']).
           * May be set to a custom function for different behavior.
           * @param data Data object that is being accessed.
           * @param sortHeaderId The name of the column that represents the data.
           */

          _this27.sortingDataAccessor = function (data, sortHeaderId) {
            var value = data[sortHeaderId];

            if ((0, _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_6__._isNumberValue)(value)) {
              var numberValue = Number(value); // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we
              // leave them as strings. For more info: https://goo.gl/y5vbSg

              return numberValue < MAX_SAFE_INTEGER ? numberValue : value;
            }

            return value;
          };
          /**
           * Gets a sorted copy of the data array based on the state of the MatSort. Called
           * after changes are made to the filtered data or when sort changes are emitted from MatSort.
           * By default, the function retrieves the active sort and its direction and compares data
           * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation
           * of data ordering.
           * @param data The array of data that should be sorted.
           * @param sort The connected MatSort that holds the current sort state.
           */


          _this27.sortData = function (data, sort) {
            var active = sort.active;
            var direction = sort.direction;

            if (!active || direction == '') {
              return data;
            }

            return data.sort(function (a, b) {
              var valueA = _this27.sortingDataAccessor(a, active);

              var valueB = _this27.sortingDataAccessor(b, active); // If there are data in the column that can be converted to a number,
              // it must be ensured that the rest of the data
              // is of the same type so as not to order incorrectly.


              var valueAType = typeof valueA;
              var valueBType = typeof valueB;

              if (valueAType !== valueBType) {
                if (valueAType === 'number') {
                  valueA += '';
                }

                if (valueBType === 'number') {
                  valueB += '';
                }
              } // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if
              // one value exists while the other doesn't. In this case, existing value should come last.
              // This avoids inconsistent results when comparing values to undefined/null.
              // If neither value exists, return 0 (equal).


              var comparatorResult = 0;

              if (valueA != null && valueB != null) {
                // Check if one value is greater than the other; if equal, comparatorResult should remain 0.
                if (valueA > valueB) {
                  comparatorResult = 1;
                } else if (valueA < valueB) {
                  comparatorResult = -1;
                }
              } else if (valueA != null) {
                comparatorResult = 1;
              } else if (valueB != null) {
                comparatorResult = -1;
              }

              return comparatorResult * (direction == 'asc' ? 1 : -1);
            });
          };
          /**
           * Checks if a data object matches the data source's filter string. By default, each data object
           * is converted to a string of its properties and returns true if the filter has
           * at least one occurrence in that string. By default, the filter string has its whitespace
           * trimmed and the match is case-insensitive. May be overridden for a custom implementation of
           * filter matching.
           * @param data Data object used to check against the filter.
           * @param filter Filter string that has been set on the data source.
           * @returns Whether the filter matches against the data
           */


          _this27.filterPredicate = function (data, filter) {
            // Transform the data into a lowercase string of all property values.
            var dataStr = Object.keys(data).reduce(function (currentTerm, key) {
              // Use an obscure Unicode character to delimit the words in the concatenated string.
              // This avoids matches where the values of two columns combined will match the user's query
              // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something
              // that has a very low chance of being typed in by somebody in a text field. This one in
              // particular is "White up-pointing triangle with dot" from
              // https://en.wikipedia.org/wiki/List_of_Unicode_characters
              return currentTerm + data[key] + '◬';
            }, '').toLowerCase(); // Transform the filter by converting it to lowercase and removing whitespace.

            var transformedFilter = filter.trim().toLowerCase();
            return dataStr.indexOf(transformedFilter) != -1;
          };

          _this27._data = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject(initialData);

          _this27._updateChangeSubscription();

          return _this27;
        }
        /** Array of data that should be rendered by the table, where each object represents one row. */


        _createClass(_MatTableDataSource3, [{
          key: "data",
          get: function get() {
            return this._data.value;
          },
          set: function set(data) {
            this._data.next(data); // Normally the `filteredData` is updated by the re-render
            // subscription, but that won't happen if it's inactive.


            if (!this._renderChangesSubscription) {
              this._filterData(data);
            }
          }
          /**
           * Filter term that should be used to filter out objects from the data array. To override how
           * data objects match to this filter string, provide a custom function for filterPredicate.
           */

        }, {
          key: "filter",
          get: function get() {
            return this._filter.value;
          },
          set: function set(filter) {
            this._filter.next(filter); // Normally the `filteredData` is updated by the re-render
            // subscription, but that won't happen if it's inactive.


            if (!this._renderChangesSubscription) {
              this._filterData(this.data);
            }
          }
          /**
           * Instance of the MatSort directive used by the table to control its sorting. Sort changes
           * emitted by the MatSort will trigger an update to the table's rendered data.
           */

        }, {
          key: "sort",
          get: function get() {
            return this._sort;
          },
          set: function set(sort) {
            this._sort = sort;

            this._updateChangeSubscription();
          }
          /**
           * Instance of the MatPaginator component used by the table to control what page of the data is
           * displayed. Page changes emitted by the MatPaginator will trigger an update to the
           * table's rendered data.
           *
           * Note that the data source uses the paginator's properties to calculate which page of data
           * should be displayed. If the paginator receives its properties as template inputs,
           * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been
           * initialized before assigning it to this data source.
           */

        }, {
          key: "paginator",
          get: function get() {
            return this._paginator;
          },
          set: function set(paginator) {
            this._paginator = paginator;

            this._updateChangeSubscription();
          }
          /**
           * Subscribe to changes that should trigger an update to the table's rendered rows. When the
           * changes occur, process the current state of the filter, sort, and pagination along with
           * the provided base data and send it to the table for rendering.
           */

        }, {
          key: "_updateChangeSubscription",
          value: function _updateChangeSubscription() {
            var _this28 = this;

            var _a; // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.
            // The events should emit whenever the component emits a change or initializes, or if no
            // component is provided, a stream with just a null event should be provided.
            // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the
            // pipeline can progress to the next step. Note that the value from these streams are not used,
            // they purely act as a signal to progress in the pipeline.


            var sortChange = this._sort ? (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.merge)(this._sort.sortChange, this._sort.initialized) : (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(null);
            var pageChange = this._paginator ? (0, rxjs__WEBPACK_IMPORTED_MODULE_7__.merge)(this._paginator.page, this._internalPageChanges, this._paginator.initialized) : (0, rxjs__WEBPACK_IMPORTED_MODULE_8__.of)(null);
            var dataStream = this._data; // Watch for base data or filter changes to provide a filtered set of data.

            var filteredData = (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.combineLatest)([dataStream, this._filter]).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.map)(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 1),
                  data = _ref2[0];

              return _this28._filterData(data);
            })); // Watch for filtered data or sort changes to provide an ordered set of data.

            var orderedData = (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.combineLatest)([filteredData, sortChange]).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.map)(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 1),
                  data = _ref4[0];

              return _this28._orderData(data);
            })); // Watch for ordered data or page changes to provide a paged set of data.

            var paginatedData = (0, rxjs__WEBPACK_IMPORTED_MODULE_9__.combineLatest)([orderedData, pageChange]).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.map)(function (_ref5) {
              var _ref6 = _slicedToArray(_ref5, 1),
                  data = _ref6[0];

              return _this28._pageData(data);
            })); // Watched for paged data changes and send the result to the table to render.

            (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            this._renderChangesSubscription = paginatedData.subscribe(function (data) {
              return _this28._renderData.next(data);
            });
          }
          /**
           * Returns a filtered data array where each filter object contains the filter string within
           * the result of the filterTermAccessor function. If no filter is set, returns the data array
           * as provided.
           */

        }, {
          key: "_filterData",
          value: function _filterData(data) {
            var _this29 = this;

            // If there is a filter string, filter out data that does not contain it.
            // Each data object is converted to a string using the function defined by filterTermAccessor.
            // May be overridden for customization.
            this.filteredData = this.filter == null || this.filter === '' ? data : data.filter(function (obj) {
              return _this29.filterPredicate(obj, _this29.filter);
            });

            if (this.paginator) {
              this._updatePaginator(this.filteredData.length);
            }

            return this.filteredData;
          }
          /**
           * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the
           * data array as provided. Uses the default data accessor for data lookup, unless a
           * sortDataAccessor function is defined.
           */

        }, {
          key: "_orderData",
          value: function _orderData(data) {
            // If there is no active sort or direction, return the data without trying to sort.
            if (!this.sort) {
              return data;
            }

            return this.sortData(data.slice(), this.sort);
          }
          /**
           * Returns a paged slice of the provided data array according to the provided MatPaginator's page
           * index and length. If there is no paginator provided, returns the data array as provided.
           */

        }, {
          key: "_pageData",
          value: function _pageData(data) {
            if (!this.paginator) {
              return data;
            }

            var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
            return data.slice(startIndex, startIndex + this.paginator.pageSize);
          }
          /**
           * Updates the paginator to reflect the length of the filtered data, and makes sure that the page
           * index does not exceed the paginator's last page. Values are changed in a resolved promise to
           * guard against making property changes within a round of change detection.
           */

        }, {
          key: "_updatePaginator",
          value: function _updatePaginator(filteredDataLength) {
            var _this30 = this;

            Promise.resolve().then(function () {
              var paginator = _this30.paginator;

              if (!paginator) {
                return;
              }

              paginator.length = filteredDataLength; // If the page index is set beyond the page, reduce it to the last page.

              if (paginator.pageIndex > 0) {
                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;
                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);

                if (newPageIndex !== paginator.pageIndex) {
                  paginator.pageIndex = newPageIndex; // Since the paginator only emits after user-generated changes,
                  // we need our own stream so we know to should re-render the data.

                  _this30._internalPageChanges.next();
                }
              }
            });
          }
          /**
           * Used by the MatTable. Called when it connects to the data source.
           * @docs-private
           */

        }, {
          key: "connect",
          value: function connect() {
            if (!this._renderChangesSubscription) {
              this._updateChangeSubscription();
            }

            return this._renderData;
          }
          /**
           * Used by the MatTable. Called when it disconnects from the data source.
           * @docs-private
           */

        }, {
          key: "disconnect",
          value: function disconnect() {
            var _a;

            (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            this._renderChangesSubscription = null;
          }
        }]);

        return _MatTableDataSource3;
      }(_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_2__.DataSource);
      /**
       * Data source that accepts a client-side data array and includes native support of filtering,
       * sorting (using MatSort), and pagination (using MatPaginator).
       *
       * Allows for sort customization by overriding sortingDataAccessor, which defines how data
       * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,
       * which defines how row data is converted to a string for filter matching.
       *
       * **Note:** This class is meant to be a simple data source to help you get started. As such
       * it isn't equipped to handle some more advanced cases like robust i18n support or server-side
       * interactions. If your app needs to support more advanced use cases, consider implementing your
       * own `DataSource`.
       */


      var _MatTableDataSource2 = /*#__PURE__*/function (_MatTableDataSource4) {
        _inherits(_MatTableDataSource2, _MatTableDataSource4);

        var _super31 = _createSuper(_MatTableDataSource2);

        function _MatTableDataSource2() {
          _classCallCheck(this, _MatTableDataSource2);

          return _super31.apply(this, arguments);
        }

        return _MatTableDataSource2;
      }(_MatTableDataSource3);
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */

      /***/

    },

    /***/
    1584: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "UserService": function UserService() {
          return (
            /* binding */
            _UserService
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs */
      79441);
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs/operators */
      92597);
      /* harmony import */


      var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ../../environments/environment */
      92340);
      /* harmony import */


      var _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ../shared/models/response.model */
      99002);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/core */
      2316);
      /* harmony import */


      var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/common/http */
      53882);
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/router */
      71258);
      /* harmony import */


      var src_app_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! src/app/shared/services/notification.service */
      97161);
      /* harmony import */


      var _shared_services_error_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ../shared/services/error.service */
      44578);

      var _UserService = /*#__PURE__*/function () {
        var UserService = /*#__PURE__*/function () {
          function UserService(http, router, notificationService, errorService) {
            _classCallCheck(this, UserService);

            this.http = http;
            this.router = router;
            this.notificationService = notificationService;
            this.errorService = errorService;
            this.apiUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.url;
            this.companyList = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.companysListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.companyAdminList = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.companyAdminListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.accountantList = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.accountantListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.staffs = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.staffsListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.staffsCreateErrorListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.staffLevels = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.staffLevelsListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.departments = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.departmentsListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.vendors = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.vendorsListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.vendorStaffs = new _shared_models_response_model__WEBPACK_IMPORTED_MODULE_1__.PaginatedResponse();
            this.vendorStaffsListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.isLoadingListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
            this.deactivatingListener = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
          }

          _createClass(UserService, [{
            key: "getIsLoadingListener",
            value: function getIsLoadingListener() {
              return this.isLoadingListener.asObservable();
            }
          }, {
            key: "getCompanyList",
            value: function getCompanyList() {
              var _this31 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex);
              this.http.get("".concat(this.apiUrl, "auth/companys/").concat(query)).subscribe(function (res) {
                _this31.companyList = res;

                _this31.companysListener.next(Object.assign({}, _this31.companyList));
              }, function (err) {});
            }
          }, {
            key: "getCompanyListUpdate",
            value: function getCompanyListUpdate() {
              return this.companysListener.asObservable();
            }
          }, {
            key: "createCompany",
            value: function createCompany(formData) {
              var _this32 = this;

              this.isLoadingListener.next(true);
              this.http.post("".concat(this.apiUrl, "auth/companys/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this32.isLoadingListener.next(false);

                _this32.notificationService.success("Success", "Company onboard successful");

                _this32.router.navigate(["/user/company-list"]);
              }, function (err) {
                console.log(err);
                var errorMessage = err.error.message || err.error.details || err.error.error;

                _this32.notificationService.danger("Error", errorMessage);

                _this32.isLoadingListener.next(false);

                _this32.errorService.handleError(errorMessage);
              });
            }
          }, {
            key: "uploadStaff",
            value: function uploadStaff(employees) {
              var _this33 = this;

              this.http.post("".concat(this.apiUrl, "auth/bulk-employee/"), employees).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                console.log(response);

                _this33.isLoadingListener.next(false);

                _this33.notificationService.success("Successful", "User(s) account created");

                _this33.router.navigate(["/user/staff-list"]);
              }, function (err) {
                console.log(err);
                console.log(err.error);

                _this33.staffsCreateErrorListener.next(err.error); // this.notificationService.danger(`Error`, `An unknown error occured`);


                _this33.isLoadingListener.next(false);

                _this33.errorService.handleError(err.error.message || err.error.details);
              });
            }
          }, {
            key: "deactivateUser",
            value: function deactivateUser(user) {
              var _this34 = this;

              // TODO: refactor code to take either phone or email
              this.http.post("".concat(this.apiUrl, "auth/change-user-status/"), {
                user_email: user.email || user.phone_number,
                status: user.is_active
              }).subscribe(function (response) {
                console.log(response);

                _this34.notificationService.success("Success", response.message);

                _this34.deactivatingListener.next(true);
              }, function (err) {
                console.log(err);

                _this34.notificationService.danger("Error", err.error.message);

                _this34.deactivatingListener.next(true);
              });
              return this.deactivatingListener.asObservable();
            }
          }, {
            key: "getStaffCreationErrorUpdate",
            value: function getStaffCreationErrorUpdate() {
              return this.staffsCreateErrorListener.asObservable();
            }
          }, {
            key: "getCompanyAdminList",
            value: function getCompanyAdminList() {
              var _this35 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var company = arguments.length > 2 ? arguments[2] : undefined;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex, "&").concat(company ? "&company=" + company : "");
              this.http.get("".concat(this.apiUrl, "auth/cmp-adm/").concat(query)).subscribe(function (res) {
                _this35.companyAdminList = res;

                _this35.companyAdminListener.next(Object.assign({}, _this35.companyAdminList));
              }, function (err) {});
            }
          }, {
            key: "getCompanyAdminListUpdate",
            value: function getCompanyAdminListUpdate() {
              return this.companyAdminListener.asObservable();
            }
          }, {
            key: "createCompanyAdmin",
            value: function createCompanyAdmin(formData) {
              var _this36 = this;

              console.log(formData);
              this.isLoadingListener.next(true);
              this.http.post("".concat(this.apiUrl, "auth/cmp-adm/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this36.notificationService.success(response.status, response.message);

                _this36.router.navigate(["/user/company-admin-list"]);

                _this36.isLoadingListener.next(false);
              }, function (err) {
                _this36.notificationService.danger("Error", "An unknown error occured");

                _this36.isLoadingListener.next(false);

                _this36.errorService.handleError(err.error.message || err.error.details);
              });
            }
          }, {
            key: "getAccountantList",
            value: function getAccountantList() {
              var _this37 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var company = arguments.length > 2 ? arguments[2] : undefined;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex, "&").concat(company ? "&company=" + company : "");
              this.http.get("".concat(this.apiUrl, "auth/cmp-act/").concat(query)).subscribe(function (res) {
                _this37.accountantList = res;

                _this37.accountantListener.next(Object.assign({}, _this37.accountantList));
              }, function (err) {});
            }
          }, {
            key: "getAccountantUpdate",
            value: function getAccountantUpdate() {
              return this.accountantListener.asObservable();
            }
          }, {
            key: "createAccountant",
            value: function createAccountant(formData) {
              var _this38 = this;

              this.http.post("".concat(this.apiUrl, "auth/cmp-act/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this38.notificationService.success(response.status, response.message);

                _this38.router.navigate(["/user/accountant-list"]);
              }, function (err) {
                _this38.notificationService.danger("Error", "An unknown error occured"); // this.errorService.handleError(err.error.message);


                _this38.errorService.handleError(err.error.message || err.error.details);
              });
            }
          }, {
            key: "getStaffList",
            value: function getStaffList() {
              var _this39 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex);
              this.http.get("".concat(this.apiUrl, "auth/staffs/").concat(query)).subscribe(function (res) {
                // console.log(res)
                _this39.staffs = res;

                _this39.staffsListener.next(Object.assign({}, _this39.staffs));
              }, function (err) {});
            }
          }, {
            key: "getStaffListUpdate",
            value: function getStaffListUpdate() {
              return this.staffsListener.asObservable();
            }
          }, {
            key: "createStaff",
            value: function createStaff(formData) {
              var _this40 = this;

              this.http.post("".concat(this.apiUrl, "auth/staffs/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this40.notificationService.success("Success", "staff account creation successful");

                _this40.router.navigate(["/staff-list"]);
              }, function (err) {});
            }
          }, {
            key: "createStaffLevel",
            value: function createStaffLevel(formData) {
              var _this41 = this;

              console.log(formData);
              this.http.post("".concat(this.apiUrl, "auth/staff-level/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this41.notificationService.success("Success", "staff Level creation successful");

                _this41.router.navigate(["user/staff-level-list"]);
              }, function (err) {
                _this41.errorService.handleError(err.error.message || err.error.details);

                console.log(err);

                _this41.notificationService.danger("Error", "Department creation was unsuccessful");

                _this41.notificationService.danger("", "".concat(err.error.name || err.name));
              });
            }
          }, {
            key: "getStaffLevels",
            value: function getStaffLevels() {
              var _this42 = this;

              this.http.get("".concat(this.apiUrl, "auth/staff-level/")).subscribe(function (res) {
                console.log(res);
                _this42.staffLevels = res;

                _this42.staffLevelsListener.next(Object.assign({}, _this42.staffLevels));
              }, function (err) {});
              return this.staffLevelsListener.asObservable();
            }
          }, {
            key: "getDepartments",
            value: function getDepartments() {
              var _this43 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex);
              this.http.get("".concat(this.apiUrl, "auth/departments/").concat(query)).subscribe(function (res) {
                _this43.departments = res;

                _this43.departmentsListener.next(Object.assign({}, _this43.departments));
              }, function (err) {});
            }
          }, {
            key: "getDepartmentsUpdate",
            value: function getDepartmentsUpdate() {
              return this.departmentsListener.asObservable();
            }
          }, {
            key: "createDepartment",
            value: function createDepartment(formData) {
              var _this44 = this;

              this.http.post("".concat(this.apiUrl, "auth/departments/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this44.notificationService.success("Success", "Department creation successful");

                _this44.router.navigate(["/user/department-list"]);
              }, function (err) {
                _this44.errorService.handleError(err.error.message || err.error.details);

                _this44.notificationService.danger("Error", "Department creation was unsuccessful");

                _this44.notificationService.danger("", "".concat(err.error.name || err.name));
              });
            }
          }, {
            key: "getVendors",
            value: function getVendors() {
              var _this45 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var company = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex, "&").concat(company ? "&company=" + company : "");
              this.http.get("".concat(this.apiUrl, "auth/vendor/").concat(query)).subscribe(function (res) {
                _this45.vendors = res;

                _this45.vendorsListener.next(Object.assign({}, _this45.vendors));
              }, function (err) {});
            }
          }, {
            key: "getVendorsUpdate",
            value: function getVendorsUpdate() {
              return this.vendorsListener.asObservable();
            }
          }, {
            key: "createVendor",
            value: function createVendor(formData) {
              var _this46 = this;

              this.http.post("".concat(this.apiUrl, "auth/vendor/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this46.notificationService.success("Success", "Vendor account creation successful");

                _this46.router.navigate(["/user/vendor-list"]);
              }, function (err) {
                var errorMessage = err.error.message || err.error.details || err.error.error;

                _this46.notificationService.danger("Error", errorMessage);

                _this46.errorService.handleError(errorMessage);
              });
            }
          }, {
            key: "getVendorStaffs",
            value: function getVendorStaffs() {
              var _this47 = this;

              var pageSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
              var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              var query = "?limit=".concat(pageSize, "&offset=").concat(pageIndex);
              this.http.get("".concat(this.apiUrl, "auth/vendor-staff/").concat(query)).subscribe(function (res) {
                _this47.vendorStaffs = res;

                _this47.vendorStaffsListener.next(Object.assign({}, _this47.vendorStaffs));
              }, function (err) {});
            }
          }, {
            key: "getVendorStaffsUpdate",
            value: function getVendorStaffsUpdate() {
              return this.vendorStaffsListener.asObservable();
            }
          }, {
            key: "createVendorStaff",
            value: function createVendorStaff(formData) {
              var _this48 = this;

              this.http.post("".concat(this.apiUrl, "auth/vendor-staff/"), formData).pipe((0, rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.shareReplay)()).subscribe(function (response) {
                _this48.notificationService.success("Success", "Vendor account creation successful");

                _this48.router.navigate(["/user/vendor-staff-list"]);
              }, function (err) {
                _this48.notificationService.warning("Error", "Account creation was unsuccessful");

                _this48.errorService.handleError(err.error.message || err.error.details);
              });
            }
          }]);

          return UserService;
        }();

        UserService.ɵfac = function UserService_Factory(t) {
          return new (t || UserService)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_angular_router__WEBPACK_IMPORTED_MODULE_8__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](src_app_shared_services_notification_service__WEBPACK_IMPORTED_MODULE_2__.NotificationService), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_shared_services_error_service__WEBPACK_IMPORTED_MODULE_3__.ErrorService));
        };

        UserService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"]({
          token: UserService,
          factory: UserService.ɵfac,
          providedIn: "root"
        });
        return UserService;
      }();
      /***/

    }
  }]);
})();
//# sourceMappingURL=default-node_modules_angular_material___ivy_ngcc___fesm2015_sort_js-node_modules_angular_mate-9356fd-es5.js.map