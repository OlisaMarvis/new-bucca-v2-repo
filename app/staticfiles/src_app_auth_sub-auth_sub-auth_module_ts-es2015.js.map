{"version":3,"file":"src_app_auth_sub-auth_sub-auth_module_ts-es2015.js","mappings":";;;;;;;;;;;;;;;;;;;AAAyH;AAC/B;AAC3C;;AAEP;AACE;AACD;;AAEzC,+DAA+D;AAC/D,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,mGAAmG,2DAAoB,OAAO,eAAe,2DAAoB,KAAK,kCAAkC,gGAAgG,oBAAoB,2DAAoB,OAAO,gCAAgC,eAAe,2DAAoB,KAAK,sCAAsC;AAC1d,IAAI,0DAAmB;AACvB,EAAE;AACF;AACA;AACA,mBAAmB,2DAAoB;AACvC,IAAI,oEAA6B;AACjC,IAAI,oEAA6B;AACjC,IAAI,wDAAiB;AACrB;AACA,uDAAuD;AACvD,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,EAAE;AACF,mBAAmB,2DAAoB;AACvC,IAAI,oEAA6B;AACjC,IAAI,oEAA6B;AACjC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,YAAY,yDAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,+BAA+B,0DAAmB,GAAG,0CAA0C;AAC/F,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,+CAAI;AAClB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,iCAAiC,uDAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAS,GAAG;AACvC,4BAA4B,4BAA4B;AACxD,oEAAoE,uDAAW;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,+DAA+D,kBAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG,GAAG,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+DAA+D,kBAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sCAAsC,+DAAwB;AACnI,yCAAyC,+DAAwB,GAAG,oEAAoE,kBAAkB,aAAa,gCAAgC,kgBAAkgB;AACzsB,QAAQ,wDAAiB;AACzB,MAAM;AACN,QAAQ,wDAAiB;AACzB,OAAO,4BAA4B,QAAQ,iDAAW,EAAE,oDAAc,EAAE,oDAAc,EAAE,gEAA2B,uBAAuB,4DAAuB,EAAE,2DAAsB,EAAE,gEAA2B,IAAI,uBAAuB,oBAAoB,0CAA0C,WAAW,YAAY,kBAAkB,yBAAyB,kBAAkB,eAAe,6EAA6E,iBAAiB,qCAAqC,8BAA8B,WAAW,eAAe,aAAa,qCAAqC,8BAA8B,WAAW,eAAe,aAAa,IAAI;AACxsB;AACA,UAAU;AACV;AACA,oCAAoC,6CAA6C;AACjF,IAAI;AACJ;AACA;AACA;AACA,MAAM;AACN;AACA,WAAW,wBAAwB,6CAA6C,IAAI;AACpF;AACA,eAAe,MAAM,gDAAK,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","sources":["./node_modules/ng-otp-input/__ivy_ngcc__/fesm2015/ng-otp-input.js","./src/app/auth/sub-auth/email-sent/email-sent.component.ts","./src/app/auth/sub-auth/email-sent/email-sent.component.html","./src/app/auth/sub-auth/forgot-password/forgot-password.component.ts","./src/app/auth/sub-auth/forgot-password/forgot-password.component.html","./src/app/auth/sub-auth/reset-password/reset-password.component.ts","./src/app/auth/sub-auth/reset-password/reset-password.component.html","./src/app/auth/sub-auth/sub-auth.module.ts","./src/app/auth/sub-auth/sub-auth.routing.module.ts"],"sourcesContent":["import { Pipe, EventEmitter, Component, Input, Output, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onKeyDown($event); })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onKeyUp($event, i_r3); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"disabledNumberOnly\", !ctx_r1.config.allowNumbersOnly)(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n} }\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, \"input\", 2);\n    ɵngcc0.ɵɵpipe(2, \"keys\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"wrapper \", ctx_r0.config.containerClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n} }\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\nKeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };\nKeysPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"keys\", type: KeysPipe, pure: true });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeysPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'keys'\n            }]\n    }], null, null); })();\n\nclass Config {\r\n}\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        this.inputType = this.getInputType();\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                containerItem.addEventListener('paste', (evt) => this.handlePaste(evt));\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    ifLeftArrow(event) {\r\n        return this.ifKeyCode(event, 37);\r\n    }\r\n    ifRightArrow(event) {\r\n        return this.ifKeyCode(event, 39);\r\n    }\r\n    ifBackspaceOrDelete(event) {\r\n        return (event.key === 'Backspace' ||\r\n            event.key === 'Delete' ||\r\n            this.ifKeyCode(event, 8) ||\r\n            this.ifKeyCode(event, 46));\r\n    }\r\n    ifKeyCode(event, targetCode) {\r\n        const key = event.keyCode || event.charCode;\r\n        // tslint:disable-next-line: triple-equals\r\n        return key == targetCode ? true : false;\r\n    }\r\n    onKeyDown($event) {\r\n        var isSpace = this.ifKeyCode($event, 32);\r\n        if (isSpace) { // prevent space\r\n            return false;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (this.ifRightArrow($event)) {\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (this.ifLeftArrow($event)) {\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        const isBackspace = this.ifBackspaceOrDelete($event);\r\n        if (isBackspace && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidEntry($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidEntry(event) {\r\n        const inp = String.fromCharCode(event.keyCode);\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)) ||\r\n            (event.keyCode >= 96 && event.keyCode <= 105));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        this.onInputChange.emit(val);\r\n    }\r\n    getInputType() {\r\n        return this.config.isPasswordInput\r\n            ? 'password'\r\n            : this.config.allowNumbersOnly\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };\nNgOtpInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [[\"ng-otp-input\"]], inputs: { config: \"config\" }, outputs: { onInputChange: \"onInputChange\" }, decls: 1, vars: 1, consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"keydown\", \"keyup\", 4, \"ngFor\", \"ngForOf\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"formControl\", \"id\", \"keydown\", \"keyup\"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective]; }, pipes: function () { return [KeysPipe]; }, styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"] });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nNgOtpInputComponent.ctorParameters = () => [\r\n    { type: KeysPipe }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nNgOtpInputComponent.propDecorators = {\r\n    config: [{ type: Input }],\r\n    onInputChange: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line: component-selector\n                selector: 'ng-otp-input',\n                template: \"<div class=\\\"wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\" numberOnly [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [disabledNumberOnly]=\\\"!config.allowNumbersOnly\\\" [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" id=\\\"otp_{{i}}_{{componentKey}}\\\" (keydown)=\\\"onKeyDown($event)\\\"\\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\">\\r\\n</div>\",\n                styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"]\n            }]\n    }], function () { return [{ type: KeysPipe }]; }, { config: [{\n            type: Input\n        }], onInputChange: [{\n            type: Output\n        }] }); })();\n\nclass NumberOnlyDirective {\r\n    constructor(_elRef, _renderer) {\r\n        this._elRef = _elRef;\r\n        this._renderer = _renderer;\r\n    }\r\n    ngOnInit() {\r\n        if (!this.disabledNumberOnly) {\r\n            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\r\n        }\r\n    }\r\n}\nNumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nNumberOnlyDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [[\"\", \"numberOnly\", \"\"]], inputs: { disabledNumberOnly: \"disabledNumberOnly\" } });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nNumberOnlyDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nNumberOnlyDirective.propDecorators = {\r\n    disabledNumberOnly: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[numberOnly]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{\n            type: Input\n        }] }); })();\n\nclass NgOtpInputModule {\r\n}\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) { return new (t || NgOtpInputModule)(); };\nNgOtpInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgOtpInputModule });\nNgOtpInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [KeysPipe], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpInputModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    ReactiveFormsModule\n                ],\n                declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],\n                exports: [NgOtpInputComponent],\n                providers: [KeysPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, { declarations: function () { return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective]; }, imports: function () { return [CommonModule,\n        FormsModule,\n        ReactiveFormsModule]; }, exports: function () { return [NgOtpInputComponent]; } }); })();\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, NgOtpInputModule, KeysPipe as ɵa, NumberOnlyDirective as ɵb };\n\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'app-email-sent',\n  templateUrl: './email-sent.component.html',\n  styleUrls: ['./email-sent.component.scss']\n})\nexport class EmailSentComponent implements OnInit {\n  emailPayload: any;\n  isLoading: boolean;\n\n  constructor(\n    private authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.getIsLoadingListener()\n    .subscribe((isLoading) => {\n      this.isLoading = isLoading\n    })\n    this.emailPayload = JSON.parse(localStorage.getItem(\"emailPayload\"))\n  }\n  onResend() {\n    this.authService.forgotPassword(this.emailPayload)\n  }\n\n  onOtpChange(value: string) {\n    if (value.length != 6) {\n      return\n    }\n    this.authService.verifyOTP({\n      ...this.emailPayload, token: value\n    })\n  }\n\n}\n","<div class=\"px-0 mx-0 container-fluid\">\n  <app-auth-navbar></app-auth-navbar>\n  <div class=\"row min-vh-100\">\n    <div class=\"col-lg-6 bg-color1 d-flex justify-content-center align-items-center\">\n      <div class=\"container\">\n        <div class=\"px-4 row\">\n          <h1 class=\"mb-4 heading-1 col-12\">\n            EMAIL SENT\n          </h1>\n          <p class=\"my-5 text-gray col-12\">\n            We’ve sent you an email to\n            <span class=\"text-primary\">\n              {{emailPayload?.email}}\n            </span>\n            for verification.\n            Check your email for the verification link.\n          </p>\n          <!-- <div class=\"text-center col-12\">\n\n          </div> -->\n\n\n          <div class=\"col-auto mx-auto mb-5\">\n            <ng-otp-input  (onInputChange)=\"onOtpChange($event)\"  [config]=\"{length:6}\"></ng-otp-input>\n            <button class=\"mt-2 btn btn-block btn-primary\">\n              <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner\"></i>\n              Verify OTP\n            </button>\n          </div>\n\n          <h3 class=\"text-center col-12 text-gray\">\n            Did not receive the email yet?\n            <a (click)=\"onResend()\" class=\"text-primary\">\n              Resend\n            </a>\n          </h3>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"px-5 col-6 bg-primary d-none d-lg-flex justify-content-center align-items-center\">\n      <img class=\"img-fluid\" src=\"../../../../assets/svg/mail_sent.svg\" alt=\"\">\n      <!-- <div class=\"text-center\">\n      </div> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { HelperService } from \"src/app/shared/services/helper.service\";\nimport { AuthService } from \"../../auth.service\";\n\n@Component({\n  selector: \"app-forgot-password\",\n  templateUrl: \"./forgot-password.component.html\",\n  styleUrls: [\"./forgot-password.component.scss\"],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  hide;\n  private emailRegEx =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  isLoading: boolean;\n\n  constructor(private fb: FormBuilder,\n    private authService: AuthService,\n    private helperService: HelperService) {}\n\n  ngOnInit(): void {\n    this.authService.getIsLoadingListener()\n    .subscribe((isLoading) => {\n      this.isLoading = isLoading\n    })\n    this.hide = false;\n    this.form = this.fb.group({\n      email: [\"\", [Validators.required, Validators.email, Validators.pattern(this.emailRegEx)]],\n    });\n  }\n\n  get email() {\n    return this.form.get(\"email\");\n  }\n\n  onForgotPassword() {\n    this.isLoading = true\n    if (this.form.invalid) {\n      this.isLoading = false\n      this.helperService.validateAllFormFields(this.form)\n      return;\n    }\n\n    this.authService.forgotPassword(this.form.value)\n  }\n}\n","<div class=\"px-0 mx-0 container-fluid\">\n  <app-auth-navbar></app-auth-navbar>\n  <div class=\"row min-vh-100\">\n    <div class=\"col-lg-6 bg-color1 d-flex justify-content-center align-items-center\">\n      <div class=\"container\">\n        <div class=\"mx-auto text-center row\">\n          <h1 class=\"mb-4 text-center heading-1 col-12\">\n            FORGOT PASSWORD\n          </h1>\n          <form [formGroup]=\"form\" class=\"mx-auto example-form col-md-8\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Email</mat-label>\n              <input type=\"email\" matInput formControlName=\"email\" placeholder=\"Ex. pat@example.com\">\n              <!-- <mat-hint>Errors appear instantly!</mat-hint> -->\n              <mat-error *ngIf=\"(email.hasError('email') || email.hasError('pattern') )&& !email.hasError('required')\">\n                Please enter a valid email address\n              </mat-error>\n              <mat-error *ngIf=\"email.hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </form>\n          <p class=\"mt-5 text-gray col-12\">\n            We’ll send a password reset link to your email.\n          </p>\n\n\n          <div class=\"mx-auto col-md-8\">\n            <button (click)=\"onForgotPassword()\" class=\"btn btn-block btn-primary\">\n              <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner mr-2\"></i>\n              SEND\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"px-5 col-6 bg-primary d-none d-lg-flex justify-content-center align-items-center\">\n      <img class=\"img-fluid\" src=\"../../../../assets/svg/forgot_password.svg\" alt=\"\">\n      <!-- <div class=\"text-center\">\n      </div> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from \"@angular/forms\";\nimport { HelperService } from \"src/app/shared/services/helper.service\";\nimport { AuthService } from \"../../auth.service\";\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"./reset-password.component.html\",\n  styleUrls: [\"./reset-password.component.scss\"],\n})\nexport class ResetPasswordComponent implements OnInit {\n  hide;\n  // emailFormControl = new FormControl(\"\", [\n  //   Validators.required,\n  //   Validators.email,\n  // ]);\n  form: FormGroup = new FormGroup({});\n  isLoading: boolean;\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private helperService: HelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.getIsLoadingListener()\n    .subscribe((isLoading) => {\n      this.isLoading = isLoading\n    })\n    this.hide = true;\n    this.form = this.fb.group(\n      {\n        password: [\"\", [Validators.required]],\n        confirm_password: [\"\", [Validators.required]],\n      },\n      {\n        validators: passwordMatch,\n      }\n    );\n  }\n\n  get password() {\n    return this.form.get(\"password\");\n  }\n\n  get confirm_password() {\n    return this.form.get(\"confirm_password\");\n  }\n\n  onReset() {\n    this.isLoading = true\n    if (this.form.invalid) {\n      this.helperService.validateAllFormFields(this.form);\n      this.isLoading = false\n      return;\n    }\n    this.authService.passwordReset(this.form.value);\n  }\n}\n\nfunction passwordMatch(formGroup: FormGroup): ValidationErrors | undefined {\n  const passwordControl = formGroup.get(\"password\");\n  const confirmPasswordControl = formGroup.get(\"confirm_password\");\n\n  if (passwordControl.value === confirmPasswordControl.value) {\n    return null;\n  } else {\n    return {\n      passwordMatch: true,\n    };\n  }\n}\n","<div class=\"px-0 mx-0 container-fluid\">\n  <app-auth-navbar></app-auth-navbar>\n  <div class=\"row min-vh-100\">\n    <div class=\"col-lg-6 bg-color1 d-flex justify-content-center align-items-center\">\n      <div class=\"container\">\n        <div class=\"mx-auto text-center row\">\n          <h1 class=\"mb-4 text-center heading-1 col-12\">\n            RESET PASSWORD\n          </h1>\n          <form autocomplete=\"off\" [formGroup]=\"form\" class=\"mx-auto row example-form col-md-8\">\n            <!-- <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\"> -->\n            <mat-form-field class=\"col-12\" appearance=\"outline\">\n              <mat-label>New password</mat-label>\n              <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\">\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\">\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n              </button>\n            </mat-form-field>\n            <mat-error *ngIf=\"password.invalid && (password.dirty || password.touched)\">\n              <mat-error *ngIf=\"password.hasError('required')\">\n                Password is a required field\n              </mat-error>\n              <mat-error *ngIf=\"!password.hasError('minlength') && password.hasError('pattern')\">\n                password must be alphanumeric\n              </mat-error>\n              <mat-error *ngIf=\"password.hasError('minlength')\">\n                Password must be minimum 8 characters and alphanumeric\n              </mat-error>\n            </mat-error>\n\n            <mat-form-field class=\"col-12\" appearance=\"outline\">\n              <mat-label>Confirm password</mat-label>\n              <input formControlName=\"confirm_password\" matInput [type]=\"hide ? 'password' : 'text'\">\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\">\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n              </button>\n              <!-- <mat-error\n                *ngIf=\"form.hasError('passwordMatch') && form.get('password').touched && form.get('confirm_password').touched\">\n                Passwords Don't Match\n              </mat-error> -->\n            </mat-form-field>\n            <mat-error\n              *ngIf=\"form.hasError('passwordMatch') && form.get('password').touched && form.get('confirm_password').touched\">\n              Passwords Don't Match\n            </mat-error>\n          </form>\n          <p class=\"mt-5 text-gray col-12\">\n            We’ll send a password reset link to your email.\n          </p>\n\n\n          <div class=\"mx-auto col-md-8\">\n            <button (click)=\"onReset()\" class=\"btn btn-block btn-primary\">\n              <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner\"></i>\n              SEND\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"px-5 col-6 bg-primary d-none d-lg-flex justify-content-center align-items-center\">\n      <img class=\"img-fluid\" src=\"../../../../assets/svg/authentication.svg\" alt=\"\">\n      <!-- <div class=\"text-center\">\n      </div> -->\n    </div>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { EmailSentComponent } from './email-sent/email-sent.component';\nimport { ResetPasswordComponent } from \"./reset-password/reset-password.component\";\nimport { SubAuthRoutingModule } from \"./sub-auth.routing.module\";\nimport { LandingModule } from 'src/app/landing/landing.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { NgOtpInputModule } from  'ng-otp-input';\n\n@NgModule({\n  declarations: [\n    ForgotPasswordComponent,\n    ResetPasswordComponent,\n    EmailSentComponent\n  ],\n  imports: [\n    CommonModule,\n    SubAuthRoutingModule,\n    LandingModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    NgOtpInputModule\n  ]\n})\nexport class SubAuthModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EmailSentComponent } from './email-sent/email-sent.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: 'forgot-password',\n    component: ForgotPasswordComponent\n  },\n  {\n    path: 'email-sent',\n    component: EmailSentComponent\n  },\n  {\n    path: 'reset-password',\n    component: ResetPasswordComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SubAuthRoutingModule { }\n"],"names":[],"sourceRoot":"webpack:///"}