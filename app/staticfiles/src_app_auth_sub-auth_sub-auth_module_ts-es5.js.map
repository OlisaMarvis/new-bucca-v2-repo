{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AAA+D;AAC/D,oBAAgBA,gEAAhB;;AACIA,uEAAqB,CAArB,EAAqB,OAArB,EAAqB,CAArB;;AACAA,mEAAiB,SAAjB,EAAiB;AAAmGA,wEAAoBC,GAApB;;AAA2B,yBAAeD,4DAAoB,CAApB,CAAf;;AAAwC;AAAkC,WAAzN,EAAyN,OAAzN,EAAyN;AAAgG,8BAAoBA,4DAAoBC,GAApB,CAApB;;AAA+C;;AAAgC,yBAAeD,4DAAoB,CAApB,CAAf;;AAAwC;AAAsC,WAAtd;;AACAA;AACJ;;AAAE;AACF;AACA;;AACA,uBAAmBA,4DAAoB,CAApB,CAAnB;;AACIA,+EAA6B,YAA7B,EAA6BE,wBAA7B,EAA6B,EAA7B;;AACAF,+EAA6B,IAA7B,EAA6B,MAA7B,EAA6BG,IAA7B,EAA6B,GAA7B,EAA6BD,mBAA7B,EAA6B,EAA7B;;AACAF,mEAAiB,SAAjB,EAAiBE,4CAAjB,EAAiB,MAAjB,EAAiBA,gBAAjB,EAAiB,aAAjB,EAAiB,gEAAjB,EAAiB,oBAAjB,EAAiB,+BAAjB,EAAiB,SAAjB,EAAiBA,yBAAjB,EAAiB,aAAjB,EAAiBA,gCAAjB;AACJ;AAAA;;AACA;AAAuD;AACnDF,uEAAqB,CAArB,EAAqB,KAArB,EAAqB,CAArB;;AACAA,mEAAiB,CAAjB,EAAiBI,0CAAjB,EAAiB,CAAjB,EAAiB,EAAjB,EAAiB,OAAjB,EAAiB,CAAjB;;AACAJ,+DAAa,CAAb,EAAa,MAAb;;AACAA;AACJ;;AAAE;AACF,uBAAmBA,6DAAnB;;AACIA,+EAA6B,UAA7B,EAA6BK,4BAA7B,EAA6B,EAA7B;;AACAL,+EAA6B,IAA7B,EAA6B,IAA7B,EAA6BK,mBAA7B,EAA6B,EAA7B;;AACAL,mEAAiB,SAAjB,EAAiBK,6BAAjB;;AACAL,kEAAgB,CAAhB;;AACAA,mEAAiB,SAAjB,EAA6BA,0DAAkB,CAAlB,EAAkB,CAAlB,EAAkBK,uDAAlB,CAA7B;AACJ;AAAA;;UACAC;;;;;;;iBACA;AACA;AACA;;;;;;AAEAA;AAA+C;AAAA,OAA/C;;AACAA,oCAA+BN,2DAAmB;AAAGO,oBAAH;AAAGC,sBAAH;AAAGC;AAAH,OAAnB,CAA/B;;AACA;AAAe,2DAAmDT,gEAAwBM,QAAxB,EAAwB;AAC1FE,gBAAcR,+CAD4E;AAE1FU;AACAH;AADA;AAF0F,UAAxB,EAK7D,IAL6D,EAK7D,IAL6D,CAAnD;AAKO,OALtB;;UAOAI;;;;UAGAC;AACA;AAAA;;AACA;AACA;AAAwBC;AAAxB,YAFA,CAGA;;AACA,mCAAiCb,uDAAjC;AACA;AACA,4CACAc,QADA,CACA,EADA,EAEAC,SAFA,CAEA,CAFA,IAEA,iCAFA;AAGA;;;;iBACA;AAAA;;AACA,+BAA2BC,qDAA3B,CAAoC,EAApC;;AACA,gCAA4BC,0BAA5B,EAAwDA,OAAxD,EAAwD;AACxD,sEAAoED,uDAApE;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,mBAFA,MAGA;AACA;AACA;AACA;AACa,eAVb;AAWS,aAZT;AAaA;AACA;;;iBACA;AAAA;;AACA;AACA,sEAA+D,iBAA/D;;AACA;AACAE;AAAA;AAAA;AACA;;AACA;AACAC;AACA;AACA;AACA;AACA;;;iBACA;AACA,kCAAuBC,GAAvB;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA,gDACAC,sBADA,IAEA,wBAFA,IAGA,yBAHA;AAIA;;;iBACA;AACA,sDADA,CAEA;;AACA;AACA;;;iBACA;AACA;;AACA;AAAuB;AACvB;AACA;AACA;;;iBACA;AACA,2DAAkDC,YAAlD;AACA,2DAAkDA,YAAlD;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;;;iBACA;AACA,6BAAkBC,EAAlB,cAAwB,iBAAxB;AACA;;;iBACA;AACA;AACA;;AACA;AACAC;AACAL;AACa,eAFb,EAEa,CAFb;AAGA;AACA;;;iBACA;AACA;AACA;AACA,+BACA,yBADA,IAEA,6BACA,iDAHA,IAIAE,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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_0__","_r5","ctx_r1","i_r3","NgOtpInputComponent_div_0_input_1_Template","ctx_r0","KeysPipe","name","type","pure","args","Config","NgOtpInputComponent","length","toString","substring","_angular_forms__WEBPACK_IMPORTED_MODULE_1__","index","containerItem","ele","idx","event","inputIdx","id","setTimeout","value","Array","ctrlVal","isCaseTransformEnabled","val","e","selectors","inputs","config","outputs","onInputChange","decls","vars","consts","template","NgOtpInputComponent_div_0_Template","ctx","directives","_angular_common__WEBPACK_IMPORTED_MODULE_2__","NumberOnlyDirective","pipes","styles","selector","disabledNumberOnly","NgOtpInputModule","providers","imports","declarations","exports","_angular_core__WEBPACK_IMPORTED_MODULE_2__","EmailSentComponent","authService","getIsLoadingListener","subscribe","isLoading","emailPayload","JSON","parse","localStorage","getItem","forgotPassword","verifyOTP","Object","token","_angular_core__WEBPACK_IMPORTED_MODULE_3__","ForgotPasswordComponent","fb","helperService","hide","form","group","email","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","emailRegEx","get","invalid","validateAllFormFields","ResetPasswordComponent","password","confirm_password","validators","passwordMatch","passwordReset","formGroup","passwordControl","confirmPasswordControl","SubAuthModule","_angular_common__WEBPACK_IMPORTED_MODULE_6__","_sub_auth_routing_module__WEBPACK_IMPORTED_MODULE_3__","src_app_landing_landing_module__WEBPACK_IMPORTED_MODULE_4__","_angular_forms__WEBPACK_IMPORTED_MODULE_7__","_angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__","_angular_material_input__WEBPACK_IMPORTED_MODULE_9__","_angular_material_button__WEBPACK_IMPORTED_MODULE_10__","_angular_material_icon__WEBPACK_IMPORTED_MODULE_11__","ng_otp_input__WEBPACK_IMPORTED_MODULE_12__","_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_0__","_reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_2__","_email_sent_email_sent_component__WEBPACK_IMPORTED_MODULE_1__","routes","path","component","_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_1__","_email_sent_email_sent_component__WEBPACK_IMPORTED_MODULE_0__","SubAuthRoutingModule","_angular_router__WEBPACK_IMPORTED_MODULE_4__"],"sources":["webpack:///node_modules/ng-otp-input/__ivy_ngcc__/fesm2015/ng-otp-input.js","webpack:///src/app/auth/sub-auth/email-sent/email-sent.component.html","webpack:///src/app/auth/sub-auth/email-sent/email-sent.component.ts","webpack:///src/app/auth/sub-auth/forgot-password/forgot-password.component.html","webpack:///src/app/auth/sub-auth/forgot-password/forgot-password.component.ts","webpack:///src/app/auth/sub-auth/reset-password/reset-password.component.html","webpack:///src/app/auth/sub-auth/reset-password/reset-password.component.ts","webpack:///src/app/auth/sub-auth/sub-auth.module.ts","webpack:///src/app/auth/sub-auth/sub-auth.routing.module.ts"],"sourcesContent":["import { Pipe, EventEmitter, Component, Input, Output, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onKeyDown($event); })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onKeyUp($event, i_r3); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"disabledNumberOnly\", !ctx_r1.config.allowNumbersOnly)(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n} }\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, \"input\", 2);\n    ɵngcc0.ɵɵpipe(2, \"keys\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"wrapper \", ctx_r0.config.containerClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n} }\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\nKeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };\nKeysPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"keys\", type: KeysPipe, pure: true });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeysPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'keys'\n            }]\n    }], null, null); })();\n\nclass Config {\r\n}\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        this.inputType = this.getInputType();\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                containerItem.addEventListener('paste', (evt) => this.handlePaste(evt));\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    ifLeftArrow(event) {\r\n        return this.ifKeyCode(event, 37);\r\n    }\r\n    ifRightArrow(event) {\r\n        return this.ifKeyCode(event, 39);\r\n    }\r\n    ifBackspaceOrDelete(event) {\r\n        return (event.key === 'Backspace' ||\r\n            event.key === 'Delete' ||\r\n            this.ifKeyCode(event, 8) ||\r\n            this.ifKeyCode(event, 46));\r\n    }\r\n    ifKeyCode(event, targetCode) {\r\n        const key = event.keyCode || event.charCode;\r\n        // tslint:disable-next-line: triple-equals\r\n        return key == targetCode ? true : false;\r\n    }\r\n    onKeyDown($event) {\r\n        var isSpace = this.ifKeyCode($event, 32);\r\n        if (isSpace) { // prevent space\r\n            return false;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (this.ifRightArrow($event)) {\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (this.ifLeftArrow($event)) {\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        const isBackspace = this.ifBackspaceOrDelete($event);\r\n        if (isBackspace && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidEntry($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidEntry(event) {\r\n        const inp = String.fromCharCode(event.keyCode);\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)) ||\r\n            (event.keyCode >= 96 && event.keyCode <= 105));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        this.onInputChange.emit(val);\r\n    }\r\n    getInputType() {\r\n        return this.config.isPasswordInput\r\n            ? 'password'\r\n            : this.config.allowNumbersOnly\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };\nNgOtpInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [[\"ng-otp-input\"]], inputs: { config: \"config\" }, outputs: { onInputChange: \"onInputChange\" }, decls: 1, vars: 1, consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"keydown\", \"keyup\", 4, \"ngFor\", \"ngForOf\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"formControl\", \"id\", \"keydown\", \"keyup\"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective]; }, pipes: function () { return [KeysPipe]; }, styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"] });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nNgOtpInputComponent.ctorParameters = () => [\r\n    { type: KeysPipe }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nNgOtpInputComponent.propDecorators = {\r\n    config: [{ type: Input }],\r\n    onInputChange: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line: component-selector\n                selector: 'ng-otp-input',\n                template: \"<div class=\\\"wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\" numberOnly [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [disabledNumberOnly]=\\\"!config.allowNumbersOnly\\\" [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" id=\\\"otp_{{i}}_{{componentKey}}\\\" (keydown)=\\\"onKeyDown($event)\\\"\\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\">\\r\\n</div>\",\n                styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"]\n            }]\n    }], function () { return [{ type: KeysPipe }]; }, { config: [{\n            type: Input\n        }], onInputChange: [{\n            type: Output\n        }] }); })();\n\nclass NumberOnlyDirective {\r\n    constructor(_elRef, _renderer) {\r\n        this._elRef = _elRef;\r\n        this._renderer = _renderer;\r\n    }\r\n    ngOnInit() {\r\n        if (!this.disabledNumberOnly) {\r\n            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\r\n        }\r\n    }\r\n}\nNumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nNumberOnlyDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [[\"\", \"numberOnly\", \"\"]], inputs: { disabledNumberOnly: \"disabledNumberOnly\" } });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nNumberOnlyDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nNumberOnlyDirective.propDecorators = {\r\n    disabledNumberOnly: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[numberOnly]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{\n            type: Input\n        }] }); })();\n\nclass NgOtpInputModule {\r\n}\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) { return new (t || NgOtpInputModule)(); };\nNgOtpInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgOtpInputModule });\nNgOtpInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [KeysPipe], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpInputModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    ReactiveFormsModule\n                ],\n                declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],\n                exports: [NgOtpInputComponent],\n                providers: [KeysPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, { declarations: function () { return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective]; }, imports: function () { return [CommonModule,\n        FormsModule,\n        ReactiveFormsModule]; }, exports: function () { return [NgOtpInputComponent]; } }); })();\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, NgOtpInputModule, KeysPipe as ɵa, NumberOnlyDirective as ɵb };\n\n","<div class=\"px-0 mx-0 container-fluid\">\n  <app-auth-navbar></app-auth-navbar>\n  <div class=\"row min-vh-100\">\n    <div class=\"col-lg-6 bg-color1 d-flex justify-content-center align-items-center\">\n      <div class=\"container\">\n        <div class=\"px-4 row\">\n          <h1 class=\"mb-4 heading-1 col-12\">\n            EMAIL SENT\n          </h1>\n          <p class=\"my-5 text-gray col-12\">\n            We’ve sent you an email to\n            <span class=\"text-primary\">\n              {{emailPayload?.email}}\n            </span>\n            for verification.\n            Check your email for the verification link.\n          </p>\n          <!-- <div class=\"text-center col-12\">\n\n          </div> -->\n\n\n          <div class=\"col-auto mx-auto mb-5\">\n            <ng-otp-input  (onInputChange)=\"onOtpChange($event)\"  [config]=\"{length:6}\"></ng-otp-input>\n            <button class=\"mt-2 btn btn-block btn-primary\">\n              <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner\"></i>\n              Verify OTP\n            </button>\n          </div>\n\n          <h3 class=\"text-center col-12 text-gray\">\n            Did not receive the email yet?\n            <a (click)=\"onResend()\" class=\"text-primary\">\n              Resend\n            </a>\n          </h3>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"px-5 col-6 bg-primary d-none d-lg-flex justify-content-center align-items-center\">\n      <img class=\"img-fluid\" src=\"../../../../assets/svg/mail_sent.svg\" alt=\"\">\n      <!-- <div class=\"text-center\">\n      </div> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../auth.service';\n\n@Component({\n  selector: 'app-email-sent',\n  templateUrl: './email-sent.component.html',\n  styleUrls: ['./email-sent.component.scss']\n})\nexport class EmailSentComponent implements OnInit {\n  emailPayload: any;\n  isLoading: boolean;\n\n  constructor(\n    private authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.getIsLoadingListener()\n    .subscribe((isLoading) => {\n      this.isLoading = isLoading\n    })\n    this.emailPayload = JSON.parse(localStorage.getItem(\"emailPayload\"))\n  }\n  onResend() {\n    this.authService.forgotPassword(this.emailPayload)\n  }\n\n  onOtpChange(value: string) {\n    if (value.length != 6) {\n      return\n    }\n    this.authService.verifyOTP({\n      ...this.emailPayload, token: value\n    })\n  }\n\n}\n","<div class=\"px-0 mx-0 container-fluid\">\n  <app-auth-navbar></app-auth-navbar>\n  <div class=\"row min-vh-100\">\n    <div class=\"col-lg-6 bg-color1 d-flex justify-content-center align-items-center\">\n      <div class=\"container\">\n        <div class=\"mx-auto text-center row\">\n          <h1 class=\"mb-4 text-center heading-1 col-12\">\n            FORGOT PASSWORD\n          </h1>\n          <form [formGroup]=\"form\" class=\"mx-auto example-form col-md-8\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Email</mat-label>\n              <input type=\"email\" matInput formControlName=\"email\" placeholder=\"Ex. pat@example.com\">\n              <!-- <mat-hint>Errors appear instantly!</mat-hint> -->\n              <mat-error *ngIf=\"(email.hasError('email') || email.hasError('pattern') )&& !email.hasError('required')\">\n                Please enter a valid email address\n              </mat-error>\n              <mat-error *ngIf=\"email.hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </form>\n          <p class=\"mt-5 text-gray col-12\">\n            We’ll send a password reset link to your email.\n          </p>\n\n\n          <div class=\"mx-auto col-md-8\">\n            <button (click)=\"onForgotPassword()\" class=\"btn btn-block btn-primary\">\n              <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner mr-2\"></i>\n              SEND\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"px-5 col-6 bg-primary d-none d-lg-flex justify-content-center align-items-center\">\n      <img class=\"img-fluid\" src=\"../../../../assets/svg/forgot_password.svg\" alt=\"\">\n      <!-- <div class=\"text-center\">\n      </div> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { HelperService } from \"src/app/shared/services/helper.service\";\nimport { AuthService } from \"../../auth.service\";\n\n@Component({\n  selector: \"app-forgot-password\",\n  templateUrl: \"./forgot-password.component.html\",\n  styleUrls: [\"./forgot-password.component.scss\"],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  hide;\n  private emailRegEx =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  isLoading: boolean;\n\n  constructor(private fb: FormBuilder,\n    private authService: AuthService,\n    private helperService: HelperService) {}\n\n  ngOnInit(): void {\n    this.authService.getIsLoadingListener()\n    .subscribe((isLoading) => {\n      this.isLoading = isLoading\n    })\n    this.hide = false;\n    this.form = this.fb.group({\n      email: [\"\", [Validators.required, Validators.email, Validators.pattern(this.emailRegEx)]],\n    });\n  }\n\n  get email() {\n    return this.form.get(\"email\");\n  }\n\n  onForgotPassword() {\n    this.isLoading = true\n    if (this.form.invalid) {\n      this.isLoading = false\n      this.helperService.validateAllFormFields(this.form)\n      return;\n    }\n\n    this.authService.forgotPassword(this.form.value)\n  }\n}\n","<div class=\"px-0 mx-0 container-fluid\">\n  <app-auth-navbar></app-auth-navbar>\n  <div class=\"row min-vh-100\">\n    <div class=\"col-lg-6 bg-color1 d-flex justify-content-center align-items-center\">\n      <div class=\"container\">\n        <div class=\"mx-auto text-center row\">\n          <h1 class=\"mb-4 text-center heading-1 col-12\">\n            RESET PASSWORD\n          </h1>\n          <form autocomplete=\"off\" [formGroup]=\"form\" class=\"mx-auto row example-form col-md-8\">\n            <!-- <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\"> -->\n            <mat-form-field class=\"col-12\" appearance=\"outline\">\n              <mat-label>New password</mat-label>\n              <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\">\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\">\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n              </button>\n            </mat-form-field>\n            <mat-error *ngIf=\"password.invalid && (password.dirty || password.touched)\">\n              <mat-error *ngIf=\"password.hasError('required')\">\n                Password is a required field\n              </mat-error>\n              <mat-error *ngIf=\"!password.hasError('minlength') && password.hasError('pattern')\">\n                password must be alphanumeric\n              </mat-error>\n              <mat-error *ngIf=\"password.hasError('minlength')\">\n                Password must be minimum 8 characters and alphanumeric\n              </mat-error>\n            </mat-error>\n\n            <mat-form-field class=\"col-12\" appearance=\"outline\">\n              <mat-label>Confirm password</mat-label>\n              <input formControlName=\"confirm_password\" matInput [type]=\"hide ? 'password' : 'text'\">\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\">\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n              </button>\n              <!-- <mat-error\n                *ngIf=\"form.hasError('passwordMatch') && form.get('password').touched && form.get('confirm_password').touched\">\n                Passwords Don't Match\n              </mat-error> -->\n            </mat-form-field>\n            <mat-error\n              *ngIf=\"form.hasError('passwordMatch') && form.get('password').touched && form.get('confirm_password').touched\">\n              Passwords Don't Match\n            </mat-error>\n          </form>\n          <p class=\"mt-5 text-gray col-12\">\n            We’ll send a password reset link to your email.\n          </p>\n\n\n          <div class=\"mx-auto col-md-8\">\n            <button (click)=\"onReset()\" class=\"btn btn-block btn-primary\">\n              <i *ngIf=\"isLoading\" class=\"fa fa-spin fa-spinner\"></i>\n              SEND\n            </button>\n          </div>\n\n        </div>\n      </div>\n    </div>\n    <div class=\"px-5 col-6 bg-primary d-none d-lg-flex justify-content-center align-items-center\">\n      <img class=\"img-fluid\" src=\"../../../../assets/svg/authentication.svg\" alt=\"\">\n      <!-- <div class=\"text-center\">\n      </div> -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from \"@angular/forms\";\nimport { HelperService } from \"src/app/shared/services/helper.service\";\nimport { AuthService } from \"../../auth.service\";\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"./reset-password.component.html\",\n  styleUrls: [\"./reset-password.component.scss\"],\n})\nexport class ResetPasswordComponent implements OnInit {\n  hide;\n  // emailFormControl = new FormControl(\"\", [\n  //   Validators.required,\n  //   Validators.email,\n  // ]);\n  form: FormGroup = new FormGroup({});\n  isLoading: boolean;\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private helperService: HelperService\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.getIsLoadingListener()\n    .subscribe((isLoading) => {\n      this.isLoading = isLoading\n    })\n    this.hide = true;\n    this.form = this.fb.group(\n      {\n        password: [\"\", [Validators.required]],\n        confirm_password: [\"\", [Validators.required]],\n      },\n      {\n        validators: passwordMatch,\n      }\n    );\n  }\n\n  get password() {\n    return this.form.get(\"password\");\n  }\n\n  get confirm_password() {\n    return this.form.get(\"confirm_password\");\n  }\n\n  onReset() {\n    this.isLoading = true\n    if (this.form.invalid) {\n      this.helperService.validateAllFormFields(this.form);\n      this.isLoading = false\n      return;\n    }\n    this.authService.passwordReset(this.form.value);\n  }\n}\n\nfunction passwordMatch(formGroup: FormGroup): ValidationErrors | undefined {\n  const passwordControl = formGroup.get(\"password\");\n  const confirmPasswordControl = formGroup.get(\"confirm_password\");\n\n  if (passwordControl.value === confirmPasswordControl.value) {\n    return null;\n  } else {\n    return {\n      passwordMatch: true,\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { EmailSentComponent } from './email-sent/email-sent.component';\nimport { ResetPasswordComponent } from \"./reset-password/reset-password.component\";\nimport { SubAuthRoutingModule } from \"./sub-auth.routing.module\";\nimport { LandingModule } from 'src/app/landing/landing.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { NgOtpInputModule } from  'ng-otp-input';\n\n@NgModule({\n  declarations: [\n    ForgotPasswordComponent,\n    ResetPasswordComponent,\n    EmailSentComponent\n  ],\n  imports: [\n    CommonModule,\n    SubAuthRoutingModule,\n    LandingModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    NgOtpInputModule\n  ]\n})\nexport class SubAuthModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EmailSentComponent } from './email-sent/email-sent.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: 'forgot-password',\n    component: ForgotPasswordComponent\n  },\n  {\n    path: 'email-sent',\n    component: EmailSentComponent\n  },\n  {\n    path: 'reset-password',\n    component: ResetPasswordComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SubAuthRoutingModule { }\n"]}