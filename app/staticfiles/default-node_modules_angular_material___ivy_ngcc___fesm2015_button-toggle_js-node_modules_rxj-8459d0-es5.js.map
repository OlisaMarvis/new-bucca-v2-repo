{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AAKA;AACA;;AACA,mDAA8CA,yDAA9C,CAA4D,mCAA5D;AACA;AACA;AACA;AACA;AACA;;;AACA,yCAAoCA,yDAApC,CAAkD,sBAAlD;AACA;AACA;AACA;AACA;AACA;;;AACA;AACAC,iBAAaC,6DADb;AAEAC,qBAAiB,2DAAU;AAAA;AAAA,SAAV,CAFjB;AAGAC;AAHA,SAKA;;AACA;AACA;;UACAC,yBACA;AACA;AACAC,YAFA;AAGA;AACAC,WAJA,EAIA;AAAA;;AACA;AACA;AACA;AAEA;;;UACAC;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA;;AACA,yDAAgDC,iBAAhD;AACA;AACA;AACA;AACA;AACA;;AACA,iCAA+BT,uDAA/B;AACA;;AACA,4BAA0BA,uDAA1B;AACA,4BACAU,oFADA;AAEA;AACA;;;;;eACA;AAAiB;AAAA;eACjB;AAAA;;AACA;;AACA;AACA;AACAC;;AACAA;AACa,eAHb;AAIA;AACA;AACA;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqBJ,KAArB,CAAzB;AACA;AACA;;;;eACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;eACA;AACA;;AACA;AACA;AACA;;;;eACA;AACA;AACA;AACA;AACA;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqBA,KAArB,CAAzB;AACA;AACA;;;;eACA;AAAqB;AAAA;eACrB;AACA,6BAAyB,8EAAqBA,KAArB,CAAzB;;AACA;AACA;AAAA;AAAA;AACA;AACA;;;iBACA;AACA,uCAAmCK,oEAAnC,CAAiD,aAAjD,EAAiDC,SAAjD,EAAiD,KAAjD;AACA;;;iBACA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA,YACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA,YACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AAAA;;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,eAFA,MAGA;AACA;AACA;AACA,aAPA,MAQA;AACAC;AACA,aAhBA,CAiBA;AACA;AACA;;;AACA;AACAC;AAAA;AAAA;AACA,aAFA,MAGA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;;;;iBACA;AAAA;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;;AACAR;AAAA;AAAA;AACA,aANA,MAOA;AACA;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AAAA;AAAA;AACA;AACA;;;;iBACA;AACA;AACA;AACS,aAFT;;AAGA;AACAS;;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;AACA,aAJA,CAKA;AACA;;;AACA;AACA;;;;;;AAEAR;AAAuE,gDAAuCR,gEAAyBA,4DAAzB,CAAvC,EAA2FA,gEAAwBiB,kCAAxB,EAAwB,CAAxB,CAA3F;AAAmH,OAA1L;;AACAT,gDAA0CR,gEAAwB;AAAGkB,mCAAH;AAAGC,gDAAH;AAAGC;AAAwJ;AACrNpB,yEAAqBqB,QAArB,EAAqBC,gBAArB,EAAqB,CAArB;AACR;;AAAM;AACN;;AACQtB,yEAAqBuB,KAAMvB,2DAA3B,MAA6CwB,uBAA7C;AACR;AAAO,SAL2D;AAK3DC,kEAL2D;AAK3DC,mBAL2D;AAK3DC;AAA+I;AAC9I3B,sEAAkB,eAAlB,EAAkBwB,YAAlB;;AACAxB,sEAAkB,4BAAlB,EAAkBwB,YAAlB,EAAkB,6CAAlB,EAAkBA,6BAAlB;AACR;AAAO,SAR2D;AAQ3DI;AAAYC,kCAAZ;AAAYC,sBAAZ;AAAYC,8BAAZ;AAAYxB,wBAAZ;AAAYyB,8BAAZ;AAAYC;AAAZ,SAR2D;AAQ2EC;AAAaC,oCAAb;AAAaC;AAAb,SAR3E;AAQsIC,0CARtI;AAQsIC,mBAAiDtC,iEAAyB,CAClRuC,uCADkR,EAElR;AAActC,2CAAd;AAAcE;AAAd,SAFkR,CAAzB,CAAjD;AARtI,OAAxB,CAA1C;;AAYAK;AAAA,gBACA;AAAMU,gBAAMlB;AAAZ,SADA,EAEA;AAAMkB,yBAAN;AAAMsB;AAAgCtB,kBAAMlB;AAAtC,aAAgD;AAAIkB,kBAAMlB,iDAAV;AAAgByC;AAAhB,WAAhD;AAAN,SAFA;AAAA;;AAIAjC;AACAkC;AAAuBxB,gBAAMlB,0DAA7B;AAA4CyC,iBAAS,2DAAU;AAAA;AAAA,WAAV,CAAT,EAAmB;AAC/D;AACA;AACAE;AAH+D,WAAnB;AAA5C,UADA;AAMAd;AAAmBX,gBAAMlB;AAAzB,UANA;AAOA8B;AAAaZ,gBAAMlB;AAAnB,UAPA;AAQA+B;AAAiBb,gBAAMlB;AAAvB,UARA;AASAO;AAAcW,gBAAMlB;AAApB,UATA;AAUAmC;AAAoBjB,gBAAMlB;AAA1B,UAVA;AAWAgC;AAAiBd,gBAAMlB;AAAvB,UAXA;AAYAiC;AAAiBf,gBAAMlB;AAAvB,UAZA;AAaAoC;AAAelB,gBAAMlB;AAArB;AAbA;;AAeA;AAAe,2DAAmDA,gEAAwBQ,qBAAxB,EAAwB;AAC1FU,gBAAclB,oDAD4E;AAE1FyC;AACAG,+CADA;AAEAC,wBACAN,uCADA,EAEA;AAAsBtC,+CAAtB;AAAsBE;AAAtB,aAFA,CAFA;AAMA2C;AACA,6BADA;AAEA,gDAFA;AAGA,gDAHA;AAIA,8DAJA;AAKA;AALA,aANA;AAaAT;AAbA;AAF0F,UAAxB,EAiB7D;AAAiB;AAAUnB,kBAAMlB;AAAhB,aAA0C;AAAIkB,2BAAJ;AAAIsB;AACpEtB,oBAAsBlB;AAD8C,eAEvD;AACbkB,oBAAsBlB,iDADT;AAEbyC;AAFa,aAFuD;AAAJ,WAA1C;AAKF,SAtB8C,EAsB9C;AAAIN;AACxBjB,kBAAkBlB;AADM,YAAJ;AAEXoC;AACTlB,kBAAkBlB;AADT,YAFW;AAIX6B;AACTX,kBAAkBlB;AADT,YAJW;AAMX8B;AACTZ,kBAAkBlB;AADT,YANW;AAQX+B;AACTb,kBAAkBlB;AADT,YARW;AAUXO;AACTW,kBAAkBlB;AADT,YAVW;AAYXgC;AACTd,kBAAkBlB;AADT,YAZW;AAcXiC;AACTf,kBAAkBlB;AADT,YAdW;AAgBX0C;AACTxB,kBAAkBlB,0DADT;AAETyC,mBAAmB,2DAAU;AAAA;AAAA,aAAV,CAAnB,EAA6B;AAC7B;AACA;AACAE;AAH6B,aAA7B;AAFS;AAhBW,SAtB8C,CAAnD;AA6CC,OA7ChB,KA8CA;;AACA;;;UACAI;;;;AAEA,sCAAkC,4EAAkBA,mBAAlB,CAAlC;AACA;;;UACAzB;;;;;AACA;AAAA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA,8BAA0BtB,uDAA1B;AACA;AACA;AACA;AACA,8BACAU,oFADA;AAjBA;AAmBA;AACA;;;;;eACA;AAAqB,6BAAU,OAAV;AAAkB;AACvC;;;;eACA;AACA;AACA;eACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;eACA;AACA,2BAAyB,8EAAqBH,KAArB,CAAzB;;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;;eACA;AACA;AACA;eACA;AAA0B,6BAAiB,8EAAqBA,KAArB,CAAjB;AAAsC;;;iBAChE;AACA;AACA;AACA,6DAAkDE,iBAAlD;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,eAFA,MAGA;AACA;AACA;AACA;AACA;AACAuC;AACA;AACA;AACA;;;iBACA;AACA;AACA;;;iBACA;AACA;;AACA,gEAFA,CAGA;AACA;;;AACA;AACAA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA;;;;iBACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;AACA,aARA,CASA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iBACA;AACA;AACA;AACA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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_0__","provide","_angular_forms__WEBPACK_IMPORTED_MODULE_1__","useExisting","multi","MatButtonToggleChange","source","value","MatButtonToggleGroup","uniqueIdCounter","defaultOptions","toggle","_angular_cdk_collections__WEBPACK_IMPORTED_MODULE_3__","undefined","deferEvents","Promise","correspondingOption","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","type","selectors","contentQueries","dirIndex","MatButtonToggle","_t","ctx","hostAttrs","hostVars","hostBindings","inputs","appearance","name","vertical","multiple","disabled","outputs","valueChange","change","exportAs","features","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","decorators","args","_buttonToggles","descendants","selector","providers","host","MatButtonToggleBase","group","_MatButtonToggleMixinBase","MAT_BUTTON_TOGGLE_GROUP","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_5__","viewQuery","_c0","disableRipple","ariaLabelledby","tabIndex","checked","id","ariaLabel","ngContentSelectors","decls","vars","consts","template","_r0","directives","_angular_material_core__WEBPACK_IMPORTED_MODULE_4__","styles","encapsulation","changeDetection","_buttonElement","MatButtonToggleModule","imports","exports","declarations","scheduler","_scheduler_async__WEBPACK_IMPORTED_MODULE_0__","delay","DelayOperator","DelaySubscriber","destination","_Notification__WEBPACK_IMPORTED_MODULE_3__","queue","_Subscriber__WEBPACK_IMPORTED_MODULE_2__","DelayMessage"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/delay.js","webpack:///node_modules/rxjs/_esm2015/internal/util/isDate.js"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n","export function isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\n"]}