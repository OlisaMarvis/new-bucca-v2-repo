{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWIA;;AACEA;;AAAOA;;AAAkBA;;AAC3BA;;;;;;AADSA;;AAAAA;;;;;;AAYDA;;AACEA;;AACFA;;;;;;AACAA;;AACEA;;AACFA;;;;;;AANFA;;AACEA;;AAGAA;;AAGFA;;;;;;AANSA;;AAAAA;;AAGAA;;AAAAA;;;;;;AAWPA;;AACEA;;AACFA;;;;;;AAHFA;;AACEA;;AAMFA;;;;;;AANSA;;AAAAA;;;;;;AAaTA;;AAAgDA;;AAA2CA;;;;UCtCxFC;AAOX,iCACUC,EADV,EAEUC,WAFV,EAGUC,aAHV,EAIUC,YAJV,EAKUC,cALV,EAMUC,MANV,EAMwB;AAAA;;AALd;AACA;AACA;AACA;AACA;AACA;AAXV,2BAAqB,KAArB;AAGQ,8BAAe,yJAAf;AASH;;;;iBAEL,oBAAQ;AAAA;;AACN,iBAAKF,YAAL,CAAkBG,gBAAlB,GACCC,SADD,CACW,UAACC,YAAD,EAAiB;AAC1B,mBAAI,CAACA,YAAL,GAAoBA,YAApB;AACD,aAHD;AAIA,iBAAKP,WAAL,CAAiBQ,oBAAjB,GAAwCF,SAAxC,CAAkD,UAACG,SAAD,EAAc;AAC9D,mBAAI,CAACA,SAAL,GAAiBA,SAAjB;AACD,aAFD;AAGA,iBAAKC,SAAL,GAAiB,KAAKX,EAAL,CAAQY,KAAR,CAAc;AAC7BC,mBAAK,EAAE,CAAC,EAAD,EAAK,CAACC,+DAAD,EAAsBA,+DAAmB,KAAKC,YAAxB,CAAtB,CAAL,CADsB;AAE7BC,sBAAQ,EAAE,CAAC,EAAD,EAAK,CAACF,+DAAD,CAAL;AAFmB,aAAd,CAAjB;AAID;;;eAED,eAAS;AACP,mBAAO,KAAKH,SAAL,CAAeM,GAAf,CAAmB,OAAnB,CAAP;AACD;;;eAED,eAAY;AACV,mBAAO,KAAKN,SAAL,CAAeM,GAAf,CAAmB,UAAnB,CAAP;AACD;;;iBAED,mBAAO;AACL,iBAAKT,YAAL,GAAoB,IAApB;AACA,iBAAKE,SAAL,GAAiB,IAAjB;;AACA,gBAAI,KAAKC,SAAL,CAAeO,OAAnB,EAA4B;AAC1B,mBAAKhB,aAAL,CAAmBiB,qBAAnB,CAAyC,KAAKR,SAA9C;AACA,mBAAKD,SAAL,GAAiB,KAAjB;AACA;AACD;;AACD,iBAAKT,WAAL,CAAiBmB,KAAjB,CAAuB,KAAKT,SAAL,CAAeU,KAAtC,EAA6C,KAAKjB,cAAlD;AACD;;;iBAED,0BAAc;AACZ,iBAAKC,MAAL,CAAYiB,QAAZ,CAAqB,CAAC,uBAAD,CAArB;AACA,iBAAKlB,cAAL,CAAoBmB,KAApB;AACD;;;;;;;yBApDUxB,iBAAcD;AAAA;;;cAAdC;AAAcyB;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;ADb3B9B;;AAMEA;;AACEA;;AAAsDA;;AAAOA;;AAC7DA;;AAAwCA;;AAAaA;;AAGrDA;;AAMAA;;AAA6CA;AAAA,qBAAY+B,aAAZ;AAAqB,aAArB;;AAE3C/B;;AACEA;;AACEA;;AAEAA;;AAQFA;;AACFA;;AAEAA;;AACEA;;AACEA;;AACAA;;AAQFA;;AACFA;;AAEAA;;AAEEA;;AACEA;;AACAA;;AACFA;;AAGAA;;AAAiCA;AAAA,qBAAS+B,oBAAT;AAAyB,aAAzB;;AAAwD/B;;AAA2BA;;AAAgBA;;AAAOA;;AAC7IA;;AACFA;;AACFA;;AACFA;;;;AAjDwBA;;AAAAA;;AAMdA;;AAAAA;;AAMMA;;AAAAA;;AAcAA;;AAAAA;;AAcCA;;AAAAA;;;;;;;;","names":["_angular_core__WEBPACK_IMPORTED_MODULE_3__","LoginComponent","fb","authService","helperService","errorService","loginDialogRef","router","getErrorListener","subscribe","errorMessage","getIsLoadingListener","isLoading","loginForm","group","email","_angular_forms__WEBPACK_IMPORTED_MODULE_4__","emailPattern","password","get","invalid","validateAllFormFields","login","value","navigate","close","selectors","decls","vars","consts","template","ctx"],"sources":["webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/login/login.component.ts"],"sourcesContent":["<div class=\"pb-5 border-0 card bg-color1\">\n  <!-- <div mat-dialog-actions class=\"d-flex justify-content-end\">\n    <button mat-dialog-close mat-button>\n      <mat-icon>close</mat-icon>\n    </button>\n  </div> -->\n  <div class=\"card-body px-lg-5 py-lg-5\">\n    <p class=\"text-center f-w-100 text-primary display-4\">Sign In</p>\n    <p class=\"text-center text-gray m-b-50\">Welcome back.</p>\n\n\n    <div id=\"errorDiv\" *ngIf=\"errorMessage\" class=\"mb-4 text-center\">\n      <small>{{ errorMessage }}</small>\n    </div>\n\n    <!-- <form> -->\n\n    <form [formGroup]=\"loginForm\" class=\"m-t-50\" (ngSubmit)=\"onLogin()\">\n\n      <div class=\"mt-3 col-12\">\n        <div class=\"form-group\">\n          <input formControlName=\"email\" type=\"email\" class=\"form-control\" placeholder=\" Email or Phone\">\n          <!-- <div class=\"text text-danger\">Example invalid feedback text</div> -->\n          <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"text text-danger\">\n            <span *ngIf=\"email.hasError('required')\">\n              Email is a required field\n            </span>\n            <span *ngIf=\"email.hasError('pattern')\">\n              please use the right email format eg: example@example.com\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"mt-3 col-12\">\n        <div class=\"form-group\">\n          <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\n          <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"text text-danger\">\n            <span *ngIf=\"password.hasError('required')\">\n              password is a required field\n            </span>\n            <!-- <span *ngIf=\"password.hasError('pattern')\">\n              please use the right email format eg: example@example.com\n            </span> -->\n          </div>\n        </div>\n      </div>\n\n      <div class=\"text-center\">\n        <!-- <i class=\"fa fa-spinner\"></i> -->\n        <button type=\"submit\" class=\"py-4 btn btn-block btn-lg btn-primary m-t-50\">\n          <span *ngIf=\"isLoading\" class=\"btn-inner--icon\"><i class=\"fa fa-spinner fa-spin fa-fw\"></i></span>\n          Login\n        </button>\n\n        <!-- <p class=\"mt-3 small text-gray\">Want an account? <span class=\"text-primary\">Sign Up</span></p> -->\n        <button type=\"button\" mat-button (click)=\"forgotPassword()\" class=\"mt-3 small text-gray\"><span class=\"text-primary\">Forgot password?</span></button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from \"../auth.service\";\nimport { HelperService } from \"../../shared/services/helper.service\";\nimport { ErrorService } from 'src/app/shared/services/error.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  isLoading: boolean = false;\n  loginForm: FormGroup;\n  errorMessage: string;\n  private emailPattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private helperService: HelperService,\n    private errorService: ErrorService,\n    private loginDialogRef: MatDialogRef<LoginComponent>,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.errorService.getErrorListener()\n    .subscribe((errorMessage) => {\n      this.errorMessage = errorMessage;\n    })\n    this.authService.getIsLoadingListener().subscribe((isLoading) => {\n      this.isLoading = isLoading;\n    });\n    this.loginForm = this.fb.group({\n      email: [\"\", [Validators.required, Validators.pattern(this.emailPattern)]],\n      password: [\"\", [Validators.required]],\n    });\n  }\n\n  get email() {\n    return this.loginForm.get('email')\n  }\n\n  get password() {\n    return this.loginForm.get('password')\n  }\n\n  onLogin() {\n    this.errorMessage = null\n    this.isLoading = true\n    if (this.loginForm.invalid) {\n      this.helperService.validateAllFormFields(this.loginForm)\n      this.isLoading = false\n      return;\n    }\n    this.authService.login(this.loginForm.value, this.loginDialogRef);\n  }\n\n  forgotPassword() {\n    this.router.navigate([\"/auth/forgot-password\"])\n    this.loginDialogRef.close()\n  }\n\n}\n"]}