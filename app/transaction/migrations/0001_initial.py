# Generated by Django 3.2.3 on 2022-02-14 11:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('account', '0001_initial'),
        ('food', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalVariable',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('variable_name', models.CharField(blank=True, max_length=250, null=True)),
                ('variable_text', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('time', models.TimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MealTransaction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, null=True)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('unit_price', models.FloatField(blank=True, null=True)),
                ('total', models.FloatField(blank=True, null=True)),
                ('service_fee', models.FloatField(blank=True, null=True)),
                ('sub_total', models.FloatField(blank=True, null=True)),
                ('is_comp_allow_txn_mix', models.BooleanField(blank=True, null=True)),
                ('platform', models.CharField(blank=True, choices=[('AND', 'ANDROID'), ('IOS', 'IOS'), ('SEF', 'SELF-SERVICE'), ('WEB', 'WEB')], max_length=15, null=True)),
                ('place', models.CharField(blank=True, choices=[('market', 'Market Place'), ('company', 'Company Place')], max_length=8, null=True)),
                ('status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('void', 'Void'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('failed', 'Failed'), ('insufficient', 'Insufficient'), ('ticket-printed', 'Ticket-printed')], default='pending', max_length=15, null=True)),
                ('company_amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('personal_amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('verification_type', models.CharField(blank=True, max_length=50, null=True)),
                ('date_created', models.DateField(auto_now_add=True, null=True)),
                ('time_created', models.TimeField(auto_now_add=True, null=True)),
                ('delivery_date', models.DateField(blank=True, null=True)),
                ('delivered_time', models.TimeField(blank=True, null=True)),
                ('delivered_date', models.DateField(blank=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_company', to='account.company')),
                ('food', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_food', to='food.food')),
                ('meal_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_mealtype', to='food.mealtype')),
            ],
        ),
        migrations.CreateModel(
            name='Paystack_Webhook',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('data', models.JSONField(blank=True, null=True)),
                ('event', models.TextField(blank=True, null=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('company', models.IntegerField(blank=True, null=True)),
                ('time', models.TimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PaystackCompanyAutoTopup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('integration', models.IntegerField(blank=True, null=True)),
                ('domain', models.CharField(blank=True, max_length=250, null=True)),
                ('balance', models.FloatField(blank=True, null=True)),
                ('currency', models.CharField(blank=True, max_length=5, null=True)),
                ('difference', models.FloatField(blank=True, null=True)),
                ('reason', models.TextField(blank=True, null=-1)),
                ('model_responsible', models.CharField(blank=True, max_length=250, null=True)),
                ('model_row', models.IntegerField(blank=True, null=True)),
                ('ledger_id', models.IntegerField(blank=True, null=True)),
                ('ledger_created_at', models.DateTimeField(blank=True, null=True)),
                ('ledger_updated_at', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('time', models.TimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Receipts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('time', models.TimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WithdrawalHistory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('amount', models.FloatField()),
                ('date_created', models.DateField(auto_now=True, null=True)),
                ('time_created', models.TimeField(auto_now=True, null=True)),
                ('recipient', models.IntegerField()),
                ('transfer_id', models.IntegerField()),
                ('status', models.TextField(blank=True, null=True)),
                ('updated_status', models.TextField(blank=True, choices=[('success', 'success'), ('pending', 'pending'), ('failed', 'failed')], null=True)),
                ('transfer_code', models.TextField(blank=True, null=True)),
                ('reference_no', models.TextField(blank=True, null=True)),
                ('user_type', models.TextField(blank=True, null=True)),
                ('withdrawal_charge', models.FloatField(blank=True, default=0, null=True)),
                ('account_debted_for_charge', models.CharField(blank=True, max_length=20, null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('data', models.JSONField(blank=True, null=True)),
                ('company', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='withdrawal_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Void_transaction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('total', models.FloatField(blank=True, null=True)),
                ('company_account_credit', models.FloatField(blank=True, null=True)),
                ('staff_personal_account_credit', models.FloatField(blank=True, null=True)),
                ('service_fee_debit', models.FloatField(blank=True, null=True)),
                ('vendor_debit', models.FloatField(blank=True, null=True)),
                ('date', models.DateField(auto_now_add=True, null=True)),
                ('time', models.TimeField(auto_now_add=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='void_company', to='account.company')),
                ('txn_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_void', to='transaction.mealtransaction')),
                ('vendor_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='void_ven_user', to=settings.AUTH_USER_MODEL)),
                ('voider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='void_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Staff_TopupHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('date_created', models.DateField(auto_now=True, null=True)),
                ('time_created', models.TimeField(auto_now=True, null=True)),
                ('user_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('top_up_charge', models.FloatField(blank=True, default=0, null=True)),
                ('reference_no', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('top_up_payload', models.JSONField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_topup_company', to='account.company')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_topup_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='mealtransaction',
            name='receipt_no',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='transaction.receipts'),
        ),
        migrations.AddField(
            model_name='mealtransaction',
            name='self_service_device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_self_service', to='account.device'),
        ),
        migrations.AddField(
            model_name='mealtransaction',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mealtransaction',
            name='vendor_user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ven_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mealtransaction',
            name='voider',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='txn_voider', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Company_TopupHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('user_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('top_up_charge', models.FloatField(blank=True, default=0, null=True)),
                ('date_created', models.DateField(auto_now=True, null=True)),
                ('time_created', models.TimeField(auto_now=True, null=True)),
                ('reference_no', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('top_up_payload', models.JSONField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comp_topup_company', to='account.company')),
            ],
        ),
    ]
